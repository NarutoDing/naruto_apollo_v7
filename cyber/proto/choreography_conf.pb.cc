// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/choreography_conf.proto

#include "cyber/proto/choreography_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2fchoreography_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ChoreographyTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChoreographyTask> _instance;
} _ChoreographyTask_default_instance_;
class ChoreographyConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChoreographyConf> _instance;
} _ChoreographyConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ChoreographyConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::ChoreographyConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto}, {
      &scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto.base,}};

static void InitDefaultsscc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ChoreographyTask_default_instance_;
    new (ptr) ::apollo::cyber::proto::ChoreographyTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, processor_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyTask, prio_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, choreography_processor_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, choreography_affinity_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, choreography_processor_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, choreography_processor_prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, choreography_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, pool_processor_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, pool_affinity_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, pool_processor_policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, pool_processor_prio_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, pool_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChoreographyConf, tasks_),
  6,
  0,
  1,
  7,
  2,
  8,
  3,
  4,
  9,
  5,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::cyber::proto::ChoreographyTask)},
  { 11, 27, sizeof(::apollo::cyber::proto::ChoreographyConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ChoreographyTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ChoreographyConf_default_instance_),
};

const char descriptor_table_protodef_cyber_2fproto_2fchoreography_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#cyber/proto/choreography_conf.proto\022\022a"
  "pollo.cyber.proto\"D\n\020ChoreographyTask\022\014\n"
  "\004name\030\001 \001(\t\022\021\n\tprocessor\030\002 \001(\005\022\017\n\004prio\030\003"
  " \001(\r:\0011\"\367\002\n\020ChoreographyConf\022\"\n\032choreogr"
  "aphy_processor_num\030\001 \001(\r\022\035\n\025choreography"
  "_affinity\030\002 \001(\t\022%\n\035choreography_processo"
  "r_policy\030\003 \001(\t\022#\n\033choreography_processor"
  "_prio\030\004 \001(\005\022\033\n\023choreography_cpuset\030\005 \001(\t"
  "\022\032\n\022pool_processor_num\030\006 \001(\r\022\025\n\rpool_aff"
  "inity\030\007 \001(\t\022\035\n\025pool_processor_policy\030\010 \001"
  "(\t\022\033\n\023pool_processor_prio\030\t \001(\005\022\023\n\013pool_"
  "cpuset\030\n \001(\t\0223\n\005tasks\030\013 \003(\0132$.apollo.cyb"
  "er.proto.ChoreographyTask"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_sccs[2] = {
  &scc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto.base,
  &scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto = {
  false, false, descriptor_table_protodef_cyber_2fproto_2fchoreography_5fconf_2eproto, "cyber/proto/choreography_conf.proto", 505,
  &descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_once, descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_sccs, descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_cyber_2fproto_2fchoreography_5fconf_2eproto::offsets,
  file_level_metadata_cyber_2fproto_2fchoreography_5fconf_2eproto, 2, file_level_enum_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto, file_level_service_descriptors_cyber_2fproto_2fchoreography_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cyber_2fproto_2fchoreography_5fconf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cyber_2fproto_2fchoreography_5fconf_2eproto)), true);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ChoreographyTask::_Internal {
 public:
  using HasBits = decltype(std::declval<ChoreographyTask>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChoreographyTask::ChoreographyTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ChoreographyTask)
}
ChoreographyTask::ChoreographyTask(const ChoreographyTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&processor_, &from.processor_,
    static_cast<size_t>(reinterpret_cast<char*>(&prio_) -
    reinterpret_cast<char*>(&processor_)) + sizeof(prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyTask)
}

void ChoreographyTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processor_ = 0;
  prio_ = 1u;
}

ChoreographyTask::~ChoreographyTask() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChoreographyTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChoreographyTask::ArenaDtor(void* object) {
  ChoreographyTask* _this = reinterpret_cast< ChoreographyTask* >(object);
  (void)_this;
}
void ChoreographyTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChoreographyTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChoreographyTask& ChoreographyTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChoreographyTask_cyber_2fproto_2fchoreography_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ChoreographyTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    processor_ = 0;
    prio_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChoreographyTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyTask.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 processor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_processor(&has_bits);
          processor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prio = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prio(&has_bits);
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChoreographyTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyTask.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 processor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_processor(), target);
  }

  // optional uint32 prio = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyTask)
  return target;
}

size_t ChoreographyTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 processor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_processor());
    }

    // optional uint32 prio = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChoreographyTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChoreographyTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ChoreographyTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChoreographyTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChoreographyTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChoreographyTask)
    MergeFrom(*source);
  }
}

void ChoreographyTask::MergeFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      processor_ = from.processor_;
    }
    if (cached_has_bits & 0x00000004u) {
      prio_ = from.prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChoreographyTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChoreographyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChoreographyTask::CopyFrom(const ChoreographyTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyTask::IsInitialized() const {
  return true;
}

void ChoreographyTask::InternalSwap(ChoreographyTask* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(processor_, other->processor_);
  swap(prio_, other->prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChoreographyTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChoreographyConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ChoreographyConf>()._has_bits_);
  static void set_has_choreography_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_choreography_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_choreography_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_choreography_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_choreography_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pool_processor_num(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pool_affinity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pool_processor_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pool_processor_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pool_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChoreographyConf::ChoreographyConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ChoreographyConf)
}
ChoreographyConf::ChoreographyConf(const ChoreographyConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  choreography_affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_choreography_affinity()) {
    choreography_affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_choreography_affinity(), 
      GetArena());
  }
  choreography_processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_choreography_processor_policy()) {
    choreography_processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_choreography_processor_policy(), 
      GetArena());
  }
  choreography_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_choreography_cpuset()) {
    choreography_cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_choreography_cpuset(), 
      GetArena());
  }
  pool_affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pool_affinity()) {
    pool_affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool_affinity(), 
      GetArena());
  }
  pool_processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pool_processor_policy()) {
    pool_processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool_processor_policy(), 
      GetArena());
  }
  pool_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pool_cpuset()) {
    pool_cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool_cpuset(), 
      GetArena());
  }
  ::memcpy(&choreography_processor_num_, &from.choreography_processor_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&pool_processor_prio_) -
    reinterpret_cast<char*>(&choreography_processor_num_)) + sizeof(pool_processor_prio_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChoreographyConf)
}

void ChoreographyConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto.base);
  choreography_affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  choreography_processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  choreography_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_affinity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_processor_policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&choreography_processor_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pool_processor_prio_) -
      reinterpret_cast<char*>(&choreography_processor_num_)) + sizeof(pool_processor_prio_));
}

ChoreographyConf::~ChoreographyConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChoreographyConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChoreographyConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  choreography_affinity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  choreography_processor_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  choreography_cpuset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_affinity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_processor_policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pool_cpuset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChoreographyConf::ArenaDtor(void* object) {
  ChoreographyConf* _this = reinterpret_cast< ChoreographyConf* >(object);
  (void)_this;
}
void ChoreographyConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChoreographyConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChoreographyConf& ChoreographyConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChoreographyConf_cyber_2fproto_2fchoreography_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ChoreographyConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChoreographyConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      choreography_affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      choreography_processor_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      choreography_cpuset_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      pool_affinity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      pool_processor_policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      pool_cpuset_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&choreography_processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&choreography_processor_prio_) -
        reinterpret_cast<char*>(&choreography_processor_num_)) + sizeof(choreography_processor_prio_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&pool_processor_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pool_processor_prio_) -
        reinterpret_cast<char*>(&pool_processor_num_)) + sizeof(pool_processor_prio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChoreographyConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 choreography_processor_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_choreography_processor_num(&has_bits);
          choreography_processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string choreography_affinity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_choreography_affinity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string choreography_processor_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_choreography_processor_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 choreography_processor_prio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_choreography_processor_prio(&has_bits);
          choreography_processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string choreography_cpuset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_choreography_cpuset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pool_processor_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pool_processor_num(&has_bits);
          pool_processor_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pool_affinity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pool_affinity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_affinity");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pool_processor_policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pool_processor_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pool_processor_prio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pool_processor_prio(&has_bits);
          pool_processor_prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pool_cpuset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pool_cpuset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChoreographyConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChoreographyConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 choreography_processor_num = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_choreography_processor_num(), target);
  }

  // optional string choreography_affinity = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_affinity().data(), static_cast<int>(this->_internal_choreography_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_affinity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_choreography_affinity(), target);
  }

  // optional string choreography_processor_policy = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_processor_policy().data(), static_cast<int>(this->_internal_choreography_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_processor_policy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_choreography_processor_policy(), target);
  }

  // optional int32 choreography_processor_prio = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_choreography_processor_prio(), target);
  }

  // optional string choreography_cpuset = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_choreography_cpuset().data(), static_cast<int>(this->_internal_choreography_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.choreography_cpuset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_choreography_cpuset(), target);
  }

  // optional uint32 pool_processor_num = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pool_processor_num(), target);
  }

  // optional string pool_affinity = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_affinity().data(), static_cast<int>(this->_internal_pool_affinity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_affinity");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pool_affinity(), target);
  }

  // optional string pool_processor_policy = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_processor_policy().data(), static_cast<int>(this->_internal_pool_processor_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_processor_policy");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pool_processor_policy(), target);
  }

  // optional int32 pool_processor_prio = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_pool_processor_prio(), target);
  }

  // optional string pool_cpuset = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pool_cpuset().data(), static_cast<int>(this->_internal_pool_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ChoreographyConf.pool_cpuset");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pool_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChoreographyConf)
  return target;
}

size_t ChoreographyConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChoreographyConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.ChoreographyTask tasks = 11;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string choreography_affinity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_affinity());
    }

    // optional string choreography_processor_policy = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_processor_policy());
    }

    // optional string choreography_cpuset = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_choreography_cpuset());
    }

    // optional string pool_affinity = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_affinity());
    }

    // optional string pool_processor_policy = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_processor_policy());
    }

    // optional string pool_cpuset = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pool_cpuset());
    }

    // optional uint32 choreography_processor_num = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_choreography_processor_num());
    }

    // optional int32 choreography_processor_prio = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_choreography_processor_prio());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 pool_processor_num = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pool_processor_num());
    }

    // optional int32 pool_processor_prio = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pool_processor_prio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChoreographyConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChoreographyConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ChoreographyConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChoreographyConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChoreographyConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChoreographyConf)
    MergeFrom(*source);
  }
}

void ChoreographyConf::MergeFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChoreographyConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_choreography_affinity(from._internal_choreography_affinity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_choreography_processor_policy(from._internal_choreography_processor_policy());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_choreography_cpuset(from._internal_choreography_cpuset());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_pool_affinity(from._internal_pool_affinity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_pool_processor_policy(from._internal_pool_processor_policy());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_pool_cpuset(from._internal_pool_cpuset());
    }
    if (cached_has_bits & 0x00000040u) {
      choreography_processor_num_ = from.choreography_processor_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      choreography_processor_prio_ = from.choreography_processor_prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      pool_processor_num_ = from.pool_processor_num_;
    }
    if (cached_has_bits & 0x00000200u) {
      pool_processor_prio_ = from.pool_processor_prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChoreographyConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChoreographyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChoreographyConf::CopyFrom(const ChoreographyConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChoreographyConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChoreographyConf::IsInitialized() const {
  return true;
}

void ChoreographyConf::InternalSwap(ChoreographyConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tasks_.InternalSwap(&other->tasks_);
  choreography_affinity_.Swap(&other->choreography_affinity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  choreography_processor_policy_.Swap(&other->choreography_processor_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  choreography_cpuset_.Swap(&other->choreography_cpuset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pool_affinity_.Swap(&other->pool_affinity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pool_processor_policy_.Swap(&other->pool_processor_policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pool_cpuset_.Swap(&other->pool_cpuset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChoreographyConf, pool_processor_prio_)
      + sizeof(ChoreographyConf::pool_processor_prio_)
      - PROTOBUF_FIELD_OFFSET(ChoreographyConf, choreography_processor_num_)>(
          reinterpret_cast<char*>(&choreography_processor_num_),
          reinterpret_cast<char*>(&other->choreography_processor_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChoreographyConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ChoreographyTask* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ChoreographyTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ChoreographyTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ChoreographyConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ChoreographyConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ChoreographyConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
