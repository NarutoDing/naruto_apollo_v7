// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/classic_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fclassic_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fclassic_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2fclassic_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ClassicConf;
class ClassicConfDefaultTypeInternal;
extern ClassicConfDefaultTypeInternal _ClassicConf_default_instance_;
class ClassicTask;
class ClassicTaskDefaultTypeInternal;
extern ClassicTaskDefaultTypeInternal _ClassicTask_default_instance_;
class SchedGroup;
class SchedGroupDefaultTypeInternal;
extern SchedGroupDefaultTypeInternal _SchedGroup_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::ClassicConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::ClassicConf>(Arena*);
template<> ::apollo::cyber::proto::ClassicTask* Arena::CreateMaybeMessage<::apollo::cyber::proto::ClassicTask>(Arena*);
template<> ::apollo::cyber::proto::SchedGroup* Arena::CreateMaybeMessage<::apollo::cyber::proto::SchedGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ClassicTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ClassicTask) */ {
 public:
  inline ClassicTask() : ClassicTask(nullptr) {}
  virtual ~ClassicTask();

  ClassicTask(const ClassicTask& from);
  ClassicTask(ClassicTask&& from) noexcept
    : ClassicTask() {
    *this = ::std::move(from);
  }

  inline ClassicTask& operator=(const ClassicTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicTask& operator=(ClassicTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassicTask& default_instance();

  static inline const ClassicTask* internal_default_instance() {
    return reinterpret_cast<const ClassicTask*>(
               &_ClassicTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClassicTask& a, ClassicTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassicTask* New() const final {
    return CreateMaybeMessage<ClassicTask>(nullptr);
  }

  ClassicTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassicTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassicTask& from);
  void MergeFrom(const ClassicTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ClassicTask";
  }
  protected:
  explicit ClassicTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGroupNameFieldNumber = 3,
    kPrioFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string group_name = 3;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // optional uint32 prio = 2 [default = 1];
  bool has_prio() const;
  private:
  bool _internal_has_prio() const;
  public:
  void clear_prio();
  ::PROTOBUF_NAMESPACE_ID::uint32 prio() const;
  void set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prio() const;
  void _internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ClassicTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prio_;
  friend struct ::TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto;
};
// -------------------------------------------------------------------

class SchedGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SchedGroup) */ {
 public:
  inline SchedGroup() : SchedGroup(nullptr) {}
  virtual ~SchedGroup();

  SchedGroup(const SchedGroup& from);
  SchedGroup(SchedGroup&& from) noexcept
    : SchedGroup() {
    *this = ::std::move(from);
  }

  inline SchedGroup& operator=(const SchedGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedGroup& operator=(SchedGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedGroup& default_instance();

  static inline const SchedGroup* internal_default_instance() {
    return reinterpret_cast<const SchedGroup*>(
               &_SchedGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SchedGroup& a, SchedGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SchedGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SchedGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SchedGroup* New() const final {
    return CreateMaybeMessage<SchedGroup>(nullptr);
  }

  SchedGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedGroup& from);
  void MergeFrom(const SchedGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SchedGroup";
  }
  protected:
  explicit SchedGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 7,
    kNameFieldNumber = 1,
    kAffinityFieldNumber = 3,
    kCpusetFieldNumber = 4,
    kProcessorPolicyFieldNumber = 5,
    kProcessorNumFieldNumber = 2,
    kProcessorPrioFieldNumber = 6,
  };
  // repeated .apollo.cyber.proto.ClassicTask tasks = 7;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::apollo::cyber::proto::ClassicTask* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >*
      mutable_tasks();
  private:
  const ::apollo::cyber::proto::ClassicTask& _internal_tasks(int index) const;
  ::apollo::cyber::proto::ClassicTask* _internal_add_tasks();
  public:
  const ::apollo::cyber::proto::ClassicTask& tasks(int index) const;
  ::apollo::cyber::proto::ClassicTask* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >&
      tasks() const;

  // required string name = 1 [default = "default_grp"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string affinity = 3;
  bool has_affinity() const;
  private:
  bool _internal_has_affinity() const;
  public:
  void clear_affinity();
  const std::string& affinity() const;
  void set_affinity(const std::string& value);
  void set_affinity(std::string&& value);
  void set_affinity(const char* value);
  void set_affinity(const char* value, size_t size);
  std::string* mutable_affinity();
  std::string* release_affinity();
  void set_allocated_affinity(std::string* affinity);
  private:
  const std::string& _internal_affinity() const;
  void _internal_set_affinity(const std::string& value);
  std::string* _internal_mutable_affinity();
  public:

  // optional string cpuset = 4;
  bool has_cpuset() const;
  private:
  bool _internal_has_cpuset() const;
  public:
  void clear_cpuset();
  const std::string& cpuset() const;
  void set_cpuset(const std::string& value);
  void set_cpuset(std::string&& value);
  void set_cpuset(const char* value);
  void set_cpuset(const char* value, size_t size);
  std::string* mutable_cpuset();
  std::string* release_cpuset();
  void set_allocated_cpuset(std::string* cpuset);
  private:
  const std::string& _internal_cpuset() const;
  void _internal_set_cpuset(const std::string& value);
  std::string* _internal_mutable_cpuset();
  public:

  // optional string processor_policy = 5;
  bool has_processor_policy() const;
  private:
  bool _internal_has_processor_policy() const;
  public:
  void clear_processor_policy();
  const std::string& processor_policy() const;
  void set_processor_policy(const std::string& value);
  void set_processor_policy(std::string&& value);
  void set_processor_policy(const char* value);
  void set_processor_policy(const char* value, size_t size);
  std::string* mutable_processor_policy();
  std::string* release_processor_policy();
  void set_allocated_processor_policy(std::string* processor_policy);
  private:
  const std::string& _internal_processor_policy() const;
  void _internal_set_processor_policy(const std::string& value);
  std::string* _internal_mutable_processor_policy();
  public:

  // optional uint32 processor_num = 2;
  bool has_processor_num() const;
  private:
  bool _internal_has_processor_num() const;
  public:
  void clear_processor_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 processor_num() const;
  void set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_processor_num() const;
  void _internal_set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 processor_prio = 6 [default = 0];
  bool has_processor_prio() const;
  private:
  bool _internal_has_processor_prio() const;
  public:
  void clear_processor_prio();
  ::PROTOBUF_NAMESPACE_ID::int32 processor_prio() const;
  void set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_processor_prio() const;
  void _internal_set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SchedGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask > tasks_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affinity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processor_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 processor_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 processor_prio_;
  friend struct ::TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ClassicConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ClassicConf) */ {
 public:
  inline ClassicConf() : ClassicConf(nullptr) {}
  virtual ~ClassicConf();

  ClassicConf(const ClassicConf& from);
  ClassicConf(ClassicConf&& from) noexcept
    : ClassicConf() {
    *this = ::std::move(from);
  }

  inline ClassicConf& operator=(const ClassicConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicConf& operator=(ClassicConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassicConf& default_instance();

  static inline const ClassicConf* internal_default_instance() {
    return reinterpret_cast<const ClassicConf*>(
               &_ClassicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClassicConf& a, ClassicConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassicConf* New() const final {
    return CreateMaybeMessage<ClassicConf>(nullptr);
  }

  ClassicConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassicConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassicConf& from);
  void MergeFrom(const ClassicConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ClassicConf";
  }
  protected:
  explicit ClassicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fclassic_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .apollo.cyber.proto.SchedGroup groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::apollo::cyber::proto::SchedGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >*
      mutable_groups();
  private:
  const ::apollo::cyber::proto::SchedGroup& _internal_groups(int index) const;
  ::apollo::cyber::proto::SchedGroup* _internal_add_groups();
  public:
  const ::apollo::cyber::proto::SchedGroup& groups(int index) const;
  ::apollo::cyber::proto::SchedGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ClassicConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cyber_2fproto_2fclassic_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassicTask

// optional string name = 1;
inline bool ClassicTask::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassicTask::has_name() const {
  return _internal_has_name();
}
inline void ClassicTask::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassicTask::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.name)
  return _internal_name();
}
inline void ClassicTask::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.name)
}
inline std::string* ClassicTask::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicTask.name)
  return _internal_mutable_name();
}
inline const std::string& ClassicTask::_internal_name() const {
  return name_.Get();
}
inline void ClassicTask::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClassicTask::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ClassicTask.name)
}
inline void ClassicTask::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ClassicTask.name)
}
inline void ClassicTask::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ClassicTask.name)
}
inline std::string* ClassicTask::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClassicTask::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ClassicTask.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClassicTask::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ClassicTask.name)
}

// optional uint32 prio = 2 [default = 1];
inline bool ClassicTask::_internal_has_prio() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClassicTask::has_prio() const {
  return _internal_has_prio();
}
inline void ClassicTask::clear_prio() {
  prio_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClassicTask::_internal_prio() const {
  return prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClassicTask::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.prio)
  return _internal_prio();
}
inline void ClassicTask::_internal_set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  prio_ = value;
}
inline void ClassicTask::set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prio(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.prio)
}

// optional string group_name = 3;
inline bool ClassicTask::_internal_has_group_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClassicTask::has_group_name() const {
  return _internal_has_group_name();
}
inline void ClassicTask::clear_group_name() {
  group_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClassicTask::group_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicTask.group_name)
  return _internal_group_name();
}
inline void ClassicTask::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ClassicTask.group_name)
}
inline std::string* ClassicTask::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicTask.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& ClassicTask::_internal_group_name() const {
  return group_name_.Get();
}
inline void ClassicTask::_internal_set_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClassicTask::set_group_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ClassicTask.group_name)
}
inline void ClassicTask::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ClassicTask.group_name)
}
inline void ClassicTask::set_group_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ClassicTask.group_name)
}
inline std::string* ClassicTask::_internal_mutable_group_name() {
  _has_bits_[0] |= 0x00000002u;
  return group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClassicTask::release_group_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ClassicTask.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return group_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClassicTask::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ClassicTask.group_name)
}

// -------------------------------------------------------------------

// SchedGroup

// required string name = 1 [default = "default_grp"];
inline bool SchedGroup::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SchedGroup::has_name() const {
  return _internal_has_name();
}
inline void SchedGroup::clear_name() {
  name_.ClearToDefault(::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchedGroup::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.name)
  if (name_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_name_.get();
  return _internal_name();
}
inline void SchedGroup::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.name)
}
inline std::string* SchedGroup::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.name)
  return _internal_mutable_name();
}
inline const std::string& SchedGroup::_internal_name() const {
  return name_.Get();
}
inline void SchedGroup::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void SchedGroup::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.name)
}
inline void SchedGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.name)
}
inline void SchedGroup::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.name)
}
inline std::string* SchedGroup::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::apollo::cyber::proto::SchedGroup::_i_give_permission_to_break_this_code_default_name_, GetArena());
}
inline std::string* SchedGroup::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(nullptr, GetArena());
}
inline void SchedGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(nullptr, name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.name)
}

// optional uint32 processor_num = 2;
inline bool SchedGroup::_internal_has_processor_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SchedGroup::has_processor_num() const {
  return _internal_has_processor_num();
}
inline void SchedGroup::clear_processor_num() {
  processor_num_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedGroup::_internal_processor_num() const {
  return processor_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedGroup::processor_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_num)
  return _internal_processor_num();
}
inline void SchedGroup::_internal_set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  processor_num_ = value;
}
inline void SchedGroup::set_processor_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_processor_num(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_num)
}

// optional string affinity = 3;
inline bool SchedGroup::_internal_has_affinity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SchedGroup::has_affinity() const {
  return _internal_has_affinity();
}
inline void SchedGroup::clear_affinity() {
  affinity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchedGroup::affinity() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.affinity)
  return _internal_affinity();
}
inline void SchedGroup::set_affinity(const std::string& value) {
  _internal_set_affinity(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.affinity)
}
inline std::string* SchedGroup::mutable_affinity() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.affinity)
  return _internal_mutable_affinity();
}
inline const std::string& SchedGroup::_internal_affinity() const {
  return affinity_.Get();
}
inline void SchedGroup::_internal_set_affinity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedGroup::set_affinity(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.affinity)
}
inline void SchedGroup::set_affinity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.affinity)
}
inline void SchedGroup::set_affinity(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  affinity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.affinity)
}
inline std::string* SchedGroup::_internal_mutable_affinity() {
  _has_bits_[0] |= 0x00000002u;
  return affinity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedGroup::release_affinity() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.affinity)
  if (!_internal_has_affinity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return affinity_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedGroup::set_allocated_affinity(std::string* affinity) {
  if (affinity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affinity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affinity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.affinity)
}

// optional string cpuset = 4;
inline bool SchedGroup::_internal_has_cpuset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SchedGroup::has_cpuset() const {
  return _internal_has_cpuset();
}
inline void SchedGroup::clear_cpuset() {
  cpuset_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SchedGroup::cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.cpuset)
  return _internal_cpuset();
}
inline void SchedGroup::set_cpuset(const std::string& value) {
  _internal_set_cpuset(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.cpuset)
}
inline std::string* SchedGroup::mutable_cpuset() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.cpuset)
  return _internal_mutable_cpuset();
}
inline const std::string& SchedGroup::_internal_cpuset() const {
  return cpuset_.Get();
}
inline void SchedGroup::_internal_set_cpuset(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedGroup::set_cpuset(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cpuset_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.cpuset)
}
inline void SchedGroup::set_cpuset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.cpuset)
}
inline void SchedGroup::set_cpuset(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cpuset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.cpuset)
}
inline std::string* SchedGroup::_internal_mutable_cpuset() {
  _has_bits_[0] |= 0x00000004u;
  return cpuset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedGroup::release_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.cpuset)
  if (!_internal_has_cpuset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cpuset_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedGroup::set_allocated_cpuset(std::string* cpuset) {
  if (cpuset != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cpuset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.cpuset)
}

// optional string processor_policy = 5;
inline bool SchedGroup::_internal_has_processor_policy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SchedGroup::has_processor_policy() const {
  return _internal_has_processor_policy();
}
inline void SchedGroup::clear_processor_policy() {
  processor_policy_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SchedGroup::processor_policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_policy)
  return _internal_processor_policy();
}
inline void SchedGroup::set_processor_policy(const std::string& value) {
  _internal_set_processor_policy(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline std::string* SchedGroup::mutable_processor_policy() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.processor_policy)
  return _internal_mutable_processor_policy();
}
inline const std::string& SchedGroup::_internal_processor_policy() const {
  return processor_policy_.Get();
}
inline void SchedGroup::_internal_set_processor_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SchedGroup::set_processor_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  processor_policy_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline void SchedGroup::set_processor_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline void SchedGroup::set_processor_policy(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  processor_policy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedGroup.processor_policy)
}
inline std::string* SchedGroup::_internal_mutable_processor_policy() {
  _has_bits_[0] |= 0x00000008u;
  return processor_policy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SchedGroup::release_processor_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedGroup.processor_policy)
  if (!_internal_has_processor_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return processor_policy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SchedGroup::set_allocated_processor_policy(std::string* processor_policy) {
  if (processor_policy != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  processor_policy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processor_policy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedGroup.processor_policy)
}

// optional int32 processor_prio = 6 [default = 0];
inline bool SchedGroup::_internal_has_processor_prio() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SchedGroup::has_processor_prio() const {
  return _internal_has_processor_prio();
}
inline void SchedGroup::clear_processor_prio() {
  processor_prio_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedGroup::_internal_processor_prio() const {
  return processor_prio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SchedGroup::processor_prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.processor_prio)
  return _internal_processor_prio();
}
inline void SchedGroup::_internal_set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  processor_prio_ = value;
}
inline void SchedGroup::set_processor_prio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_processor_prio(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedGroup.processor_prio)
}

// repeated .apollo.cyber.proto.ClassicTask tasks = 7;
inline int SchedGroup::_internal_tasks_size() const {
  return tasks_.size();
}
inline int SchedGroup::tasks_size() const {
  return _internal_tasks_size();
}
inline void SchedGroup::clear_tasks() {
  tasks_.Clear();
}
inline ::apollo::cyber::proto::ClassicTask* SchedGroup::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >*
SchedGroup::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.SchedGroup.tasks)
  return &tasks_;
}
inline const ::apollo::cyber::proto::ClassicTask& SchedGroup::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::apollo::cyber::proto::ClassicTask& SchedGroup::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedGroup.tasks)
  return _internal_tasks(index);
}
inline ::apollo::cyber::proto::ClassicTask* SchedGroup::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::apollo::cyber::proto::ClassicTask* SchedGroup::add_tasks() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.SchedGroup.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ClassicTask >&
SchedGroup::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.SchedGroup.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// ClassicConf

// repeated .apollo.cyber.proto.SchedGroup groups = 1;
inline int ClassicConf::_internal_groups_size() const {
  return groups_.size();
}
inline int ClassicConf::groups_size() const {
  return _internal_groups_size();
}
inline void ClassicConf::clear_groups() {
  groups_.Clear();
}
inline ::apollo::cyber::proto::SchedGroup* ClassicConf::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ClassicConf.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >*
ClassicConf::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ClassicConf.groups)
  return &groups_;
}
inline const ::apollo::cyber::proto::SchedGroup& ClassicConf::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::apollo::cyber::proto::SchedGroup& ClassicConf::groups(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ClassicConf.groups)
  return _internal_groups(index);
}
inline ::apollo::cyber::proto::SchedGroup* ClassicConf::_internal_add_groups() {
  return groups_.Add();
}
inline ::apollo::cyber::proto::SchedGroup* ClassicConf::add_groups() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ClassicConf.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SchedGroup >&
ClassicConf::groups() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ClassicConf.groups)
  return groups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fclassic_5fconf_2eproto
