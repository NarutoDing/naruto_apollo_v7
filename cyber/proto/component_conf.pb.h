// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/component_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fcomponent_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fcomponent_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cyber/proto/qos_profile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2fcomponent_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ComponentConfig;
class ComponentConfigDefaultTypeInternal;
extern ComponentConfigDefaultTypeInternal _ComponentConfig_default_instance_;
class ReaderOption;
class ReaderOptionDefaultTypeInternal;
extern ReaderOptionDefaultTypeInternal _ReaderOption_default_instance_;
class TimerComponentConfig;
class TimerComponentConfigDefaultTypeInternal;
extern TimerComponentConfigDefaultTypeInternal _TimerComponentConfig_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::ComponentConfig* Arena::CreateMaybeMessage<::apollo::cyber::proto::ComponentConfig>(Arena*);
template<> ::apollo::cyber::proto::ReaderOption* Arena::CreateMaybeMessage<::apollo::cyber::proto::ReaderOption>(Arena*);
template<> ::apollo::cyber::proto::TimerComponentConfig* Arena::CreateMaybeMessage<::apollo::cyber::proto::TimerComponentConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class ReaderOption PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ReaderOption) */ {
 public:
  inline ReaderOption() : ReaderOption(nullptr) {}
  virtual ~ReaderOption();

  ReaderOption(const ReaderOption& from);
  ReaderOption(ReaderOption&& from) noexcept
    : ReaderOption() {
    *this = ::std::move(from);
  }

  inline ReaderOption& operator=(const ReaderOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReaderOption& operator=(ReaderOption&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReaderOption& default_instance();

  static inline const ReaderOption* internal_default_instance() {
    return reinterpret_cast<const ReaderOption*>(
               &_ReaderOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReaderOption& a, ReaderOption& b) {
    a.Swap(&b);
  }
  inline void Swap(ReaderOption* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReaderOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReaderOption* New() const final {
    return CreateMaybeMessage<ReaderOption>(nullptr);
  }

  ReaderOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReaderOption>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReaderOption& from);
  void MergeFrom(const ReaderOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReaderOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ReaderOption";
  }
  protected:
  explicit ReaderOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kQosProfileFieldNumber = 2,
    kPendingQueueSizeFieldNumber = 3,
  };
  // optional string channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
  bool has_qos_profile() const;
  private:
  bool _internal_has_qos_profile() const;
  public:
  void clear_qos_profile();
  const ::apollo::cyber::proto::QosProfile& qos_profile() const;
  ::apollo::cyber::proto::QosProfile* release_qos_profile();
  ::apollo::cyber::proto::QosProfile* mutable_qos_profile();
  void set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile);
  private:
  const ::apollo::cyber::proto::QosProfile& _internal_qos_profile() const;
  ::apollo::cyber::proto::QosProfile* _internal_mutable_qos_profile();
  public:
  void unsafe_arena_set_allocated_qos_profile(
      ::apollo::cyber::proto::QosProfile* qos_profile);
  ::apollo::cyber::proto::QosProfile* unsafe_arena_release_qos_profile();

  // optional uint32 pending_queue_size = 3 [default = 1];
  bool has_pending_queue_size() const;
  private:
  bool _internal_has_pending_queue_size() const;
  public:
  void clear_pending_queue_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_queue_size() const;
  void set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_queue_size() const;
  void _internal_set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ReaderOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::apollo::cyber::proto::QosProfile* qos_profile_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_queue_size_;
  friend struct ::TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ComponentConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ComponentConfig) */ {
 public:
  inline ComponentConfig() : ComponentConfig(nullptr) {}
  virtual ~ComponentConfig();

  ComponentConfig(const ComponentConfig& from);
  ComponentConfig(ComponentConfig&& from) noexcept
    : ComponentConfig() {
    *this = ::std::move(from);
  }

  inline ComponentConfig& operator=(const ComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentConfig& operator=(ComponentConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentConfig& default_instance();

  static inline const ComponentConfig* internal_default_instance() {
    return reinterpret_cast<const ComponentConfig*>(
               &_ComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComponentConfig& a, ComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentConfig* New() const final {
    return CreateMaybeMessage<ComponentConfig>(nullptr);
  }

  ComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentConfig& from);
  void MergeFrom(const ComponentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ComponentConfig";
  }
  protected:
  explicit ComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadersFieldNumber = 4,
    kNameFieldNumber = 1,
    kConfigFilePathFieldNumber = 2,
    kFlagFilePathFieldNumber = 3,
  };
  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  int readers_size() const;
  private:
  int _internal_readers_size() const;
  public:
  void clear_readers();
  ::apollo::cyber::proto::ReaderOption* mutable_readers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ReaderOption >*
      mutable_readers();
  private:
  const ::apollo::cyber::proto::ReaderOption& _internal_readers(int index) const;
  ::apollo::cyber::proto::ReaderOption* _internal_add_readers();
  public:
  const ::apollo::cyber::proto::ReaderOption& readers(int index) const;
  ::apollo::cyber::proto::ReaderOption* add_readers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ReaderOption >&
      readers() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string config_file_path = 2;
  bool has_config_file_path() const;
  private:
  bool _internal_has_config_file_path() const;
  public:
  void clear_config_file_path();
  const std::string& config_file_path() const;
  void set_config_file_path(const std::string& value);
  void set_config_file_path(std::string&& value);
  void set_config_file_path(const char* value);
  void set_config_file_path(const char* value, size_t size);
  std::string* mutable_config_file_path();
  std::string* release_config_file_path();
  void set_allocated_config_file_path(std::string* config_file_path);
  private:
  const std::string& _internal_config_file_path() const;
  void _internal_set_config_file_path(const std::string& value);
  std::string* _internal_mutable_config_file_path();
  public:

  // optional string flag_file_path = 3;
  bool has_flag_file_path() const;
  private:
  bool _internal_has_flag_file_path() const;
  public:
  void clear_flag_file_path();
  const std::string& flag_file_path() const;
  void set_flag_file_path(const std::string& value);
  void set_flag_file_path(std::string&& value);
  void set_flag_file_path(const char* value);
  void set_flag_file_path(const char* value, size_t size);
  std::string* mutable_flag_file_path();
  std::string* release_flag_file_path();
  void set_allocated_flag_file_path(std::string* flag_file_path);
  private:
  const std::string& _internal_flag_file_path() const;
  void _internal_set_flag_file_path(const std::string& value);
  std::string* _internal_mutable_flag_file_path();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ComponentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ReaderOption > readers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_file_path_;
  friend struct ::TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TimerComponentConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.TimerComponentConfig) */ {
 public:
  inline TimerComponentConfig() : TimerComponentConfig(nullptr) {}
  virtual ~TimerComponentConfig();

  TimerComponentConfig(const TimerComponentConfig& from);
  TimerComponentConfig(TimerComponentConfig&& from) noexcept
    : TimerComponentConfig() {
    *this = ::std::move(from);
  }

  inline TimerComponentConfig& operator=(const TimerComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerComponentConfig& operator=(TimerComponentConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimerComponentConfig& default_instance();

  static inline const TimerComponentConfig* internal_default_instance() {
    return reinterpret_cast<const TimerComponentConfig*>(
               &_TimerComponentConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimerComponentConfig& a, TimerComponentConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerComponentConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerComponentConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerComponentConfig* New() const final {
    return CreateMaybeMessage<TimerComponentConfig>(nullptr);
  }

  TimerComponentConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerComponentConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimerComponentConfig& from);
  void MergeFrom(const TimerComponentConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerComponentConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.TimerComponentConfig";
  }
  protected:
  explicit TimerComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2fcomponent_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFilePathFieldNumber = 2,
    kFlagFilePathFieldNumber = 3,
    kIntervalFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string config_file_path = 2;
  bool has_config_file_path() const;
  private:
  bool _internal_has_config_file_path() const;
  public:
  void clear_config_file_path();
  const std::string& config_file_path() const;
  void set_config_file_path(const std::string& value);
  void set_config_file_path(std::string&& value);
  void set_config_file_path(const char* value);
  void set_config_file_path(const char* value, size_t size);
  std::string* mutable_config_file_path();
  std::string* release_config_file_path();
  void set_allocated_config_file_path(std::string* config_file_path);
  private:
  const std::string& _internal_config_file_path() const;
  void _internal_set_config_file_path(const std::string& value);
  std::string* _internal_mutable_config_file_path();
  public:

  // optional string flag_file_path = 3;
  bool has_flag_file_path() const;
  private:
  bool _internal_has_flag_file_path() const;
  public:
  void clear_flag_file_path();
  const std::string& flag_file_path() const;
  void set_flag_file_path(const std::string& value);
  void set_flag_file_path(std::string&& value);
  void set_flag_file_path(const char* value);
  void set_flag_file_path(const char* value, size_t size);
  std::string* mutable_flag_file_path();
  std::string* release_flag_file_path();
  void set_allocated_flag_file_path(std::string* flag_file_path);
  private:
  const std::string& _internal_flag_file_path() const;
  void _internal_set_flag_file_path(const std::string& value);
  std::string* _internal_mutable_flag_file_path();
  public:

  // optional uint32 interval = 4;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.TimerComponentConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_file_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_;
  friend struct ::TableStruct_cyber_2fproto_2fcomponent_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReaderOption

// optional string channel = 1;
inline bool ReaderOption::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReaderOption::has_channel() const {
  return _internal_has_channel();
}
inline void ReaderOption::clear_channel() {
  channel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReaderOption::channel() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ReaderOption.channel)
  return _internal_channel();
}
inline void ReaderOption::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ReaderOption.channel)
}
inline std::string* ReaderOption::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ReaderOption.channel)
  return _internal_mutable_channel();
}
inline const std::string& ReaderOption::_internal_channel() const {
  return channel_.Get();
}
inline void ReaderOption::_internal_set_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReaderOption::set_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ReaderOption.channel)
}
inline void ReaderOption::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ReaderOption.channel)
}
inline void ReaderOption::set_channel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ReaderOption.channel)
}
inline std::string* ReaderOption::_internal_mutable_channel() {
  _has_bits_[0] |= 0x00000001u;
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReaderOption::release_channel() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ReaderOption.channel)
  if (!_internal_has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReaderOption::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ReaderOption.channel)
}

// optional .apollo.cyber.proto.QosProfile qos_profile = 2;
inline bool ReaderOption::_internal_has_qos_profile() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || qos_profile_ != nullptr);
  return value;
}
inline bool ReaderOption::has_qos_profile() const {
  return _internal_has_qos_profile();
}
inline const ::apollo::cyber::proto::QosProfile& ReaderOption::_internal_qos_profile() const {
  const ::apollo::cyber::proto::QosProfile* p = qos_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::QosProfile&>(
      ::apollo::cyber::proto::_QosProfile_default_instance_);
}
inline const ::apollo::cyber::proto::QosProfile& ReaderOption::qos_profile() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ReaderOption.qos_profile)
  return _internal_qos_profile();
}
inline void ReaderOption::unsafe_arena_set_allocated_qos_profile(
    ::apollo::cyber::proto::QosProfile* qos_profile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  qos_profile_ = qos_profile;
  if (qos_profile) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.ReaderOption.qos_profile)
}
inline ::apollo::cyber::proto::QosProfile* ReaderOption::release_qos_profile() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::QosProfile* ReaderOption::unsafe_arena_release_qos_profile() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ReaderOption.qos_profile)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::QosProfile* ReaderOption::_internal_mutable_qos_profile() {
  _has_bits_[0] |= 0x00000002u;
  if (qos_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::QosProfile>(GetArena());
    qos_profile_ = p;
  }
  return qos_profile_;
}
inline ::apollo::cyber::proto::QosProfile* ReaderOption::mutable_qos_profile() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ReaderOption.qos_profile)
  return _internal_mutable_qos_profile();
}
inline void ReaderOption::set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  if (qos_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile)->GetArena();
    if (message_arena != submessage_arena) {
      qos_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  qos_profile_ = qos_profile;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ReaderOption.qos_profile)
}

// optional uint32 pending_queue_size = 3 [default = 1];
inline bool ReaderOption::_internal_has_pending_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReaderOption::has_pending_queue_size() const {
  return _internal_has_pending_queue_size();
}
inline void ReaderOption::clear_pending_queue_size() {
  pending_queue_size_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReaderOption::_internal_pending_queue_size() const {
  return pending_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReaderOption::pending_queue_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ReaderOption.pending_queue_size)
  return _internal_pending_queue_size();
}
inline void ReaderOption::_internal_set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pending_queue_size_ = value;
}
inline void ReaderOption::set_pending_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_queue_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ReaderOption.pending_queue_size)
}

// -------------------------------------------------------------------

// ComponentConfig

// optional string name = 1;
inline bool ComponentConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentConfig::has_name() const {
  return _internal_has_name();
}
inline void ComponentConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ComponentConfig.name)
  return _internal_name();
}
inline void ComponentConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ComponentConfig.name)
}
inline std::string* ComponentConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ComponentConfig.name)
  return _internal_mutable_name();
}
inline const std::string& ComponentConfig::_internal_name() const {
  return name_.Get();
}
inline void ComponentConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComponentConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ComponentConfig.name)
}
inline void ComponentConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ComponentConfig.name)
}
inline void ComponentConfig::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ComponentConfig.name)
}
inline std::string* ComponentConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComponentConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ComponentConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ComponentConfig.name)
}

// optional string config_file_path = 2;
inline bool ComponentConfig::_internal_has_config_file_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentConfig::has_config_file_path() const {
  return _internal_has_config_file_path();
}
inline void ComponentConfig::clear_config_file_path() {
  config_file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentConfig::config_file_path() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ComponentConfig.config_file_path)
  return _internal_config_file_path();
}
inline void ComponentConfig::set_config_file_path(const std::string& value) {
  _internal_set_config_file_path(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ComponentConfig.config_file_path)
}
inline std::string* ComponentConfig::mutable_config_file_path() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ComponentConfig.config_file_path)
  return _internal_mutable_config_file_path();
}
inline const std::string& ComponentConfig::_internal_config_file_path() const {
  return config_file_path_.Get();
}
inline void ComponentConfig::_internal_set_config_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComponentConfig::set_config_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ComponentConfig.config_file_path)
}
inline void ComponentConfig::set_config_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ComponentConfig.config_file_path)
}
inline void ComponentConfig::set_config_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ComponentConfig.config_file_path)
}
inline std::string* ComponentConfig::_internal_mutable_config_file_path() {
  _has_bits_[0] |= 0x00000002u;
  return config_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComponentConfig::release_config_file_path() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ComponentConfig.config_file_path)
  if (!_internal_has_config_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return config_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentConfig::set_allocated_config_file_path(std::string* config_file_path) {
  if (config_file_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ComponentConfig.config_file_path)
}

// optional string flag_file_path = 3;
inline bool ComponentConfig::_internal_has_flag_file_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentConfig::has_flag_file_path() const {
  return _internal_has_flag_file_path();
}
inline void ComponentConfig::clear_flag_file_path() {
  flag_file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ComponentConfig::flag_file_path() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ComponentConfig.flag_file_path)
  return _internal_flag_file_path();
}
inline void ComponentConfig::set_flag_file_path(const std::string& value) {
  _internal_set_flag_file_path(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ComponentConfig.flag_file_path)
}
inline std::string* ComponentConfig::mutable_flag_file_path() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ComponentConfig.flag_file_path)
  return _internal_mutable_flag_file_path();
}
inline const std::string& ComponentConfig::_internal_flag_file_path() const {
  return flag_file_path_.Get();
}
inline void ComponentConfig::_internal_set_flag_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ComponentConfig::set_flag_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ComponentConfig.flag_file_path)
}
inline void ComponentConfig::set_flag_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ComponentConfig.flag_file_path)
}
inline void ComponentConfig::set_flag_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ComponentConfig.flag_file_path)
}
inline std::string* ComponentConfig::_internal_mutable_flag_file_path() {
  _has_bits_[0] |= 0x00000004u;
  return flag_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ComponentConfig::release_flag_file_path() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ComponentConfig.flag_file_path)
  if (!_internal_has_flag_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return flag_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComponentConfig::set_allocated_flag_file_path(std::string* flag_file_path) {
  if (flag_file_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  flag_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ComponentConfig.flag_file_path)
}

// repeated .apollo.cyber.proto.ReaderOption readers = 4;
inline int ComponentConfig::_internal_readers_size() const {
  return readers_.size();
}
inline int ComponentConfig::readers_size() const {
  return _internal_readers_size();
}
inline void ComponentConfig::clear_readers() {
  readers_.Clear();
}
inline ::apollo::cyber::proto::ReaderOption* ComponentConfig::mutable_readers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ComponentConfig.readers)
  return readers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ReaderOption >*
ComponentConfig::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ComponentConfig.readers)
  return &readers_;
}
inline const ::apollo::cyber::proto::ReaderOption& ComponentConfig::_internal_readers(int index) const {
  return readers_.Get(index);
}
inline const ::apollo::cyber::proto::ReaderOption& ComponentConfig::readers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ComponentConfig.readers)
  return _internal_readers(index);
}
inline ::apollo::cyber::proto::ReaderOption* ComponentConfig::_internal_add_readers() {
  return readers_.Add();
}
inline ::apollo::cyber::proto::ReaderOption* ComponentConfig::add_readers() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ComponentConfig.readers)
  return _internal_add_readers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::ReaderOption >&
ComponentConfig::readers() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ComponentConfig.readers)
  return readers_;
}

// -------------------------------------------------------------------

// TimerComponentConfig

// optional string name = 1;
inline bool TimerComponentConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimerComponentConfig::has_name() const {
  return _internal_has_name();
}
inline void TimerComponentConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TimerComponentConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TimerComponentConfig.name)
  return _internal_name();
}
inline void TimerComponentConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.TimerComponentConfig.name)
}
inline std::string* TimerComponentConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TimerComponentConfig.name)
  return _internal_mutable_name();
}
inline const std::string& TimerComponentConfig::_internal_name() const {
  return name_.Get();
}
inline void TimerComponentConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimerComponentConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.TimerComponentConfig.name)
}
inline void TimerComponentConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.TimerComponentConfig.name)
}
inline void TimerComponentConfig::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.TimerComponentConfig.name)
}
inline std::string* TimerComponentConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimerComponentConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TimerComponentConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimerComponentConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TimerComponentConfig.name)
}

// optional string config_file_path = 2;
inline bool TimerComponentConfig::_internal_has_config_file_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimerComponentConfig::has_config_file_path() const {
  return _internal_has_config_file_path();
}
inline void TimerComponentConfig::clear_config_file_path() {
  config_file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TimerComponentConfig::config_file_path() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TimerComponentConfig.config_file_path)
  return _internal_config_file_path();
}
inline void TimerComponentConfig::set_config_file_path(const std::string& value) {
  _internal_set_config_file_path(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.TimerComponentConfig.config_file_path)
}
inline std::string* TimerComponentConfig::mutable_config_file_path() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TimerComponentConfig.config_file_path)
  return _internal_mutable_config_file_path();
}
inline const std::string& TimerComponentConfig::_internal_config_file_path() const {
  return config_file_path_.Get();
}
inline void TimerComponentConfig::_internal_set_config_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimerComponentConfig::set_config_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.TimerComponentConfig.config_file_path)
}
inline void TimerComponentConfig::set_config_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.TimerComponentConfig.config_file_path)
}
inline void TimerComponentConfig::set_config_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  config_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.TimerComponentConfig.config_file_path)
}
inline std::string* TimerComponentConfig::_internal_mutable_config_file_path() {
  _has_bits_[0] |= 0x00000002u;
  return config_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimerComponentConfig::release_config_file_path() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TimerComponentConfig.config_file_path)
  if (!_internal_has_config_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return config_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimerComponentConfig::set_allocated_config_file_path(std::string* config_file_path) {
  if (config_file_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TimerComponentConfig.config_file_path)
}

// optional string flag_file_path = 3;
inline bool TimerComponentConfig::_internal_has_flag_file_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimerComponentConfig::has_flag_file_path() const {
  return _internal_has_flag_file_path();
}
inline void TimerComponentConfig::clear_flag_file_path() {
  flag_file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TimerComponentConfig::flag_file_path() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
  return _internal_flag_file_path();
}
inline void TimerComponentConfig::set_flag_file_path(const std::string& value) {
  _internal_set_flag_file_path(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
}
inline std::string* TimerComponentConfig::mutable_flag_file_path() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
  return _internal_mutable_flag_file_path();
}
inline const std::string& TimerComponentConfig::_internal_flag_file_path() const {
  return flag_file_path_.Get();
}
inline void TimerComponentConfig::_internal_set_flag_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TimerComponentConfig::set_flag_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
}
inline void TimerComponentConfig::set_flag_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
}
inline void TimerComponentConfig::set_flag_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  flag_file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
}
inline std::string* TimerComponentConfig::_internal_mutable_flag_file_path() {
  _has_bits_[0] |= 0x00000004u;
  return flag_file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TimerComponentConfig::release_flag_file_path() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
  if (!_internal_has_flag_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return flag_file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimerComponentConfig::set_allocated_flag_file_path(std::string* flag_file_path) {
  if (flag_file_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  flag_file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag_file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TimerComponentConfig.flag_file_path)
}

// optional uint32 interval = 4;
inline bool TimerComponentConfig::_internal_has_interval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimerComponentConfig::has_interval() const {
  return _internal_has_interval();
}
inline void TimerComponentConfig::clear_interval() {
  interval_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimerComponentConfig::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimerComponentConfig::interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TimerComponentConfig.interval)
  return _internal_interval();
}
inline void TimerComponentConfig::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  interval_ = value;
}
inline void TimerComponentConfig::set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.TimerComponentConfig.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2fcomponent_5fconf_2eproto
