// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frecord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frecord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2frecord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2frecord_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2frecord_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class Channel;
class ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelCache;
class ChannelCacheDefaultTypeInternal;
extern ChannelCacheDefaultTypeInternal _ChannelCache_default_instance_;
class ChunkBody;
class ChunkBodyDefaultTypeInternal;
extern ChunkBodyDefaultTypeInternal _ChunkBody_default_instance_;
class ChunkBodyCache;
class ChunkBodyCacheDefaultTypeInternal;
extern ChunkBodyCacheDefaultTypeInternal _ChunkBodyCache_default_instance_;
class ChunkHeader;
class ChunkHeaderDefaultTypeInternal;
extern ChunkHeaderDefaultTypeInternal _ChunkHeader_default_instance_;
class ChunkHeaderCache;
class ChunkHeaderCacheDefaultTypeInternal;
extern ChunkHeaderCacheDefaultTypeInternal _ChunkHeaderCache_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class SingleIndex;
class SingleIndexDefaultTypeInternal;
extern SingleIndexDefaultTypeInternal _SingleIndex_default_instance_;
class SingleMessage;
class SingleMessageDefaultTypeInternal;
extern SingleMessageDefaultTypeInternal _SingleMessage_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::Channel* Arena::CreateMaybeMessage<::apollo::cyber::proto::Channel>(Arena*);
template<> ::apollo::cyber::proto::ChannelCache* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChannelCache>(Arena*);
template<> ::apollo::cyber::proto::ChunkBody* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChunkBody>(Arena*);
template<> ::apollo::cyber::proto::ChunkBodyCache* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChunkBodyCache>(Arena*);
template<> ::apollo::cyber::proto::ChunkHeader* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChunkHeader>(Arena*);
template<> ::apollo::cyber::proto::ChunkHeaderCache* Arena::CreateMaybeMessage<::apollo::cyber::proto::ChunkHeaderCache>(Arena*);
template<> ::apollo::cyber::proto::Header* Arena::CreateMaybeMessage<::apollo::cyber::proto::Header>(Arena*);
template<> ::apollo::cyber::proto::Index* Arena::CreateMaybeMessage<::apollo::cyber::proto::Index>(Arena*);
template<> ::apollo::cyber::proto::SingleIndex* Arena::CreateMaybeMessage<::apollo::cyber::proto::SingleIndex>(Arena*);
template<> ::apollo::cyber::proto::SingleMessage* Arena::CreateMaybeMessage<::apollo::cyber::proto::SingleMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

enum SectionType : int {
  SECTION_HEADER = 0,
  SECTION_CHUNK_HEADER = 1,
  SECTION_CHUNK_BODY = 2,
  SECTION_INDEX = 3,
  SECTION_CHANNEL = 4
};
bool SectionType_IsValid(int value);
constexpr SectionType SectionType_MIN = SECTION_HEADER;
constexpr SectionType SectionType_MAX = SECTION_CHANNEL;
constexpr int SectionType_ARRAYSIZE = SectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SectionType_descriptor();
template<typename T>
inline const std::string& SectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SectionType_descriptor(), enum_t_value);
}
inline bool SectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SectionType>(
    SectionType_descriptor(), name, value);
}
enum CompressType : int {
  COMPRESS_NONE = 0,
  COMPRESS_BZ2 = 1,
  COMPRESS_LZ4 = 2
};
bool CompressType_IsValid(int value);
constexpr CompressType CompressType_MIN = COMPRESS_NONE;
constexpr CompressType CompressType_MAX = COMPRESS_LZ4;
constexpr int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressType_descriptor();
template<typename T>
inline const std::string& CompressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressType_descriptor(), enum_t_value);
}
inline bool CompressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
// ===================================================================

class SingleIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SingleIndex) */ {
 public:
  inline SingleIndex() : SingleIndex(nullptr) {}
  virtual ~SingleIndex();

  SingleIndex(const SingleIndex& from);
  SingleIndex(SingleIndex&& from) noexcept
    : SingleIndex() {
    *this = ::std::move(from);
  }

  inline SingleIndex& operator=(const SingleIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleIndex& operator=(SingleIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleIndex& default_instance();

  enum CacheCase {
    kChannelCache = 101,
    kChunkHeaderCache = 102,
    kChunkBodyCache = 103,
    CACHE_NOT_SET = 0,
  };

  static inline const SingleIndex* internal_default_instance() {
    return reinterpret_cast<const SingleIndex*>(
               &_SingleIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleIndex& a, SingleIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleIndex* New() const final {
    return CreateMaybeMessage<SingleIndex>(nullptr);
  }

  SingleIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleIndex& from);
  void MergeFrom(const SingleIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SingleIndex";
  }
  protected:
  explicit SingleIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kTypeFieldNumber = 1,
    kChannelCacheFieldNumber = 101,
    kChunkHeaderCacheFieldNumber = 102,
    kChunkBodyCacheFieldNumber = 103,
  };
  // optional uint64 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .apollo.cyber.proto.SectionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::cyber::proto::SectionType type() const;
  void set_type(::apollo::cyber::proto::SectionType value);
  private:
  ::apollo::cyber::proto::SectionType _internal_type() const;
  void _internal_set_type(::apollo::cyber::proto::SectionType value);
  public:

  // .apollo.cyber.proto.ChannelCache channel_cache = 101;
  bool has_channel_cache() const;
  private:
  bool _internal_has_channel_cache() const;
  public:
  void clear_channel_cache();
  const ::apollo::cyber::proto::ChannelCache& channel_cache() const;
  ::apollo::cyber::proto::ChannelCache* release_channel_cache();
  ::apollo::cyber::proto::ChannelCache* mutable_channel_cache();
  void set_allocated_channel_cache(::apollo::cyber::proto::ChannelCache* channel_cache);
  private:
  const ::apollo::cyber::proto::ChannelCache& _internal_channel_cache() const;
  ::apollo::cyber::proto::ChannelCache* _internal_mutable_channel_cache();
  public:
  void unsafe_arena_set_allocated_channel_cache(
      ::apollo::cyber::proto::ChannelCache* channel_cache);
  ::apollo::cyber::proto::ChannelCache* unsafe_arena_release_channel_cache();

  // .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
  bool has_chunk_header_cache() const;
  private:
  bool _internal_has_chunk_header_cache() const;
  public:
  void clear_chunk_header_cache();
  const ::apollo::cyber::proto::ChunkHeaderCache& chunk_header_cache() const;
  ::apollo::cyber::proto::ChunkHeaderCache* release_chunk_header_cache();
  ::apollo::cyber::proto::ChunkHeaderCache* mutable_chunk_header_cache();
  void set_allocated_chunk_header_cache(::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache);
  private:
  const ::apollo::cyber::proto::ChunkHeaderCache& _internal_chunk_header_cache() const;
  ::apollo::cyber::proto::ChunkHeaderCache* _internal_mutable_chunk_header_cache();
  public:
  void unsafe_arena_set_allocated_chunk_header_cache(
      ::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache);
  ::apollo::cyber::proto::ChunkHeaderCache* unsafe_arena_release_chunk_header_cache();

  // .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
  bool has_chunk_body_cache() const;
  private:
  bool _internal_has_chunk_body_cache() const;
  public:
  void clear_chunk_body_cache();
  const ::apollo::cyber::proto::ChunkBodyCache& chunk_body_cache() const;
  ::apollo::cyber::proto::ChunkBodyCache* release_chunk_body_cache();
  ::apollo::cyber::proto::ChunkBodyCache* mutable_chunk_body_cache();
  void set_allocated_chunk_body_cache(::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache);
  private:
  const ::apollo::cyber::proto::ChunkBodyCache& _internal_chunk_body_cache() const;
  ::apollo::cyber::proto::ChunkBodyCache* _internal_mutable_chunk_body_cache();
  public:
  void unsafe_arena_set_allocated_chunk_body_cache(
      ::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache);
  ::apollo::cyber::proto::ChunkBodyCache* unsafe_arena_release_chunk_body_cache();

  void clear_cache();
  CacheCase cache_case() const;
  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SingleIndex)
 private:
  class _Internal;
  void set_has_channel_cache();
  void set_has_chunk_header_cache();
  void set_has_chunk_body_cache();

  inline bool has_cache() const;
  inline void clear_has_cache();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 position_;
  int type_;
  union CacheUnion {
    CacheUnion() {}
    ::apollo::cyber::proto::ChannelCache* channel_cache_;
    ::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache_;
    ::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache_;
  } cache_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class ChunkHeaderCache PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkHeaderCache) */ {
 public:
  inline ChunkHeaderCache() : ChunkHeaderCache(nullptr) {}
  virtual ~ChunkHeaderCache();

  ChunkHeaderCache(const ChunkHeaderCache& from);
  ChunkHeaderCache(ChunkHeaderCache&& from) noexcept
    : ChunkHeaderCache() {
    *this = ::std::move(from);
  }

  inline ChunkHeaderCache& operator=(const ChunkHeaderCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkHeaderCache& operator=(ChunkHeaderCache&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkHeaderCache& default_instance();

  static inline const ChunkHeaderCache* internal_default_instance() {
    return reinterpret_cast<const ChunkHeaderCache*>(
               &_ChunkHeaderCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkHeaderCache& a, ChunkHeaderCache& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkHeaderCache* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkHeaderCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkHeaderCache* New() const final {
    return CreateMaybeMessage<ChunkHeaderCache>(nullptr);
  }

  ChunkHeaderCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkHeaderCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkHeaderCache& from);
  void MergeFrom(const ChunkHeaderCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkHeaderCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChunkHeaderCache";
  }
  protected:
  explicit ChunkHeaderCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageNumberFieldNumber = 1,
    kBeginTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kRawSizeFieldNumber = 4,
  };
  // optional uint64 message_number = 1;
  bool has_message_number() const;
  private:
  bool _internal_has_message_number() const;
  public:
  void clear_message_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number() const;
  void set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_number() const;
  void _internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 begin_time = 2;
  bool has_begin_time() const;
  private:
  bool _internal_has_begin_time() const;
  public:
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 raw_size = 4;
  bool has_raw_size() const;
  private:
  bool _internal_has_raw_size() const;
  public:
  void clear_raw_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 raw_size() const;
  void set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raw_size() const;
  void _internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkHeaderCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raw_size_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class ChunkBodyCache PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkBodyCache) */ {
 public:
  inline ChunkBodyCache() : ChunkBodyCache(nullptr) {}
  virtual ~ChunkBodyCache();

  ChunkBodyCache(const ChunkBodyCache& from);
  ChunkBodyCache(ChunkBodyCache&& from) noexcept
    : ChunkBodyCache() {
    *this = ::std::move(from);
  }

  inline ChunkBodyCache& operator=(const ChunkBodyCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkBodyCache& operator=(ChunkBodyCache&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkBodyCache& default_instance();

  static inline const ChunkBodyCache* internal_default_instance() {
    return reinterpret_cast<const ChunkBodyCache*>(
               &_ChunkBodyCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChunkBodyCache& a, ChunkBodyCache& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkBodyCache* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkBodyCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkBodyCache* New() const final {
    return CreateMaybeMessage<ChunkBodyCache>(nullptr);
  }

  ChunkBodyCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkBodyCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkBodyCache& from);
  void MergeFrom(const ChunkBodyCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkBodyCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChunkBodyCache";
  }
  protected:
  explicit ChunkBodyCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageNumberFieldNumber = 1,
  };
  // optional uint64 message_number = 1;
  bool has_message_number() const;
  private:
  bool _internal_has_message_number() const;
  public:
  void clear_message_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number() const;
  void set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_number() const;
  void _internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkBodyCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class ChannelCache PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChannelCache) */ {
 public:
  inline ChannelCache() : ChannelCache(nullptr) {}
  virtual ~ChannelCache();

  ChannelCache(const ChannelCache& from);
  ChannelCache(ChannelCache&& from) noexcept
    : ChannelCache() {
    *this = ::std::move(from);
  }

  inline ChannelCache& operator=(const ChannelCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelCache& operator=(ChannelCache&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelCache& default_instance();

  static inline const ChannelCache* internal_default_instance() {
    return reinterpret_cast<const ChannelCache*>(
               &_ChannelCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelCache& a, ChannelCache& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelCache* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelCache* New() const final {
    return CreateMaybeMessage<ChannelCache>(nullptr);
  }

  ChannelCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelCache& from);
  void MergeFrom(const ChannelCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChannelCache";
  }
  protected:
  explicit ChannelCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
    kProtoDescFieldNumber = 4,
    kMessageNumberFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string message_type = 3;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // optional bytes proto_desc = 4;
  bool has_proto_desc() const;
  private:
  bool _internal_has_proto_desc() const;
  public:
  void clear_proto_desc();
  const std::string& proto_desc() const;
  void set_proto_desc(const std::string& value);
  void set_proto_desc(std::string&& value);
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  std::string* mutable_proto_desc();
  std::string* release_proto_desc();
  void set_allocated_proto_desc(std::string* proto_desc);
  private:
  const std::string& _internal_proto_desc() const;
  void _internal_set_proto_desc(const std::string& value);
  std::string* _internal_mutable_proto_desc();
  public:

  // optional uint64 message_number = 1;
  bool has_message_number() const;
  private:
  bool _internal_has_message_number() const;
  public:
  void clear_message_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number() const;
  void set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_number() const;
  void _internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChannelCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class SingleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SingleMessage) */ {
 public:
  inline SingleMessage() : SingleMessage(nullptr) {}
  virtual ~SingleMessage();

  SingleMessage(const SingleMessage& from);
  SingleMessage(SingleMessage&& from) noexcept
    : SingleMessage() {
    *this = ::std::move(from);
  }

  inline SingleMessage& operator=(const SingleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleMessage& operator=(SingleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleMessage& default_instance();

  static inline const SingleMessage* internal_default_instance() {
    return reinterpret_cast<const SingleMessage*>(
               &_SingleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SingleMessage& a, SingleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleMessage* New() const final {
    return CreateMaybeMessage<SingleMessage>(nullptr);
  }

  SingleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleMessage& from);
  void MergeFrom(const SingleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SingleMessage";
  }
  protected:
  explicit SingleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kContentFieldNumber = 3,
    kTimeFieldNumber = 2,
  };
  // optional string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional bytes content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint64 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SingleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorVersionFieldNumber = 1,
    kMinorVersionFieldNumber = 2,
    kChunkIntervalFieldNumber = 4,
    kSegmentIntervalFieldNumber = 5,
    kIndexPositionFieldNumber = 6,
    kChunkNumberFieldNumber = 7,
    kChannelNumberFieldNumber = 8,
    kCompressFieldNumber = 3,
    kIsCompleteFieldNumber = 13,
    kBeginTimeFieldNumber = 9,
    kEndTimeFieldNumber = 10,
    kMessageNumberFieldNumber = 11,
    kSizeFieldNumber = 12,
    kChunkRawSizeFieldNumber = 14,
    kSegmentRawSizeFieldNumber = 15,
  };
  // optional uint32 major_version = 1;
  bool has_major_version() const;
  private:
  bool _internal_has_major_version() const;
  public:
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_version() const;
  void _internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minor_version = 2;
  bool has_minor_version() const;
  private:
  bool _internal_has_minor_version() const;
  public:
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor_version() const;
  void _internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 chunk_interval = 4;
  bool has_chunk_interval() const;
  private:
  bool _internal_has_chunk_interval() const;
  public:
  void clear_chunk_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_interval() const;
  void set_chunk_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunk_interval() const;
  void _internal_set_chunk_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 segment_interval = 5;
  bool has_segment_interval() const;
  private:
  bool _internal_has_segment_interval() const;
  public:
  void clear_segment_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_interval() const;
  void set_segment_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_segment_interval() const;
  void _internal_set_segment_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 index_position = 6 [default = 0];
  bool has_index_position() const;
  private:
  bool _internal_has_index_position() const;
  public:
  void clear_index_position();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_position() const;
  void set_index_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_position() const;
  void _internal_set_index_position(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 chunk_number = 7 [default = 0];
  bool has_chunk_number() const;
  private:
  bool _internal_has_chunk_number() const;
  public:
  void clear_chunk_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_number() const;
  void set_chunk_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunk_number() const;
  void _internal_set_chunk_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 channel_number = 8 [default = 0];
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_number() const;
  void set_channel_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_number() const;
  void _internal_set_channel_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .apollo.cyber.proto.CompressType compress = 3;
  bool has_compress() const;
  private:
  bool _internal_has_compress() const;
  public:
  void clear_compress();
  ::apollo::cyber::proto::CompressType compress() const;
  void set_compress(::apollo::cyber::proto::CompressType value);
  private:
  ::apollo::cyber::proto::CompressType _internal_compress() const;
  void _internal_set_compress(::apollo::cyber::proto::CompressType value);
  public:

  // optional bool is_complete = 13 [default = false];
  bool has_is_complete() const;
  private:
  bool _internal_has_is_complete() const;
  public:
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // optional uint64 begin_time = 9 [default = 0];
  bool has_begin_time() const;
  private:
  bool _internal_has_begin_time() const;
  public:
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 end_time = 10 [default = 0];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 message_number = 11 [default = 0];
  bool has_message_number() const;
  private:
  bool _internal_has_message_number() const;
  public:
  void clear_message_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number() const;
  void set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_number() const;
  void _internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 size = 12 [default = 0];
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 chunk_raw_size = 14;
  bool has_chunk_raw_size() const;
  private:
  bool _internal_has_chunk_raw_size() const;
  public:
  void clear_chunk_raw_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_raw_size() const;
  void set_chunk_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunk_raw_size() const;
  void _internal_set_chunk_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 segment_raw_size = 15;
  bool has_segment_raw_size() const;
  private:
  bool _internal_has_segment_raw_size() const;
  public:
  void clear_segment_raw_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_raw_size() const;
  void set_segment_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_segment_raw_size() const;
  void _internal_set_segment_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_number_;
  int compress_;
  bool is_complete_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_raw_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 segment_raw_size_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  virtual ~Channel();

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channel& default_instance();

  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return CreateMaybeMessage<Channel>(nullptr);
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
    kProtoDescFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string message_type = 2;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // optional bytes proto_desc = 3;
  bool has_proto_desc() const;
  private:
  bool _internal_has_proto_desc() const;
  public:
  void clear_proto_desc();
  const std::string& proto_desc() const;
  void set_proto_desc(const std::string& value);
  void set_proto_desc(std::string&& value);
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  std::string* mutable_proto_desc();
  std::string* release_proto_desc();
  void set_allocated_proto_desc(std::string* proto_desc);
  private:
  const std::string& _internal_proto_desc() const;
  void _internal_set_proto_desc(const std::string& value);
  std::string* _internal_mutable_proto_desc();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_desc_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class ChunkHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkHeader) */ {
 public:
  inline ChunkHeader() : ChunkHeader(nullptr) {}
  virtual ~ChunkHeader();

  ChunkHeader(const ChunkHeader& from);
  ChunkHeader(ChunkHeader&& from) noexcept
    : ChunkHeader() {
    *this = ::std::move(from);
  }

  inline ChunkHeader& operator=(const ChunkHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkHeader& operator=(ChunkHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkHeader& default_instance();

  static inline const ChunkHeader* internal_default_instance() {
    return reinterpret_cast<const ChunkHeader*>(
               &_ChunkHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChunkHeader& a, ChunkHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkHeader* New() const final {
    return CreateMaybeMessage<ChunkHeader>(nullptr);
  }

  ChunkHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkHeader& from);
  void MergeFrom(const ChunkHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChunkHeader";
  }
  protected:
  explicit ChunkHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kMessageNumberFieldNumber = 3,
    kRawSizeFieldNumber = 4,
  };
  // optional uint64 begin_time = 1;
  bool has_begin_time() const;
  private:
  bool _internal_has_begin_time() const;
  public:
  void clear_begin_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time() const;
  void set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_time() const;
  void _internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 message_number = 3;
  bool has_message_number() const;
  private:
  bool _internal_has_message_number() const;
  public:
  void clear_message_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number() const;
  void set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_number() const;
  void _internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 raw_size = 4;
  bool has_raw_size() const;
  private:
  bool _internal_has_raw_size() const;
  public:
  void clear_raw_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 raw_size() const;
  void set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raw_size() const;
  void _internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raw_size_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class ChunkBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ChunkBody) */ {
 public:
  inline ChunkBody() : ChunkBody(nullptr) {}
  virtual ~ChunkBody();

  ChunkBody(const ChunkBody& from);
  ChunkBody(ChunkBody&& from) noexcept
    : ChunkBody() {
    *this = ::std::move(from);
  }

  inline ChunkBody& operator=(const ChunkBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkBody& operator=(ChunkBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkBody& default_instance();

  static inline const ChunkBody* internal_default_instance() {
    return reinterpret_cast<const ChunkBody*>(
               &_ChunkBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChunkBody& a, ChunkBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkBody* New() const final {
    return CreateMaybeMessage<ChunkBody>(nullptr);
  }

  ChunkBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkBody& from);
  void MergeFrom(const ChunkBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ChunkBody";
  }
  protected:
  explicit ChunkBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .apollo.cyber.proto.SingleMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::apollo::cyber::proto::SingleMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >*
      mutable_messages();
  private:
  const ::apollo::cyber::proto::SingleMessage& _internal_messages(int index) const;
  ::apollo::cyber::proto::SingleMessage* _internal_add_messages();
  public:
  const ::apollo::cyber::proto::SingleMessage& messages(int index) const;
  ::apollo::cyber::proto::SingleMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ChunkBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// -------------------------------------------------------------------

class Index PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.Index) */ {
 public:
  inline Index() : Index(nullptr) {}
  virtual ~Index();

  Index(const Index& from);
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  inline Index& operator=(Index&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Index& default_instance();

  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }
  inline void Swap(Index* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Index* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const final {
    return CreateMaybeMessage<Index>(nullptr);
  }

  Index* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.Index";
  }
  protected:
  explicit Index(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2frecord_2eproto);
    return ::descriptor_table_cyber_2fproto_2frecord_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexesFieldNumber = 1,
  };
  // repeated .apollo.cyber.proto.SingleIndex indexes = 1;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  ::apollo::cyber::proto::SingleIndex* mutable_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >*
      mutable_indexes();
  private:
  const ::apollo::cyber::proto::SingleIndex& _internal_indexes(int index) const;
  ::apollo::cyber::proto::SingleIndex* _internal_add_indexes();
  public:
  const ::apollo::cyber::proto::SingleIndex& indexes(int index) const;
  ::apollo::cyber::proto::SingleIndex* add_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >&
      indexes() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.Index)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex > indexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cyber_2fproto_2frecord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleIndex

// optional .apollo.cyber.proto.SectionType type = 1;
inline bool SingleIndex::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SingleIndex::has_type() const {
  return _internal_has_type();
}
inline void SingleIndex::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::cyber::proto::SectionType SingleIndex::_internal_type() const {
  return static_cast< ::apollo::cyber::proto::SectionType >(type_);
}
inline ::apollo::cyber::proto::SectionType SingleIndex::type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.type)
  return _internal_type();
}
inline void SingleIndex::_internal_set_type(::apollo::cyber::proto::SectionType value) {
  assert(::apollo::cyber::proto::SectionType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void SingleIndex::set_type(::apollo::cyber::proto::SectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.type)
}

// optional uint64 position = 2;
inline bool SingleIndex::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SingleIndex::has_position() const {
  return _internal_has_position();
}
inline void SingleIndex::clear_position() {
  position_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleIndex::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleIndex::position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.position)
  return _internal_position();
}
inline void SingleIndex::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  position_ = value;
}
inline void SingleIndex::set_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleIndex.position)
}

// .apollo.cyber.proto.ChannelCache channel_cache = 101;
inline bool SingleIndex::_internal_has_channel_cache() const {
  return cache_case() == kChannelCache;
}
inline bool SingleIndex::has_channel_cache() const {
  return _internal_has_channel_cache();
}
inline void SingleIndex::set_has_channel_cache() {
  _oneof_case_[0] = kChannelCache;
}
inline void SingleIndex::clear_channel_cache() {
  if (_internal_has_channel_cache()) {
    if (GetArena() == nullptr) {
      delete cache_.channel_cache_;
    }
    clear_has_cache();
  }
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::release_channel_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.channel_cache)
  if (_internal_has_channel_cache()) {
    clear_has_cache();
      ::apollo::cyber::proto::ChannelCache* temp = cache_.channel_cache_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cache_.channel_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::cyber::proto::ChannelCache& SingleIndex::_internal_channel_cache() const {
  return _internal_has_channel_cache()
      ? *cache_.channel_cache_
      : reinterpret_cast< ::apollo::cyber::proto::ChannelCache&>(::apollo::cyber::proto::_ChannelCache_default_instance_);
}
inline const ::apollo::cyber::proto::ChannelCache& SingleIndex::channel_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.channel_cache)
  return _internal_channel_cache();
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::unsafe_arena_release_channel_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.cyber.proto.SingleIndex.channel_cache)
  if (_internal_has_channel_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChannelCache* temp = cache_.channel_cache_;
    cache_.channel_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SingleIndex::unsafe_arena_set_allocated_channel_cache(::apollo::cyber::proto::ChannelCache* channel_cache) {
  clear_cache();
  if (channel_cache) {
    set_has_channel_cache();
    cache_.channel_cache_ = channel_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.SingleIndex.channel_cache)
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::_internal_mutable_channel_cache() {
  if (!_internal_has_channel_cache()) {
    clear_cache();
    set_has_channel_cache();
    cache_.channel_cache_ = CreateMaybeMessage< ::apollo::cyber::proto::ChannelCache >(GetArena());
  }
  return cache_.channel_cache_;
}
inline ::apollo::cyber::proto::ChannelCache* SingleIndex::mutable_channel_cache() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.channel_cache)
  return _internal_mutable_channel_cache();
}

// .apollo.cyber.proto.ChunkHeaderCache chunk_header_cache = 102;
inline bool SingleIndex::_internal_has_chunk_header_cache() const {
  return cache_case() == kChunkHeaderCache;
}
inline bool SingleIndex::has_chunk_header_cache() const {
  return _internal_has_chunk_header_cache();
}
inline void SingleIndex::set_has_chunk_header_cache() {
  _oneof_case_[0] = kChunkHeaderCache;
}
inline void SingleIndex::clear_chunk_header_cache() {
  if (_internal_has_chunk_header_cache()) {
    if (GetArena() == nullptr) {
      delete cache_.chunk_header_cache_;
    }
    clear_has_cache();
  }
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::release_chunk_header_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  if (_internal_has_chunk_header_cache()) {
    clear_has_cache();
      ::apollo::cyber::proto::ChunkHeaderCache* temp = cache_.chunk_header_cache_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cache_.chunk_header_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::cyber::proto::ChunkHeaderCache& SingleIndex::_internal_chunk_header_cache() const {
  return _internal_has_chunk_header_cache()
      ? *cache_.chunk_header_cache_
      : reinterpret_cast< ::apollo::cyber::proto::ChunkHeaderCache&>(::apollo::cyber::proto::_ChunkHeaderCache_default_instance_);
}
inline const ::apollo::cyber::proto::ChunkHeaderCache& SingleIndex::chunk_header_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return _internal_chunk_header_cache();
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::unsafe_arena_release_chunk_header_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  if (_internal_has_chunk_header_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkHeaderCache* temp = cache_.chunk_header_cache_;
    cache_.chunk_header_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SingleIndex::unsafe_arena_set_allocated_chunk_header_cache(::apollo::cyber::proto::ChunkHeaderCache* chunk_header_cache) {
  clear_cache();
  if (chunk_header_cache) {
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = chunk_header_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.SingleIndex.chunk_header_cache)
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::_internal_mutable_chunk_header_cache() {
  if (!_internal_has_chunk_header_cache()) {
    clear_cache();
    set_has_chunk_header_cache();
    cache_.chunk_header_cache_ = CreateMaybeMessage< ::apollo::cyber::proto::ChunkHeaderCache >(GetArena());
  }
  return cache_.chunk_header_cache_;
}
inline ::apollo::cyber::proto::ChunkHeaderCache* SingleIndex::mutable_chunk_header_cache() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_header_cache)
  return _internal_mutable_chunk_header_cache();
}

// .apollo.cyber.proto.ChunkBodyCache chunk_body_cache = 103;
inline bool SingleIndex::_internal_has_chunk_body_cache() const {
  return cache_case() == kChunkBodyCache;
}
inline bool SingleIndex::has_chunk_body_cache() const {
  return _internal_has_chunk_body_cache();
}
inline void SingleIndex::set_has_chunk_body_cache() {
  _oneof_case_[0] = kChunkBodyCache;
}
inline void SingleIndex::clear_chunk_body_cache() {
  if (_internal_has_chunk_body_cache()) {
    if (GetArena() == nullptr) {
      delete cache_.chunk_body_cache_;
    }
    clear_has_cache();
  }
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::release_chunk_body_cache() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  if (_internal_has_chunk_body_cache()) {
    clear_has_cache();
      ::apollo::cyber::proto::ChunkBodyCache* temp = cache_.chunk_body_cache_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cache_.chunk_body_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::cyber::proto::ChunkBodyCache& SingleIndex::_internal_chunk_body_cache() const {
  return _internal_has_chunk_body_cache()
      ? *cache_.chunk_body_cache_
      : reinterpret_cast< ::apollo::cyber::proto::ChunkBodyCache&>(::apollo::cyber::proto::_ChunkBodyCache_default_instance_);
}
inline const ::apollo::cyber::proto::ChunkBodyCache& SingleIndex::chunk_body_cache() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return _internal_chunk_body_cache();
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::unsafe_arena_release_chunk_body_cache() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  if (_internal_has_chunk_body_cache()) {
    clear_has_cache();
    ::apollo::cyber::proto::ChunkBodyCache* temp = cache_.chunk_body_cache_;
    cache_.chunk_body_cache_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SingleIndex::unsafe_arena_set_allocated_chunk_body_cache(::apollo::cyber::proto::ChunkBodyCache* chunk_body_cache) {
  clear_cache();
  if (chunk_body_cache) {
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = chunk_body_cache;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.SingleIndex.chunk_body_cache)
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::_internal_mutable_chunk_body_cache() {
  if (!_internal_has_chunk_body_cache()) {
    clear_cache();
    set_has_chunk_body_cache();
    cache_.chunk_body_cache_ = CreateMaybeMessage< ::apollo::cyber::proto::ChunkBodyCache >(GetArena());
  }
  return cache_.chunk_body_cache_;
}
inline ::apollo::cyber::proto::ChunkBodyCache* SingleIndex::mutable_chunk_body_cache() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleIndex.chunk_body_cache)
  return _internal_mutable_chunk_body_cache();
}

inline bool SingleIndex::has_cache() const {
  return cache_case() != CACHE_NOT_SET;
}
inline void SingleIndex::clear_has_cache() {
  _oneof_case_[0] = CACHE_NOT_SET;
}
inline SingleIndex::CacheCase SingleIndex::cache_case() const {
  return SingleIndex::CacheCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChunkHeaderCache

// optional uint64 message_number = 1;
inline bool ChunkHeaderCache::_internal_has_message_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChunkHeaderCache::has_message_number() const {
  return _internal_has_message_number();
}
inline void ChunkHeaderCache::clear_message_number() {
  message_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::_internal_message_number() const {
  return message_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.message_number)
  return _internal_message_number();
}
inline void ChunkHeaderCache::_internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  message_number_ = value;
}
inline void ChunkHeaderCache::set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.message_number)
}

// optional uint64 begin_time = 2;
inline bool ChunkHeaderCache::_internal_has_begin_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChunkHeaderCache::has_begin_time() const {
  return _internal_has_begin_time();
}
inline void ChunkHeaderCache::clear_begin_time() {
  begin_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.begin_time)
  return _internal_begin_time();
}
inline void ChunkHeaderCache::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  begin_time_ = value;
}
inline void ChunkHeaderCache::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.begin_time)
}

// optional uint64 end_time = 3;
inline bool ChunkHeaderCache::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChunkHeaderCache::has_end_time() const {
  return _internal_has_end_time();
}
inline void ChunkHeaderCache::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.end_time)
  return _internal_end_time();
}
inline void ChunkHeaderCache::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  end_time_ = value;
}
inline void ChunkHeaderCache::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.end_time)
}

// optional uint64 raw_size = 4;
inline bool ChunkHeaderCache::_internal_has_raw_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChunkHeaderCache::has_raw_size() const {
  return _internal_has_raw_size();
}
inline void ChunkHeaderCache::clear_raw_size() {
  raw_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::_internal_raw_size() const {
  return raw_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeaderCache::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeaderCache.raw_size)
  return _internal_raw_size();
}
inline void ChunkHeaderCache::_internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  raw_size_ = value;
}
inline void ChunkHeaderCache::set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raw_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeaderCache.raw_size)
}

// -------------------------------------------------------------------

// ChunkBodyCache

// optional uint64 message_number = 1;
inline bool ChunkBodyCache::_internal_has_message_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChunkBodyCache::has_message_number() const {
  return _internal_has_message_number();
}
inline void ChunkBodyCache::clear_message_number() {
  message_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkBodyCache::_internal_message_number() const {
  return message_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkBodyCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBodyCache.message_number)
  return _internal_message_number();
}
inline void ChunkBodyCache::_internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  message_number_ = value;
}
inline void ChunkBodyCache::set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkBodyCache.message_number)
}

// -------------------------------------------------------------------

// ChannelCache

// optional uint64 message_number = 1;
inline bool ChannelCache::_internal_has_message_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChannelCache::has_message_number() const {
  return _internal_has_message_number();
}
inline void ChannelCache::clear_message_number() {
  message_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelCache::_internal_message_number() const {
  return message_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelCache::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_number)
  return _internal_message_number();
}
inline void ChannelCache::_internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  message_number_ = value;
}
inline void ChannelCache::set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_number)
}

// optional string name = 2;
inline bool ChannelCache::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelCache::has_name() const {
  return _internal_has_name();
}
inline void ChannelCache::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelCache::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.name)
  return _internal_name();
}
inline void ChannelCache::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.name)
}
inline std::string* ChannelCache::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.name)
  return _internal_mutable_name();
}
inline const std::string& ChannelCache::_internal_name() const {
  return name_.Get();
}
inline void ChannelCache::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelCache::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.name)
}
inline void ChannelCache::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.name)
}
inline void ChannelCache::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.name)
}
inline std::string* ChannelCache::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelCache::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelCache::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.name)
}

// optional string message_type = 3;
inline bool ChannelCache::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelCache::has_message_type() const {
  return _internal_has_message_type();
}
inline void ChannelCache::clear_message_type() {
  message_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelCache::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.message_type)
  return _internal_message_type();
}
inline void ChannelCache::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.message_type)
}
inline std::string* ChannelCache::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& ChannelCache::_internal_message_type() const {
  return message_type_.Get();
}
inline void ChannelCache::_internal_set_message_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelCache::set_message_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.message_type)
}
inline void ChannelCache::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.message_type)
}
inline void ChannelCache::set_message_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.message_type)
}
inline std::string* ChannelCache::_internal_mutable_message_type() {
  _has_bits_[0] |= 0x00000002u;
  return message_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelCache::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.message_type)
  if (!_internal_has_message_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelCache::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.message_type)
}

// optional bytes proto_desc = 4;
inline bool ChannelCache::_internal_has_proto_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelCache::has_proto_desc() const {
  return _internal_has_proto_desc();
}
inline void ChannelCache::clear_proto_desc() {
  proto_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChannelCache::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChannelCache.proto_desc)
  return _internal_proto_desc();
}
inline void ChannelCache::set_proto_desc(const std::string& value) {
  _internal_set_proto_desc(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline std::string* ChannelCache::mutable_proto_desc() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChannelCache.proto_desc)
  return _internal_mutable_proto_desc();
}
inline const std::string& ChannelCache::_internal_proto_desc() const {
  return proto_desc_.Get();
}
inline void ChannelCache::_internal_set_proto_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChannelCache::set_proto_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline void ChannelCache::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline void ChannelCache::set_proto_desc(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ChannelCache.proto_desc)
}
inline std::string* ChannelCache::_internal_mutable_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
  return proto_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChannelCache::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ChannelCache.proto_desc)
  if (!_internal_has_proto_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return proto_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelCache::set_allocated_proto_desc(std::string* proto_desc) {
  if (proto_desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proto_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ChannelCache.proto_desc)
}

// -------------------------------------------------------------------

// SingleMessage

// optional string channel_name = 1;
inline bool SingleMessage::_internal_has_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SingleMessage::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void SingleMessage::clear_channel_name() {
  channel_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SingleMessage::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.channel_name)
  return _internal_channel_name();
}
inline void SingleMessage::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.channel_name)
}
inline std::string* SingleMessage::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& SingleMessage::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void SingleMessage::_internal_set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SingleMessage::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.channel_name)
}
inline void SingleMessage::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.channel_name)
}
inline void SingleMessage::set_channel_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.channel_name)
}
inline std::string* SingleMessage::_internal_mutable_channel_name() {
  _has_bits_[0] |= 0x00000001u;
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SingleMessage::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleMessage::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.channel_name)
}

// optional uint64 time = 2;
inline bool SingleMessage::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SingleMessage::has_time() const {
  return _internal_has_time();
}
inline void SingleMessage::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleMessage::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SingleMessage::time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.time)
  return _internal_time();
}
inline void SingleMessage::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void SingleMessage::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.time)
}

// optional bytes content = 3;
inline bool SingleMessage::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SingleMessage::has_content() const {
  return _internal_has_content();
}
inline void SingleMessage::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SingleMessage::content() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SingleMessage.content)
  return _internal_content();
}
inline void SingleMessage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SingleMessage.content)
}
inline std::string* SingleMessage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SingleMessage.content)
  return _internal_mutable_content();
}
inline const std::string& SingleMessage::_internal_content() const {
  return content_.Get();
}
inline void SingleMessage::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SingleMessage::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SingleMessage.content)
}
inline void SingleMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SingleMessage.content)
}
inline void SingleMessage::set_content(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SingleMessage.content)
}
inline std::string* SingleMessage::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SingleMessage::release_content() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SingleMessage.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SingleMessage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SingleMessage.content)
}

// -------------------------------------------------------------------

// Header

// optional uint32 major_version = 1;
inline bool Header::_internal_has_major_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_major_version() const {
  return _internal_has_major_version();
}
inline void Header::clear_major_version() {
  major_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_major_version() const {
  return major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::major_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.major_version)
  return _internal_major_version();
}
inline void Header::_internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  major_version_ = value;
}
inline void Header::set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.major_version)
}

// optional uint32 minor_version = 2;
inline bool Header::_internal_has_minor_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_minor_version() const {
  return _internal_has_minor_version();
}
inline void Header::clear_minor_version() {
  minor_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_minor_version() const {
  return minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::minor_version() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.minor_version)
  return _internal_minor_version();
}
inline void Header::_internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  minor_version_ = value;
}
inline void Header::set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.minor_version)
}

// optional .apollo.cyber.proto.CompressType compress = 3;
inline bool Header::_internal_has_compress() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Header::has_compress() const {
  return _internal_has_compress();
}
inline void Header::clear_compress() {
  compress_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::cyber::proto::CompressType Header::_internal_compress() const {
  return static_cast< ::apollo::cyber::proto::CompressType >(compress_);
}
inline ::apollo::cyber::proto::CompressType Header::compress() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.compress)
  return _internal_compress();
}
inline void Header::_internal_set_compress(::apollo::cyber::proto::CompressType value) {
  assert(::apollo::cyber::proto::CompressType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  compress_ = value;
}
inline void Header::set_compress(::apollo::cyber::proto::CompressType value) {
  _internal_set_compress(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.compress)
}

// optional uint64 chunk_interval = 4;
inline bool Header::_internal_has_chunk_interval() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_chunk_interval() const {
  return _internal_has_chunk_interval();
}
inline void Header::clear_chunk_interval() {
  chunk_interval_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_chunk_interval() const {
  return chunk_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::chunk_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_interval)
  return _internal_chunk_interval();
}
inline void Header::_internal_set_chunk_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  chunk_interval_ = value;
}
inline void Header::set_chunk_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunk_interval(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_interval)
}

// optional uint64 segment_interval = 5;
inline bool Header::_internal_has_segment_interval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Header::has_segment_interval() const {
  return _internal_has_segment_interval();
}
inline void Header::clear_segment_interval() {
  segment_interval_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_segment_interval() const {
  return segment_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::segment_interval() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_interval)
  return _internal_segment_interval();
}
inline void Header::_internal_set_segment_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  segment_interval_ = value;
}
inline void Header::set_segment_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_segment_interval(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_interval)
}

// optional uint64 index_position = 6 [default = 0];
inline bool Header::_internal_has_index_position() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Header::has_index_position() const {
  return _internal_has_index_position();
}
inline void Header::clear_index_position() {
  index_position_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_index_position() const {
  return index_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::index_position() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.index_position)
  return _internal_index_position();
}
inline void Header::_internal_set_index_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  index_position_ = value;
}
inline void Header::set_index_position(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_position(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.index_position)
}

// optional uint64 chunk_number = 7 [default = 0];
inline bool Header::_internal_has_chunk_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Header::has_chunk_number() const {
  return _internal_has_chunk_number();
}
inline void Header::clear_chunk_number() {
  chunk_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_chunk_number() const {
  return chunk_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::chunk_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_number)
  return _internal_chunk_number();
}
inline void Header::_internal_set_chunk_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  chunk_number_ = value;
}
inline void Header::set_chunk_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunk_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_number)
}

// optional uint64 channel_number = 8 [default = 0];
inline bool Header::_internal_has_channel_number() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Header::has_channel_number() const {
  return _internal_has_channel_number();
}
inline void Header::clear_channel_number() {
  channel_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_channel_number() const {
  return channel_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::channel_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.channel_number)
  return _internal_channel_number();
}
inline void Header::_internal_set_channel_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  channel_number_ = value;
}
inline void Header::set_channel_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.channel_number)
}

// optional uint64 begin_time = 9 [default = 0];
inline bool Header::_internal_has_begin_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Header::has_begin_time() const {
  return _internal_has_begin_time();
}
inline void Header::clear_begin_time() {
  begin_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.begin_time)
  return _internal_begin_time();
}
inline void Header::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  begin_time_ = value;
}
inline void Header::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.begin_time)
}

// optional uint64 end_time = 10 [default = 0];
inline bool Header::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Header::has_end_time() const {
  return _internal_has_end_time();
}
inline void Header::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.end_time)
  return _internal_end_time();
}
inline void Header::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  end_time_ = value;
}
inline void Header::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.end_time)
}

// optional uint64 message_number = 11 [default = 0];
inline bool Header::_internal_has_message_number() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Header::has_message_number() const {
  return _internal_has_message_number();
}
inline void Header::clear_message_number() {
  message_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_message_number() const {
  return message_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.message_number)
  return _internal_message_number();
}
inline void Header::_internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  message_number_ = value;
}
inline void Header::set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.message_number)
}

// optional uint64 size = 12 [default = 0];
inline bool Header::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Header::has_size() const {
  return _internal_has_size();
}
inline void Header::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.size)
  return _internal_size();
}
inline void Header::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  size_ = value;
}
inline void Header::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.size)
}

// optional bool is_complete = 13 [default = false];
inline bool Header::_internal_has_is_complete() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Header::has_is_complete() const {
  return _internal_has_is_complete();
}
inline void Header::clear_is_complete() {
  is_complete_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Header::_internal_is_complete() const {
  return is_complete_;
}
inline bool Header::is_complete() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.is_complete)
  return _internal_is_complete();
}
inline void Header::_internal_set_is_complete(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_complete_ = value;
}
inline void Header::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.is_complete)
}

// optional uint64 chunk_raw_size = 14;
inline bool Header::_internal_has_chunk_raw_size() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Header::has_chunk_raw_size() const {
  return _internal_has_chunk_raw_size();
}
inline void Header::clear_chunk_raw_size() {
  chunk_raw_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_chunk_raw_size() const {
  return chunk_raw_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::chunk_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.chunk_raw_size)
  return _internal_chunk_raw_size();
}
inline void Header::_internal_set_chunk_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  chunk_raw_size_ = value;
}
inline void Header::set_chunk_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunk_raw_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.chunk_raw_size)
}

// optional uint64 segment_raw_size = 15;
inline bool Header::_internal_has_segment_raw_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Header::has_segment_raw_size() const {
  return _internal_has_segment_raw_size();
}
inline void Header::clear_segment_raw_size() {
  segment_raw_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::_internal_segment_raw_size() const {
  return segment_raw_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Header::segment_raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Header.segment_raw_size)
  return _internal_segment_raw_size();
}
inline void Header::_internal_set_segment_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  segment_raw_size_ = value;
}
inline void Header::set_segment_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_segment_raw_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Header.segment_raw_size)
}

// -------------------------------------------------------------------

// Channel

// optional string name = 1;
inline bool Channel::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Channel::has_name() const {
  return _internal_has_name();
}
inline void Channel::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.name)
  return _internal_name();
}
inline void Channel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.name)
}
inline std::string* Channel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.name)
  return _internal_mutable_name();
}
inline const std::string& Channel::_internal_name() const {
  return name_.Get();
}
inline void Channel::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Channel::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.name)
}
inline void Channel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.name)
}
inline void Channel::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.name)
}
inline std::string* Channel::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Channel::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Channel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.name)
}

// optional string message_type = 2;
inline bool Channel::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Channel::has_message_type() const {
  return _internal_has_message_type();
}
inline void Channel::clear_message_type() {
  message_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Channel::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.message_type)
  return _internal_message_type();
}
inline void Channel::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.message_type)
}
inline std::string* Channel::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& Channel::_internal_message_type() const {
  return message_type_.Get();
}
inline void Channel::_internal_set_message_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Channel::set_message_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.message_type)
}
inline void Channel::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.message_type)
}
inline void Channel::set_message_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.message_type)
}
inline std::string* Channel::_internal_mutable_message_type() {
  _has_bits_[0] |= 0x00000002u;
  return message_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Channel::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.message_type)
  if (!_internal_has_message_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Channel::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.message_type)
}

// optional bytes proto_desc = 3;
inline bool Channel::_internal_has_proto_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Channel::has_proto_desc() const {
  return _internal_has_proto_desc();
}
inline void Channel::clear_proto_desc() {
  proto_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Channel::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Channel.proto_desc)
  return _internal_proto_desc();
}
inline void Channel::set_proto_desc(const std::string& value) {
  _internal_set_proto_desc(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.Channel.proto_desc)
}
inline std::string* Channel::mutable_proto_desc() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Channel.proto_desc)
  return _internal_mutable_proto_desc();
}
inline const std::string& Channel::_internal_proto_desc() const {
  return proto_desc_.Get();
}
inline void Channel::_internal_set_proto_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Channel::set_proto_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.Channel.proto_desc)
}
inline void Channel::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.Channel.proto_desc)
}
inline void Channel::set_proto_desc(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.Channel.proto_desc)
}
inline std::string* Channel::_internal_mutable_proto_desc() {
  _has_bits_[0] |= 0x00000004u;
  return proto_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Channel::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.Channel.proto_desc)
  if (!_internal_has_proto_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return proto_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Channel::set_allocated_proto_desc(std::string* proto_desc) {
  if (proto_desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proto_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.Channel.proto_desc)
}

// -------------------------------------------------------------------

// ChunkHeader

// optional uint64 begin_time = 1;
inline bool ChunkHeader::_internal_has_begin_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChunkHeader::has_begin_time() const {
  return _internal_has_begin_time();
}
inline void ChunkHeader::clear_begin_time() {
  begin_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::_internal_begin_time() const {
  return begin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::begin_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.begin_time)
  return _internal_begin_time();
}
inline void ChunkHeader::_internal_set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  begin_time_ = value;
}
inline void ChunkHeader::set_begin_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.begin_time)
}

// optional uint64 end_time = 2;
inline bool ChunkHeader::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChunkHeader::has_end_time() const {
  return _internal_has_end_time();
}
inline void ChunkHeader::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.end_time)
  return _internal_end_time();
}
inline void ChunkHeader::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_ = value;
}
inline void ChunkHeader::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.end_time)
}

// optional uint64 message_number = 3;
inline bool ChunkHeader::_internal_has_message_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChunkHeader::has_message_number() const {
  return _internal_has_message_number();
}
inline void ChunkHeader::clear_message_number() {
  message_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::_internal_message_number() const {
  return message_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::message_number() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.message_number)
  return _internal_message_number();
}
inline void ChunkHeader::_internal_set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  message_number_ = value;
}
inline void ChunkHeader::set_message_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.message_number)
}

// optional uint64 raw_size = 4;
inline bool ChunkHeader::_internal_has_raw_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChunkHeader::has_raw_size() const {
  return _internal_has_raw_size();
}
inline void ChunkHeader::clear_raw_size() {
  raw_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::_internal_raw_size() const {
  return raw_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkHeader::raw_size() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkHeader.raw_size)
  return _internal_raw_size();
}
inline void ChunkHeader::_internal_set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  raw_size_ = value;
}
inline void ChunkHeader::set_raw_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raw_size(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ChunkHeader.raw_size)
}

// -------------------------------------------------------------------

// ChunkBody

// repeated .apollo.cyber.proto.SingleMessage messages = 1;
inline int ChunkBody::_internal_messages_size() const {
  return messages_.size();
}
inline int ChunkBody::messages_size() const {
  return _internal_messages_size();
}
inline void ChunkBody::clear_messages() {
  messages_.Clear();
}
inline ::apollo::cyber::proto::SingleMessage* ChunkBody::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ChunkBody.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >*
ChunkBody::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.ChunkBody.messages)
  return &messages_;
}
inline const ::apollo::cyber::proto::SingleMessage& ChunkBody::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::apollo::cyber::proto::SingleMessage& ChunkBody::messages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ChunkBody.messages)
  return _internal_messages(index);
}
inline ::apollo::cyber::proto::SingleMessage* ChunkBody::_internal_add_messages() {
  return messages_.Add();
}
inline ::apollo::cyber::proto::SingleMessage* ChunkBody::add_messages() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.ChunkBody.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleMessage >&
ChunkBody::messages() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.ChunkBody.messages)
  return messages_;
}

// -------------------------------------------------------------------

// Index

// repeated .apollo.cyber.proto.SingleIndex indexes = 1;
inline int Index::_internal_indexes_size() const {
  return indexes_.size();
}
inline int Index::indexes_size() const {
  return _internal_indexes_size();
}
inline void Index::clear_indexes() {
  indexes_.Clear();
}
inline ::apollo::cyber::proto::SingleIndex* Index::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.Index.indexes)
  return indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >*
Index::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.Index.indexes)
  return &indexes_;
}
inline const ::apollo::cyber::proto::SingleIndex& Index::_internal_indexes(int index) const {
  return indexes_.Get(index);
}
inline const ::apollo::cyber::proto::SingleIndex& Index::indexes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.Index.indexes)
  return _internal_indexes(index);
}
inline ::apollo::cyber::proto::SingleIndex* Index::_internal_add_indexes() {
  return indexes_.Add();
}
inline ::apollo::cyber::proto::SingleIndex* Index::add_indexes() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.Index.indexes)
  return _internal_add_indexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::SingleIndex >&
Index::indexes() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.Index.indexes)
  return indexes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::cyber::proto::SectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::cyber::proto::SectionType>() {
  return ::apollo::cyber::proto::SectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::cyber::proto::CompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::cyber::proto::CompressType>() {
  return ::apollo::cyber::proto::CompressType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2frecord_2eproto
