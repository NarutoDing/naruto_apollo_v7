// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/role_attributes.proto

#include "cyber/proto/role_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2fqos_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QosProfile_cyber_2fproto_2fqos_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2frole_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class SocketAddrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SocketAddr> _instance;
} _SocketAddr_default_instance_;
class RoleAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleAttributes> _instance;
} _RoleAttributes_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_RoleAttributes_default_instance_;
    new (ptr) ::apollo::cyber::proto::RoleAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto}, {
      &scc_info_QosProfile_cyber_2fproto_2fqos_5fprofile_2eproto.base,
      &scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto.base,}};

static void InitDefaultsscc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_SocketAddr_default_instance_;
    new (ptr) ::apollo::cyber::proto::SocketAddr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cyber_2fproto_2frole_5fattributes_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2frole_5fattributes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cyber_2fproto_2frole_5fattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SocketAddr, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, host_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, host_ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, process_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, node_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, node_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, channel_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, message_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, proto_desc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, qos_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, socket_addr_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, service_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RoleAttributes, service_id_),
  0,
  1,
  13,
  2,
  9,
  3,
  10,
  4,
  5,
  11,
  7,
  8,
  6,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::cyber::proto::SocketAddr)},
  { 9, 28, sizeof(::apollo::cyber::proto::RoleAttributes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_SocketAddr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_RoleAttributes_default_instance_),
};

const char descriptor_table_protodef_cyber_2fproto_2frole_5fattributes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!cyber/proto/role_attributes.proto\022\022apo"
  "llo.cyber.proto\032\035cyber/proto/qos_profile"
  ".proto\"&\n\nSocketAddr\022\n\n\002ip\030\001 \001(\t\022\014\n\004port"
  "\030\002 \001(\r\"\340\002\n\016RoleAttributes\022\021\n\thost_name\030\001"
  " \001(\t\022\017\n\007host_ip\030\002 \001(\t\022\022\n\nprocess_id\030\003 \001("
  "\005\022\021\n\tnode_name\030\004 \001(\t\022\017\n\007node_id\030\005 \001(\004\022\024\n"
  "\014channel_name\030\006 \001(\t\022\022\n\nchannel_id\030\007 \001(\004\022"
  "\024\n\014message_type\030\010 \001(\t\022\022\n\nproto_desc\030\t \001("
  "\014\022\n\n\002id\030\n \001(\004\0223\n\013qos_profile\030\013 \001(\0132\036.apo"
  "llo.cyber.proto.QosProfile\0223\n\013socket_add"
  "r\030\014 \001(\0132\036.apollo.cyber.proto.SocketAddr\022"
  "\024\n\014service_name\030\r \001(\t\022\022\n\nservice_id\030\016 \001("
  "\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_deps[1] = {
  &::descriptor_table_cyber_2fproto_2fqos_5fprofile_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_sccs[2] = {
  &scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto.base,
  &scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto = {
  false, false, descriptor_table_protodef_cyber_2fproto_2frole_5fattributes_2eproto, "cyber/proto/role_attributes.proto", 481,
  &descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_once, descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_sccs, descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_cyber_2fproto_2frole_5fattributes_2eproto::offsets,
  file_level_metadata_cyber_2fproto_2frole_5fattributes_2eproto, 2, file_level_enum_descriptors_cyber_2fproto_2frole_5fattributes_2eproto, file_level_service_descriptors_cyber_2fproto_2frole_5fattributes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cyber_2fproto_2frole_5fattributes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto)), true);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SocketAddr::_Internal {
 public:
  using HasBits = decltype(std::declval<SocketAddr>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SocketAddr::SocketAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.SocketAddr)
}
SocketAddr::SocketAddr(const SocketAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SocketAddr)
}

void SocketAddr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

SocketAddr::~SocketAddr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SocketAddr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SocketAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SocketAddr::ArenaDtor(void* object) {
  SocketAddr* _this = reinterpret_cast< SocketAddr* >(object);
  (void)_this;
}
void SocketAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SocketAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SocketAddr& SocketAddr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SocketAddr_cyber_2fproto_2frole_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void SocketAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SocketAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SocketAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.SocketAddr.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SocketAddr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SocketAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SocketAddr.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SocketAddr)
  return target;
}

size_t SocketAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SocketAddr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketAddr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SocketAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const SocketAddr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SocketAddr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SocketAddr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SocketAddr)
    MergeFrom(*source);
  }
}

void SocketAddr::MergeFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SocketAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SocketAddr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SocketAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketAddr::CopyFrom(const SocketAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SocketAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketAddr::IsInitialized() const {
  return true;
}

void SocketAddr::InternalSwap(SocketAddr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SocketAddr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoleAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleAttributes>()._has_bits_);
  static void set_has_host_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_proto_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::cyber::proto::QosProfile& qos_profile(const RoleAttributes* msg);
  static void set_has_qos_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::cyber::proto::SocketAddr& socket_addr(const RoleAttributes* msg);
  static void set_has_socket_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::cyber::proto::QosProfile&
RoleAttributes::_Internal::qos_profile(const RoleAttributes* msg) {
  return *msg->qos_profile_;
}
const ::apollo::cyber::proto::SocketAddr&
RoleAttributes::_Internal::socket_addr(const RoleAttributes* msg) {
  return *msg->socket_addr_;
}
void RoleAttributes::clear_qos_profile() {
  if (qos_profile_ != nullptr) qos_profile_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
RoleAttributes::RoleAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.RoleAttributes)
}
RoleAttributes::RoleAttributes(const RoleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host_name()) {
    host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_name(), 
      GetArena());
  }
  host_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_host_ip()) {
    host_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_ip(), 
      GetArena());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_name()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArena());
  }
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_type()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArena());
  }
  proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proto_desc()) {
    proto_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_desc(), 
      GetArena());
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_service_name()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArena());
  }
  if (from._internal_has_qos_profile()) {
    qos_profile_ = new ::apollo::cyber::proto::QosProfile(*from.qos_profile_);
  } else {
    qos_profile_ = nullptr;
  }
  if (from._internal_has_socket_addr()) {
    socket_addr_ = new ::apollo::cyber::proto::SocketAddr(*from.socket_addr_);
  } else {
    socket_addr_ = nullptr;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_id_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(process_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RoleAttributes)
}

void RoleAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto.base);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&qos_profile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&process_id_) -
      reinterpret_cast<char*>(&qos_profile_)) + sizeof(process_id_));
}

RoleAttributes::~RoleAttributes() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RoleAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete qos_profile_;
  if (this != internal_default_instance()) delete socket_addr_;
}

void RoleAttributes::ArenaDtor(void* object) {
  RoleAttributes* _this = reinterpret_cast< RoleAttributes* >(object);
  (void)_this;
}
void RoleAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleAttributes& RoleAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto.base);
  return *internal_default_instance();
}


void RoleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RoleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      host_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      host_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      node_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      message_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      proto_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      service_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(qos_profile_ != nullptr);
      qos_profile_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(socket_addr_ != nullptr);
    socket_addr_->Clear();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&process_id_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(process_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.host_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string host_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.host_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 process_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string node_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.node_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 channel_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.message_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes proto_desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_proto_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string service_name = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.RoleAttributes.service_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 service_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RoleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // optional string host_ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_host_ip().data(), static_cast<int>(this->_internal_host_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.host_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_ip(), target);
  }

  // optional int32 process_id = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_id(), target);
  }

  // optional string node_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.node_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node_name(), target);
  }

  // optional uint64 node_id = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_node_id(), target);
  }

  // optional string channel_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.channel_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_channel_name(), target);
  }

  // optional uint64 channel_id = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_channel_id(), target);
  }

  // optional string message_type = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.message_type");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_type(), target);
  }

  // optional bytes proto_desc = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_proto_desc(), target);
  }

  // optional uint64 id = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_id(), target);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::qos_profile(this), target, stream);
  }

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::socket_addr(this), target, stream);
  }

  // optional string service_name = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.RoleAttributes.service_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_service_name(), target);
  }

  // optional uint64 service_id = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RoleAttributes)
  return target;
}

size_t RoleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RoleAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string host_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_name());
    }

    // optional string host_ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host_ip());
    }

    // optional string node_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_name());
    }

    // optional string channel_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string message_type = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
    }

    // optional bytes proto_desc = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_desc());
    }

    // optional string service_name = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
    }

    // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qos_profile_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_addr_);
    }

    // optional uint64 node_id = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_node_id());
    }

    // optional uint64 channel_id = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_id());
    }

    // optional uint64 id = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint64 service_id = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_service_id());
    }

    // optional int32 process_id = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_process_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.RoleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.RoleAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.RoleAttributes)
    MergeFrom(*source);
  }
}

void RoleAttributes::MergeFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RoleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host_name(from._internal_host_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_host_ip(from._internal_host_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_node_name(from._internal_node_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_message_type(from._internal_message_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_proto_desc(from._internal_proto_desc());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_qos_profile()->::apollo::cyber::proto::QosProfile::MergeFrom(from._internal_qos_profile());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_socket_addr()->::apollo::cyber::proto::SocketAddr::MergeFrom(from._internal_socket_addr());
    }
    if (cached_has_bits & 0x00000200u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      process_id_ = from.process_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoleAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.RoleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAttributes::CopyFrom(const RoleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RoleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAttributes::IsInitialized() const {
  return true;
}

void RoleAttributes::InternalSwap(RoleAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_ip_.Swap(&other->host_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proto_desc_.Swap(&other->proto_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleAttributes, process_id_)
      + sizeof(RoleAttributes::process_id_)
      - PROTOBUF_FIELD_OFFSET(RoleAttributes, qos_profile_)>(
          reinterpret_cast<char*>(&qos_profile_),
          reinterpret_cast<char*>(&other->qos_profile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SocketAddr* Arena::CreateMaybeMessage< ::apollo::cyber::proto::SocketAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::SocketAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::RoleAttributes* Arena::CreateMaybeMessage< ::apollo::cyber::proto::RoleAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::RoleAttributes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
