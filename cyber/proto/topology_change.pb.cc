// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/topology_change.proto

#include "cyber/proto/topology_change.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2frole_5fattributes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ChangeMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeMsg> _instance;
} _ChangeMsg_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ChangeMsg_default_instance_;
    new (ptr) ::apollo::cyber::proto::ChangeMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto}, {
      &scc_info_RoleAttributes_cyber_2fproto_2frole_5fattributes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cyber_2fproto_2ftopology_5fchange_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cyber_2fproto_2ftopology_5fchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, change_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, operate_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, role_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ChangeMsg, role_attr_),
  1,
  3,
  4,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::cyber::proto::ChangeMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ChangeMsg_default_instance_),
};

const char descriptor_table_protodef_cyber_2fproto_2ftopology_5fchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!cyber/proto/topology_change.proto\022\022apo"
  "llo.cyber.proto\032!cyber/proto/role_attrib"
  "utes.proto\"\362\001\n\tChangeMsg\022\021\n\ttimestamp\030\001 "
  "\001(\004\0223\n\013change_type\030\002 \001(\0162\036.apollo.cyber."
  "proto.ChangeType\0225\n\014operate_type\030\003 \001(\0162\037"
  ".apollo.cyber.proto.OperateType\022/\n\trole_"
  "type\030\004 \001(\0162\034.apollo.cyber.proto.RoleType"
  "\0225\n\trole_attr\030\005 \001(\0132\".apollo.cyber.proto"
  ".RoleAttributes*]\n\nChangeType\022\017\n\013CHANGE_"
  "NODE\020\001\022\022\n\016CHANGE_CHANNEL\020\002\022\022\n\016CHANGE_SER"
  "VICE\020\003\022\026\n\022CHANGE_PARTICIPANT\020\004**\n\013Operat"
  "eType\022\014\n\010OPT_JOIN\020\001\022\r\n\tOPT_LEAVE\020\002*s\n\010Ro"
  "leType\022\r\n\tROLE_NODE\020\001\022\017\n\013ROLE_WRITER\020\002\022\017"
  "\n\013ROLE_READER\020\003\022\017\n\013ROLE_SERVER\020\004\022\017\n\013ROLE"
  "_CLIENT\020\005\022\024\n\020ROLE_PARTICIPANT\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_deps[1] = {
  &::descriptor_table_cyber_2fproto_2frole_5fattributes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_sccs[1] = {
  &scc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto = {
  false, false, descriptor_table_protodef_cyber_2fproto_2ftopology_5fchange_2eproto, "cyber/proto/topology_change.proto", 591,
  &descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_once, descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_sccs, descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_cyber_2fproto_2ftopology_5fchange_2eproto::offsets,
  file_level_metadata_cyber_2fproto_2ftopology_5fchange_2eproto, 1, file_level_enum_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto, file_level_service_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cyber_2fproto_2ftopology_5fchange_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto)), true);
namespace apollo {
namespace cyber {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto);
  return file_level_enum_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto[0];
}
bool ChangeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto);
  return file_level_enum_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto[1];
}
bool OperateType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cyber_2fproto_2ftopology_5fchange_2eproto);
  return file_level_enum_descriptors_cyber_2fproto_2ftopology_5fchange_2eproto[2];
}
bool RoleType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChangeMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeMsg>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_role_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::RoleAttributes& role_attr(const ChangeMsg* msg);
  static void set_has_role_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::cyber::proto::RoleAttributes&
ChangeMsg::_Internal::role_attr(const ChangeMsg* msg) {
  return *msg->role_attr_;
}
void ChangeMsg::clear_role_attr() {
  if (role_attr_ != nullptr) role_attr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ChangeMsg::ChangeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ChangeMsg)
}
ChangeMsg::ChangeMsg(const ChangeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_attr()) {
    role_attr_ = new ::apollo::cyber::proto::RoleAttributes(*from.role_attr_);
  } else {
    role_attr_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&operate_type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(operate_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ChangeMsg)
}

void ChangeMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&role_attr_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&role_attr_)) + sizeof(timestamp_));
  role_type_ = 1;
  change_type_ = 1;
  operate_type_ = 1;
}

ChangeMsg::~ChangeMsg() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ChangeMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_attr_;
}

void ChangeMsg::ArenaDtor(void* object) {
  ChangeMsg* _this = reinterpret_cast< ChangeMsg* >(object);
  (void)_this;
}
void ChangeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeMsg& ChangeMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeMsg_cyber_2fproto_2ftopology_5fchange_2eproto.base);
  return *internal_default_instance();
}


void ChangeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ChangeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_attr_ != nullptr);
    role_attr_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    timestamp_ = PROTOBUF_ULONGLONG(0);
    role_type_ = 1;
    change_type_ = 1;
    operate_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ChangeType change_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::ChangeType_IsValid(val))) {
            _internal_set_change_type(static_cast<::apollo::cyber::proto::ChangeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OperateType operate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OperateType_IsValid(val))) {
            _internal_set_operate_type(static_cast<::apollo::cyber::proto::OperateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.RoleType role_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::RoleType_IsValid(val))) {
            _internal_set_role_type(static_cast<::apollo::cyber::proto::RoleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.RoleAttributes role_attr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ChangeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // optional .apollo.cyber.proto.ChangeType change_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_change_type(), target);
  }

  // optional .apollo.cyber.proto.OperateType operate_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_operate_type(), target);
  }

  // optional .apollo.cyber.proto.RoleType role_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_role_type(), target);
  }

  // optional .apollo.cyber.proto.RoleAttributes role_attr = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::role_attr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ChangeMsg)
  return target;
}

size_t ChangeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ChangeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.cyber.proto.RoleAttributes role_attr = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_attr_);
    }

    // optional uint64 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional .apollo.cyber.proto.RoleType role_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role_type());
    }

    // optional .apollo.cyber.proto.ChangeType change_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_type());
    }

    // optional .apollo.cyber.proto.OperateType operate_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operate_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ChangeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ChangeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ChangeMsg)
    MergeFrom(*source);
  }
}

void ChangeMsg::MergeFrom(const ChangeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ChangeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_role_attr()->::apollo::cyber::proto::RoleAttributes::MergeFrom(from._internal_role_attr());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_type_ = from.role_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      change_type_ = from.change_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      operate_type_ = from.operate_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChangeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMsg::CopyFrom(const ChangeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMsg::IsInitialized() const {
  return true;
}

void ChangeMsg::InternalSwap(ChangeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeMsg, timestamp_)
      + sizeof(ChangeMsg::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ChangeMsg, role_attr_)>(
          reinterpret_cast<char*>(&role_attr_),
          reinterpret_cast<char*>(&other->role_attr_));
  swap(role_type_, other->role_type_);
  swap(change_type_, other->change_type_);
  swap(operate_type_, other->operate_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ChangeMsg* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ChangeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ChangeMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
