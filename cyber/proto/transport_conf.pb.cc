// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/transport_conf.proto

#include "cyber/proto/transport_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ShmMulticastLocatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShmMulticastLocator> _instance;
} _ShmMulticastLocator_default_instance_;
class ShmConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShmConf> _instance;
} _ShmConf_default_instance_;
class RtpsParticipantAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtpsParticipantAttr> _instance;
} _RtpsParticipantAttr_default_instance_;
class CommunicationModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationMode> _instance;
} _CommunicationMode_default_instance_;
class ResourceLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceLimit> _instance;
} _ResourceLimit_default_instance_;
class TransportConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportConf> _instance;
} _TransportConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_CommunicationMode_default_instance_;
    new (ptr) ::apollo::cyber::proto::CommunicationMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ResourceLimit_default_instance_;
    new (ptr) ::apollo::cyber::proto::ResourceLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_;
    new (ptr) ::apollo::cyber::proto::RtpsParticipantAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ShmConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::ShmConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto}, {
      &scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto.base,}};

static void InitDefaultsscc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ShmMulticastLocator_default_instance_;
    new (ptr) ::apollo::cyber::proto::ShmMulticastLocator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_TransportConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::TransportConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto}, {
      &scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto.base,
      &scc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto.base,
      &scc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto.base,
      &scc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, notifier_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, shm_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, shm_locator_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, lease_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, announcement_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, domain_id_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, port_base_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, same_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, diff_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, diff_host_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, max_history_depth_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, shm_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, participant_attr_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, communication_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, resource_limit_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::cyber::proto::ShmMulticastLocator)},
  { 9, 17, sizeof(::apollo::cyber::proto::ShmConf)},
  { 20, 29, sizeof(::apollo::cyber::proto::RtpsParticipantAttr)},
  { 33, 41, sizeof(::apollo::cyber::proto::CommunicationMode)},
  { 44, 50, sizeof(::apollo::cyber::proto::ResourceLimit)},
  { 51, 60, sizeof(::apollo::cyber::proto::TransportConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ShmMulticastLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ShmConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_CommunicationMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ResourceLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_TransportConf_default_instance_),
};

const char descriptor_table_protodef_cyber_2fproto_2ftransport_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n cyber/proto/transport_conf.proto\022\022apol"
  "lo.cyber.proto\"/\n\023ShmMulticastLocator\022\n\n"
  "\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"p\n\007ShmConf\022\025\n\rno"
  "tifier_type\030\001 \001(\t\022\020\n\010shm_type\030\002 \001(\t\022<\n\013s"
  "hm_locator\030\003 \001(\0132\'.apollo.cyber.proto.Sh"
  "mMulticastLocator\"\210\001\n\023RtpsParticipantAtt"
  "r\022\032\n\016lease_duration\030\001 \001(\005:\00212\022\036\n\023announc"
  "ement_period\030\002 \001(\005:\0013\022\033\n\016domain_id_gain\030"
  "\003 \001(\r:\003200\022\030\n\tport_base\030\004 \001(\r:\00510000\"\304\001\n"
  "\021CommunicationMode\022:\n\tsame_proc\030\001 \001(\0162 ."
  "apollo.cyber.proto.OptionalMode:\005INTRA\0228"
  "\n\tdiff_proc\030\002 \001(\0162 .apollo.cyber.proto.O"
  "ptionalMode:\003SHM\0229\n\tdiff_host\030\003 \001(\0162 .ap"
  "ollo.cyber.proto.OptionalMode:\004RTPS\"0\n\rR"
  "esourceLimit\022\037\n\021max_history_depth\030\001 \001(\r:"
  "\0041000\"\377\001\n\rTransportConf\022-\n\010shm_conf\030\001 \001("
  "\0132\033.apollo.cyber.proto.ShmConf\022A\n\020partic"
  "ipant_attr\030\002 \001(\0132\'.apollo.cyber.proto.Rt"
  "psParticipantAttr\022A\n\022communication_mode\030"
  "\003 \001(\0132%.apollo.cyber.proto.Communication"
  "Mode\0229\n\016resource_limit\030\004 \001(\0132!.apollo.cy"
  "ber.proto.ResourceLimit*8\n\014OptionalMode\022"
  "\n\n\006HYBRID\020\000\022\t\n\005INTRA\020\001\022\007\n\003SHM\020\002\022\010\n\004RTPS\020"
  "\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_sccs[6] = {
  &scc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto.base,
  &scc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto.base,
  &scc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto.base,
  &scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto.base,
  &scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto.base,
  &scc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto = {
  false, false, descriptor_table_protodef_cyber_2fproto_2ftransport_5fconf_2eproto, "cyber/proto/transport_conf.proto", 921,
  &descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_once, descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_sccs, descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto::offsets,
  file_level_metadata_cyber_2fproto_2ftransport_5fconf_2eproto, 6, file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto, file_level_service_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cyber_2fproto_2ftransport_5fconf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto)), true);
namespace apollo {
namespace cyber {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
  return file_level_enum_descriptors_cyber_2fproto_2ftransport_5fconf_2eproto[0];
}
bool OptionalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ShmMulticastLocator::_Internal {
 public:
  using HasBits = decltype(std::declval<ShmMulticastLocator>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ShmMulticastLocator::ShmMulticastLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ShmMulticastLocator)
}
ShmMulticastLocator::ShmMulticastLocator(const ShmMulticastLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmMulticastLocator)
}

void ShmMulticastLocator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ShmMulticastLocator::~ShmMulticastLocator() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmMulticastLocator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShmMulticastLocator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShmMulticastLocator::ArenaDtor(void* object) {
  ShmMulticastLocator* _this = reinterpret_cast< ShmMulticastLocator* >(object);
  (void)_this;
}
void ShmMulticastLocator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShmMulticastLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShmMulticastLocator& ShmMulticastLocator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShmMulticastLocator_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ShmMulticastLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmMulticastLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShmMulticastLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ShmMulticastLocator.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShmMulticastLocator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmMulticastLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmMulticastLocator)
  return target;
}

size_t ShmMulticastLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmMulticastLocator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShmMulticastLocator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmMulticastLocator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShmMulticastLocator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmMulticastLocator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmMulticastLocator)
    MergeFrom(*source);
  }
}

void ShmMulticastLocator::MergeFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmMulticastLocator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmMulticastLocator::CopyFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmMulticastLocator::IsInitialized() const {
  return true;
}

void ShmMulticastLocator::InternalSwap(ShmMulticastLocator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmMulticastLocator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShmConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ShmConf>()._has_bits_);
  static void set_has_notifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ShmMulticastLocator& shm_locator(const ShmConf* msg);
  static void set_has_shm_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::cyber::proto::ShmMulticastLocator&
ShmConf::_Internal::shm_locator(const ShmConf* msg) {
  return *msg->shm_locator_;
}
ShmConf::ShmConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ShmConf)
}
ShmConf::ShmConf(const ShmConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notifier_type()) {
    notifier_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notifier_type(), 
      GetArena());
  }
  shm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shm_type()) {
    shm_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shm_type(), 
      GetArena());
  }
  if (from._internal_has_shm_locator()) {
    shm_locator_ = new ::apollo::cyber::proto::ShmMulticastLocator(*from.shm_locator_);
  } else {
    shm_locator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmConf)
}

void ShmConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  notifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shm_locator_ = nullptr;
}

ShmConf::~ShmConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShmConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notifier_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shm_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shm_locator_;
}

void ShmConf::ArenaDtor(void* object) {
  ShmConf* _this = reinterpret_cast< ShmConf* >(object);
  (void)_this;
}
void ShmConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShmConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShmConf& ShmConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShmConf_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ShmConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      notifier_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      shm_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shm_locator_ != nullptr);
      shm_locator_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShmConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string notifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_notifier_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ShmConf.notifier_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shm_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_shm_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.cyber.proto.ShmConf.shm_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shm_locator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShmConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notifier_type().data(), static_cast<int>(this->_internal_notifier_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notifier_type(), target);
  }

  // optional string shm_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shm_type().data(), static_cast<int>(this->_internal_shm_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.shm_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shm_type(), target);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shm_locator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmConf)
  return target;
}

size_t ShmConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string notifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notifier_type());
    }

    // optional string shm_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shm_type());
    }

    // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shm_locator_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShmConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShmConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmConf)
    MergeFrom(*source);
  }
}

void ShmConf::MergeFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notifier_type(from._internal_notifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_shm_type(from._internal_shm_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_shm_locator()->::apollo::cyber::proto::ShmMulticastLocator::MergeFrom(from._internal_shm_locator());
    }
  }
}

void ShmConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmConf::CopyFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmConf::IsInitialized() const {
  return true;
}

void ShmConf::InternalSwap(ShmConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notifier_type_.Swap(&other->notifier_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shm_type_.Swap(&other->shm_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(shm_locator_, other->shm_locator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RtpsParticipantAttr::_Internal {
 public:
  using HasBits = decltype(std::declval<RtpsParticipantAttr>()._has_bits_);
  static void set_has_lease_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain_id_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RtpsParticipantAttr::RtpsParticipantAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}
RtpsParticipantAttr::RtpsParticipantAttr(const RtpsParticipantAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lease_duration_, &from.lease_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_base_) -
    reinterpret_cast<char*>(&lease_duration_)) + sizeof(port_base_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}

void RtpsParticipantAttr::SharedCtor() {
  lease_duration_ = 12;
  announcement_period_ = 3;
  domain_id_gain_ = 200u;
  port_base_ = 10000u;
}

RtpsParticipantAttr::~RtpsParticipantAttr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RtpsParticipantAttr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtpsParticipantAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RtpsParticipantAttr::ArenaDtor(void* object) {
  RtpsParticipantAttr* _this = reinterpret_cast< RtpsParticipantAttr* >(object);
  (void)_this;
}
void RtpsParticipantAttr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtpsParticipantAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtpsParticipantAttr& RtpsParticipantAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtpsParticipantAttr_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void RtpsParticipantAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    lease_duration_ = 12;
    announcement_period_ = 3;
    domain_id_gain_ = 200u;
    port_base_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtpsParticipantAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lease_duration = 1 [default = 12];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lease_duration(&has_bits);
          lease_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 announcement_period = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_announcement_period(&has_bits);
          announcement_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 domain_id_gain = 3 [default = 200];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_domain_id_gain(&has_bits);
          domain_id_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port_base = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_port_base(&has_bits);
          port_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtpsParticipantAttr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lease_duration(), target);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_announcement_period(), target);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_domain_id_gain(), target);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RtpsParticipantAttr)
  return target;
}

size_t RtpsParticipantAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RtpsParticipantAttr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 lease_duration = 1 [default = 12];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lease_duration());
    }

    // optional int32 announcement_period = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_announcement_period());
    }

    // optional uint32 domain_id_gain = 3 [default = 200];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_domain_id_gain());
    }

    // optional uint32 port_base = 4 [default = 10000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port_base());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtpsParticipantAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const RtpsParticipantAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtpsParticipantAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.RtpsParticipantAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.RtpsParticipantAttr)
    MergeFrom(*source);
  }
}

void RtpsParticipantAttr::MergeFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lease_duration_ = from.lease_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_period_ = from.announcement_period_;
    }
    if (cached_has_bits & 0x00000004u) {
      domain_id_gain_ = from.domain_id_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_base_ = from.port_base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpsParticipantAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtpsParticipantAttr::CopyFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpsParticipantAttr::IsInitialized() const {
  return true;
}

void RtpsParticipantAttr::InternalSwap(RtpsParticipantAttr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lease_duration_, other->lease_duration_);
  swap(announcement_period_, other->announcement_period_);
  swap(domain_id_gain_, other->domain_id_gain_);
  swap(port_base_, other->port_base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpsParticipantAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommunicationMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CommunicationMode>()._has_bits_);
  static void set_has_same_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diff_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_diff_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommunicationMode::CommunicationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.CommunicationMode)
}
CommunicationMode::CommunicationMode(const CommunicationMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&diff_host_, &from.diff_host_,
    static_cast<size_t>(reinterpret_cast<char*>(&diff_proc_) -
    reinterpret_cast<char*>(&diff_host_)) + sizeof(diff_proc_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.CommunicationMode)
}

void CommunicationMode::SharedCtor() {
  diff_host_ = 3;
  same_proc_ = 1;
  diff_proc_ = 2;
}

CommunicationMode::~CommunicationMode() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.CommunicationMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommunicationMode::ArenaDtor(void* object) {
  CommunicationMode* _this = reinterpret_cast< CommunicationMode* >(object);
  (void)_this;
}
void CommunicationMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommunicationMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationMode& CommunicationMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationMode_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void CommunicationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.CommunicationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    diff_host_ = 3;
    same_proc_ = 1;
    diff_proc_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunicationMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_same_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_diff_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            _internal_set_diff_host(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.CommunicationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_same_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_diff_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_diff_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.CommunicationMode)
  return target;
}

size_t CommunicationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.CommunicationMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diff_host());
    }

    // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_same_proc());
    }

    // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_diff_proc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.CommunicationMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.CommunicationMode)
    MergeFrom(*source);
  }
}

void CommunicationMode::MergeFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      diff_host_ = from.diff_host_;
    }
    if (cached_has_bits & 0x00000002u) {
      same_proc_ = from.same_proc_;
    }
    if (cached_has_bits & 0x00000004u) {
      diff_proc_ = from.diff_proc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommunicationMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationMode::CopyFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationMode::IsInitialized() const {
  return true;
}

void CommunicationMode::InternalSwap(CommunicationMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(diff_host_, other->diff_host_);
  swap(same_proc_, other->same_proc_);
  swap(diff_proc_, other->diff_proc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceLimit>()._has_bits_);
  static void set_has_max_history_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceLimit::ResourceLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.ResourceLimit)
}
ResourceLimit::ResourceLimit(const ResourceLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_history_depth_ = from.max_history_depth_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ResourceLimit)
}

void ResourceLimit::SharedCtor() {
  max_history_depth_ = 1000u;
}

ResourceLimit::~ResourceLimit() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ResourceLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceLimit::ArenaDtor(void* object) {
  ResourceLimit* _this = reinterpret_cast< ResourceLimit* >(object);
  (void)_this;
}
void ResourceLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLimit& ResourceLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceLimit_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ResourceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ResourceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_history_depth_ = 1000u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_history_depth = 1 [default = 1000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_history_depth(&has_bits);
          max_history_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ResourceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_history_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ResourceLimit)
  return target;
}

size_t ResourceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ResourceLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_history_depth = 1 [default = 1000];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_history_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ResourceLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ResourceLimit)
    MergeFrom(*source);
  }
}

void ResourceLimit::MergeFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_history_depth()) {
    _internal_set_max_history_depth(from._internal_max_history_depth());
  }
}

void ResourceLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLimit::CopyFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimit::IsInitialized() const {
  return true;
}

void ResourceLimit::InternalSwap(ResourceLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_history_depth_, other->max_history_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportConf::_Internal {
 public:
  using HasBits = decltype(std::declval<TransportConf>()._has_bits_);
  static const ::apollo::cyber::proto::ShmConf& shm_conf(const TransportConf* msg);
  static void set_has_shm_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::cyber::proto::RtpsParticipantAttr& participant_attr(const TransportConf* msg);
  static void set_has_participant_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::CommunicationMode& communication_mode(const TransportConf* msg);
  static void set_has_communication_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::ResourceLimit& resource_limit(const TransportConf* msg);
  static void set_has_resource_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ShmConf&
TransportConf::_Internal::shm_conf(const TransportConf* msg) {
  return *msg->shm_conf_;
}
const ::apollo::cyber::proto::RtpsParticipantAttr&
TransportConf::_Internal::participant_attr(const TransportConf* msg) {
  return *msg->participant_attr_;
}
const ::apollo::cyber::proto::CommunicationMode&
TransportConf::_Internal::communication_mode(const TransportConf* msg) {
  return *msg->communication_mode_;
}
const ::apollo::cyber::proto::ResourceLimit&
TransportConf::_Internal::resource_limit(const TransportConf* msg) {
  return *msg->resource_limit_;
}
TransportConf::TransportConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.cyber.proto.TransportConf)
}
TransportConf::TransportConf(const TransportConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shm_conf()) {
    shm_conf_ = new ::apollo::cyber::proto::ShmConf(*from.shm_conf_);
  } else {
    shm_conf_ = nullptr;
  }
  if (from._internal_has_participant_attr()) {
    participant_attr_ = new ::apollo::cyber::proto::RtpsParticipantAttr(*from.participant_attr_);
  } else {
    participant_attr_ = nullptr;
  }
  if (from._internal_has_communication_mode()) {
    communication_mode_ = new ::apollo::cyber::proto::CommunicationMode(*from.communication_mode_);
  } else {
    communication_mode_ = nullptr;
  }
  if (from._internal_has_resource_limit()) {
    resource_limit_ = new ::apollo::cyber::proto::ResourceLimit(*from.resource_limit_);
  } else {
    resource_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TransportConf)
}

void TransportConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&shm_conf_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&resource_limit_) -
      reinterpret_cast<char*>(&shm_conf_)) + sizeof(resource_limit_));
}

TransportConf::~TransportConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TransportConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shm_conf_;
  if (this != internal_default_instance()) delete participant_attr_;
  if (this != internal_default_instance()) delete communication_mode_;
  if (this != internal_default_instance()) delete resource_limit_;
}

void TransportConf::ArenaDtor(void* object) {
  TransportConf* _this = reinterpret_cast< TransportConf* >(object);
  (void)_this;
}
void TransportConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportConf& TransportConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportConf_cyber_2fproto_2ftransport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void TransportConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TransportConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shm_conf_ != nullptr);
      shm_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(participant_attr_ != nullptr);
      participant_attr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(communication_mode_ != nullptr);
      communication_mode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_limit_ != nullptr);
      resource_limit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shm_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_participant_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_communication_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TransportConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shm_conf(this), target, stream);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::participant_attr(this), target, stream);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::communication_mode(this), target, stream);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resource_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TransportConf)
  return target;
}

size_t TransportConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TransportConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shm_conf_);
    }

    // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *participant_attr_);
    }

    // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *communication_mode_);
    }

    // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_limit_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.TransportConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.TransportConf)
    MergeFrom(*source);
  }
}

void TransportConf::MergeFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shm_conf()->::apollo::cyber::proto::ShmConf::MergeFrom(from._internal_shm_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_participant_attr()->::apollo::cyber::proto::RtpsParticipantAttr::MergeFrom(from._internal_participant_attr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_communication_mode()->::apollo::cyber::proto::CommunicationMode::MergeFrom(from._internal_communication_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource_limit()->::apollo::cyber::proto::ResourceLimit::MergeFrom(from._internal_resource_limit());
    }
  }
}

void TransportConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportConf::CopyFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConf::IsInitialized() const {
  return true;
}

void TransportConf::InternalSwap(TransportConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportConf, resource_limit_)
      + sizeof(TransportConf::resource_limit_)
      - PROTOBUF_FIELD_OFFSET(TransportConf, shm_conf_)>(
          reinterpret_cast<char*>(&shm_conf_),
          reinterpret_cast<char*>(&other->shm_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmMulticastLocator* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmMulticastLocator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ShmMulticastLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ShmConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::RtpsParticipantAttr* Arena::CreateMaybeMessage< ::apollo::cyber::proto::RtpsParticipantAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::RtpsParticipantAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::CommunicationMode* Arena::CreateMaybeMessage< ::apollo::cyber::proto::CommunicationMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::CommunicationMode >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ResourceLimit* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ResourceLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::ResourceLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::TransportConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::TransportConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::cyber::proto::TransportConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
