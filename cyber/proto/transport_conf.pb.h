// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyber/proto/transport_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2ftransport_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2ftransport_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cyber_2fproto_2ftransport_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class CommunicationMode;
class CommunicationModeDefaultTypeInternal;
extern CommunicationModeDefaultTypeInternal _CommunicationMode_default_instance_;
class ResourceLimit;
class ResourceLimitDefaultTypeInternal;
extern ResourceLimitDefaultTypeInternal _ResourceLimit_default_instance_;
class RtpsParticipantAttr;
class RtpsParticipantAttrDefaultTypeInternal;
extern RtpsParticipantAttrDefaultTypeInternal _RtpsParticipantAttr_default_instance_;
class ShmConf;
class ShmConfDefaultTypeInternal;
extern ShmConfDefaultTypeInternal _ShmConf_default_instance_;
class ShmMulticastLocator;
class ShmMulticastLocatorDefaultTypeInternal;
extern ShmMulticastLocatorDefaultTypeInternal _ShmMulticastLocator_default_instance_;
class TransportConf;
class TransportConfDefaultTypeInternal;
extern TransportConfDefaultTypeInternal _TransportConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::CommunicationMode* Arena::CreateMaybeMessage<::apollo::cyber::proto::CommunicationMode>(Arena*);
template<> ::apollo::cyber::proto::ResourceLimit* Arena::CreateMaybeMessage<::apollo::cyber::proto::ResourceLimit>(Arena*);
template<> ::apollo::cyber::proto::RtpsParticipantAttr* Arena::CreateMaybeMessage<::apollo::cyber::proto::RtpsParticipantAttr>(Arena*);
template<> ::apollo::cyber::proto::ShmConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::ShmConf>(Arena*);
template<> ::apollo::cyber::proto::ShmMulticastLocator* Arena::CreateMaybeMessage<::apollo::cyber::proto::ShmMulticastLocator>(Arena*);
template<> ::apollo::cyber::proto::TransportConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::TransportConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

enum OptionalMode : int {
  HYBRID = 0,
  INTRA = 1,
  SHM = 2,
  RTPS = 3
};
bool OptionalMode_IsValid(int value);
constexpr OptionalMode OptionalMode_MIN = HYBRID;
constexpr OptionalMode OptionalMode_MAX = RTPS;
constexpr int OptionalMode_ARRAYSIZE = OptionalMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalMode_descriptor();
template<typename T>
inline const std::string& OptionalMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OptionalMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OptionalMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OptionalMode_descriptor(), enum_t_value);
}
inline bool OptionalMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OptionalMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OptionalMode>(
    OptionalMode_descriptor(), name, value);
}
// ===================================================================

class ShmMulticastLocator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ShmMulticastLocator) */ {
 public:
  inline ShmMulticastLocator() : ShmMulticastLocator(nullptr) {}
  virtual ~ShmMulticastLocator();

  ShmMulticastLocator(const ShmMulticastLocator& from);
  ShmMulticastLocator(ShmMulticastLocator&& from) noexcept
    : ShmMulticastLocator() {
    *this = ::std::move(from);
  }

  inline ShmMulticastLocator& operator=(const ShmMulticastLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShmMulticastLocator& operator=(ShmMulticastLocator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShmMulticastLocator& default_instance();

  static inline const ShmMulticastLocator* internal_default_instance() {
    return reinterpret_cast<const ShmMulticastLocator*>(
               &_ShmMulticastLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShmMulticastLocator& a, ShmMulticastLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(ShmMulticastLocator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShmMulticastLocator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShmMulticastLocator* New() const final {
    return CreateMaybeMessage<ShmMulticastLocator>(nullptr);
  }

  ShmMulticastLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShmMulticastLocator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShmMulticastLocator& from);
  void MergeFrom(const ShmMulticastLocator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShmMulticastLocator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ShmMulticastLocator";
  }
  protected:
  explicit ShmMulticastLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ShmMulticastLocator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ShmConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ShmConf) */ {
 public:
  inline ShmConf() : ShmConf(nullptr) {}
  virtual ~ShmConf();

  ShmConf(const ShmConf& from);
  ShmConf(ShmConf&& from) noexcept
    : ShmConf() {
    *this = ::std::move(from);
  }

  inline ShmConf& operator=(const ShmConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShmConf& operator=(ShmConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShmConf& default_instance();

  static inline const ShmConf* internal_default_instance() {
    return reinterpret_cast<const ShmConf*>(
               &_ShmConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShmConf& a, ShmConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ShmConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShmConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShmConf* New() const final {
    return CreateMaybeMessage<ShmConf>(nullptr);
  }

  ShmConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShmConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShmConf& from);
  void MergeFrom(const ShmConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShmConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ShmConf";
  }
  protected:
  explicit ShmConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotifierTypeFieldNumber = 1,
    kShmTypeFieldNumber = 2,
    kShmLocatorFieldNumber = 3,
  };
  // optional string notifier_type = 1;
  bool has_notifier_type() const;
  private:
  bool _internal_has_notifier_type() const;
  public:
  void clear_notifier_type();
  const std::string& notifier_type() const;
  void set_notifier_type(const std::string& value);
  void set_notifier_type(std::string&& value);
  void set_notifier_type(const char* value);
  void set_notifier_type(const char* value, size_t size);
  std::string* mutable_notifier_type();
  std::string* release_notifier_type();
  void set_allocated_notifier_type(std::string* notifier_type);
  private:
  const std::string& _internal_notifier_type() const;
  void _internal_set_notifier_type(const std::string& value);
  std::string* _internal_mutable_notifier_type();
  public:

  // optional string shm_type = 2;
  bool has_shm_type() const;
  private:
  bool _internal_has_shm_type() const;
  public:
  void clear_shm_type();
  const std::string& shm_type() const;
  void set_shm_type(const std::string& value);
  void set_shm_type(std::string&& value);
  void set_shm_type(const char* value);
  void set_shm_type(const char* value, size_t size);
  std::string* mutable_shm_type();
  std::string* release_shm_type();
  void set_allocated_shm_type(std::string* shm_type);
  private:
  const std::string& _internal_shm_type() const;
  void _internal_set_shm_type(const std::string& value);
  std::string* _internal_mutable_shm_type();
  public:

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
  bool has_shm_locator() const;
  private:
  bool _internal_has_shm_locator() const;
  public:
  void clear_shm_locator();
  const ::apollo::cyber::proto::ShmMulticastLocator& shm_locator() const;
  ::apollo::cyber::proto::ShmMulticastLocator* release_shm_locator();
  ::apollo::cyber::proto::ShmMulticastLocator* mutable_shm_locator();
  void set_allocated_shm_locator(::apollo::cyber::proto::ShmMulticastLocator* shm_locator);
  private:
  const ::apollo::cyber::proto::ShmMulticastLocator& _internal_shm_locator() const;
  ::apollo::cyber::proto::ShmMulticastLocator* _internal_mutable_shm_locator();
  public:
  void unsafe_arena_set_allocated_shm_locator(
      ::apollo::cyber::proto::ShmMulticastLocator* shm_locator);
  ::apollo::cyber::proto::ShmMulticastLocator* unsafe_arena_release_shm_locator();

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ShmConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notifier_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shm_type_;
  ::apollo::cyber::proto::ShmMulticastLocator* shm_locator_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class RtpsParticipantAttr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.RtpsParticipantAttr) */ {
 public:
  inline RtpsParticipantAttr() : RtpsParticipantAttr(nullptr) {}
  virtual ~RtpsParticipantAttr();

  RtpsParticipantAttr(const RtpsParticipantAttr& from);
  RtpsParticipantAttr(RtpsParticipantAttr&& from) noexcept
    : RtpsParticipantAttr() {
    *this = ::std::move(from);
  }

  inline RtpsParticipantAttr& operator=(const RtpsParticipantAttr& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtpsParticipantAttr& operator=(RtpsParticipantAttr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RtpsParticipantAttr& default_instance();

  static inline const RtpsParticipantAttr* internal_default_instance() {
    return reinterpret_cast<const RtpsParticipantAttr*>(
               &_RtpsParticipantAttr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RtpsParticipantAttr& a, RtpsParticipantAttr& b) {
    a.Swap(&b);
  }
  inline void Swap(RtpsParticipantAttr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtpsParticipantAttr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RtpsParticipantAttr* New() const final {
    return CreateMaybeMessage<RtpsParticipantAttr>(nullptr);
  }

  RtpsParticipantAttr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RtpsParticipantAttr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RtpsParticipantAttr& from);
  void MergeFrom(const RtpsParticipantAttr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtpsParticipantAttr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.RtpsParticipantAttr";
  }
  protected:
  explicit RtpsParticipantAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaseDurationFieldNumber = 1,
    kAnnouncementPeriodFieldNumber = 2,
    kDomainIdGainFieldNumber = 3,
    kPortBaseFieldNumber = 4,
  };
  // optional int32 lease_duration = 1 [default = 12];
  bool has_lease_duration() const;
  private:
  bool _internal_has_lease_duration() const;
  public:
  void clear_lease_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 lease_duration() const;
  void set_lease_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lease_duration() const;
  void _internal_set_lease_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 announcement_period = 2 [default = 3];
  bool has_announcement_period() const;
  private:
  bool _internal_has_announcement_period() const;
  public:
  void clear_announcement_period();
  ::PROTOBUF_NAMESPACE_ID::int32 announcement_period() const;
  void set_announcement_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_announcement_period() const;
  void _internal_set_announcement_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 domain_id_gain = 3 [default = 200];
  bool has_domain_id_gain() const;
  private:
  bool _internal_has_domain_id_gain() const;
  public:
  void clear_domain_id_gain();
  ::PROTOBUF_NAMESPACE_ID::uint32 domain_id_gain() const;
  void set_domain_id_gain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_domain_id_gain() const;
  void _internal_set_domain_id_gain(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 port_base = 4 [default = 10000];
  bool has_port_base() const;
  private:
  bool _internal_has_port_base() const;
  public:
  void clear_port_base();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_base() const;
  void set_port_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_base() const;
  void _internal_set_port_base(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.RtpsParticipantAttr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lease_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 announcement_period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 domain_id_gain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_base_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CommunicationMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.CommunicationMode) */ {
 public:
  inline CommunicationMode() : CommunicationMode(nullptr) {}
  virtual ~CommunicationMode();

  CommunicationMode(const CommunicationMode& from);
  CommunicationMode(CommunicationMode&& from) noexcept
    : CommunicationMode() {
    *this = ::std::move(from);
  }

  inline CommunicationMode& operator=(const CommunicationMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationMode& operator=(CommunicationMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationMode& default_instance();

  static inline const CommunicationMode* internal_default_instance() {
    return reinterpret_cast<const CommunicationMode*>(
               &_CommunicationMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommunicationMode& a, CommunicationMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationMode* New() const final {
    return CreateMaybeMessage<CommunicationMode>(nullptr);
  }

  CommunicationMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationMode& from);
  void MergeFrom(const CommunicationMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.CommunicationMode";
  }
  protected:
  explicit CommunicationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffHostFieldNumber = 3,
    kSameProcFieldNumber = 1,
    kDiffProcFieldNumber = 2,
  };
  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  bool has_diff_host() const;
  private:
  bool _internal_has_diff_host() const;
  public:
  void clear_diff_host();
  ::apollo::cyber::proto::OptionalMode diff_host() const;
  void set_diff_host(::apollo::cyber::proto::OptionalMode value);
  private:
  ::apollo::cyber::proto::OptionalMode _internal_diff_host() const;
  void _internal_set_diff_host(::apollo::cyber::proto::OptionalMode value);
  public:

  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  bool has_same_proc() const;
  private:
  bool _internal_has_same_proc() const;
  public:
  void clear_same_proc();
  ::apollo::cyber::proto::OptionalMode same_proc() const;
  void set_same_proc(::apollo::cyber::proto::OptionalMode value);
  private:
  ::apollo::cyber::proto::OptionalMode _internal_same_proc() const;
  void _internal_set_same_proc(::apollo::cyber::proto::OptionalMode value);
  public:

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  bool has_diff_proc() const;
  private:
  bool _internal_has_diff_proc() const;
  public:
  void clear_diff_proc();
  ::apollo::cyber::proto::OptionalMode diff_proc() const;
  void set_diff_proc(::apollo::cyber::proto::OptionalMode value);
  private:
  ::apollo::cyber::proto::OptionalMode _internal_diff_proc() const;
  void _internal_set_diff_proc(::apollo::cyber::proto::OptionalMode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.CommunicationMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int diff_host_;
  int same_proc_;
  int diff_proc_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ResourceLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.ResourceLimit) */ {
 public:
  inline ResourceLimit() : ResourceLimit(nullptr) {}
  virtual ~ResourceLimit();

  ResourceLimit(const ResourceLimit& from);
  ResourceLimit(ResourceLimit&& from) noexcept
    : ResourceLimit() {
    *this = ::std::move(from);
  }

  inline ResourceLimit& operator=(const ResourceLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLimit& operator=(ResourceLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceLimit& default_instance();

  static inline const ResourceLimit* internal_default_instance() {
    return reinterpret_cast<const ResourceLimit*>(
               &_ResourceLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceLimit& a, ResourceLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceLimit* New() const final {
    return CreateMaybeMessage<ResourceLimit>(nullptr);
  }

  ResourceLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceLimit& from);
  void MergeFrom(const ResourceLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.ResourceLimit";
  }
  protected:
  explicit ResourceLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxHistoryDepthFieldNumber = 1,
  };
  // optional uint32 max_history_depth = 1 [default = 1000];
  bool has_max_history_depth() const;
  private:
  bool _internal_has_max_history_depth() const;
  public:
  void clear_max_history_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_history_depth() const;
  void set_max_history_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_history_depth() const;
  void _internal_set_max_history_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.ResourceLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_history_depth_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TransportConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.TransportConf) */ {
 public:
  inline TransportConf() : TransportConf(nullptr) {}
  virtual ~TransportConf();

  TransportConf(const TransportConf& from);
  TransportConf(TransportConf&& from) noexcept
    : TransportConf() {
    *this = ::std::move(from);
  }

  inline TransportConf& operator=(const TransportConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportConf& operator=(TransportConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportConf& default_instance();

  static inline const TransportConf* internal_default_instance() {
    return reinterpret_cast<const TransportConf*>(
               &_TransportConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransportConf& a, TransportConf& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportConf* New() const final {
    return CreateMaybeMessage<TransportConf>(nullptr);
  }

  TransportConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportConf& from);
  void MergeFrom(const TransportConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.TransportConf";
  }
  protected:
  explicit TransportConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto);
    return ::descriptor_table_cyber_2fproto_2ftransport_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShmConfFieldNumber = 1,
    kParticipantAttrFieldNumber = 2,
    kCommunicationModeFieldNumber = 3,
    kResourceLimitFieldNumber = 4,
  };
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  bool has_shm_conf() const;
  private:
  bool _internal_has_shm_conf() const;
  public:
  void clear_shm_conf();
  const ::apollo::cyber::proto::ShmConf& shm_conf() const;
  ::apollo::cyber::proto::ShmConf* release_shm_conf();
  ::apollo::cyber::proto::ShmConf* mutable_shm_conf();
  void set_allocated_shm_conf(::apollo::cyber::proto::ShmConf* shm_conf);
  private:
  const ::apollo::cyber::proto::ShmConf& _internal_shm_conf() const;
  ::apollo::cyber::proto::ShmConf* _internal_mutable_shm_conf();
  public:
  void unsafe_arena_set_allocated_shm_conf(
      ::apollo::cyber::proto::ShmConf* shm_conf);
  ::apollo::cyber::proto::ShmConf* unsafe_arena_release_shm_conf();

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  bool has_participant_attr() const;
  private:
  bool _internal_has_participant_attr() const;
  public:
  void clear_participant_attr();
  const ::apollo::cyber::proto::RtpsParticipantAttr& participant_attr() const;
  ::apollo::cyber::proto::RtpsParticipantAttr* release_participant_attr();
  ::apollo::cyber::proto::RtpsParticipantAttr* mutable_participant_attr();
  void set_allocated_participant_attr(::apollo::cyber::proto::RtpsParticipantAttr* participant_attr);
  private:
  const ::apollo::cyber::proto::RtpsParticipantAttr& _internal_participant_attr() const;
  ::apollo::cyber::proto::RtpsParticipantAttr* _internal_mutable_participant_attr();
  public:
  void unsafe_arena_set_allocated_participant_attr(
      ::apollo::cyber::proto::RtpsParticipantAttr* participant_attr);
  ::apollo::cyber::proto::RtpsParticipantAttr* unsafe_arena_release_participant_attr();

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  bool has_communication_mode() const;
  private:
  bool _internal_has_communication_mode() const;
  public:
  void clear_communication_mode();
  const ::apollo::cyber::proto::CommunicationMode& communication_mode() const;
  ::apollo::cyber::proto::CommunicationMode* release_communication_mode();
  ::apollo::cyber::proto::CommunicationMode* mutable_communication_mode();
  void set_allocated_communication_mode(::apollo::cyber::proto::CommunicationMode* communication_mode);
  private:
  const ::apollo::cyber::proto::CommunicationMode& _internal_communication_mode() const;
  ::apollo::cyber::proto::CommunicationMode* _internal_mutable_communication_mode();
  public:
  void unsafe_arena_set_allocated_communication_mode(
      ::apollo::cyber::proto::CommunicationMode* communication_mode);
  ::apollo::cyber::proto::CommunicationMode* unsafe_arena_release_communication_mode();

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  bool has_resource_limit() const;
  private:
  bool _internal_has_resource_limit() const;
  public:
  void clear_resource_limit();
  const ::apollo::cyber::proto::ResourceLimit& resource_limit() const;
  ::apollo::cyber::proto::ResourceLimit* release_resource_limit();
  ::apollo::cyber::proto::ResourceLimit* mutable_resource_limit();
  void set_allocated_resource_limit(::apollo::cyber::proto::ResourceLimit* resource_limit);
  private:
  const ::apollo::cyber::proto::ResourceLimit& _internal_resource_limit() const;
  ::apollo::cyber::proto::ResourceLimit* _internal_mutable_resource_limit();
  public:
  void unsafe_arena_set_allocated_resource_limit(
      ::apollo::cyber::proto::ResourceLimit* resource_limit);
  ::apollo::cyber::proto::ResourceLimit* unsafe_arena_release_resource_limit();

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.TransportConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::cyber::proto::ShmConf* shm_conf_;
  ::apollo::cyber::proto::RtpsParticipantAttr* participant_attr_;
  ::apollo::cyber::proto::CommunicationMode* communication_mode_;
  ::apollo::cyber::proto::ResourceLimit* resource_limit_;
  friend struct ::TableStruct_cyber_2fproto_2ftransport_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShmMulticastLocator

// optional string ip = 1;
inline bool ShmMulticastLocator::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShmMulticastLocator::has_ip() const {
  return _internal_has_ip();
}
inline void ShmMulticastLocator::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShmMulticastLocator::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmMulticastLocator.ip)
  return _internal_ip();
}
inline void ShmMulticastLocator::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmMulticastLocator.ip)
}
inline std::string* ShmMulticastLocator::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmMulticastLocator.ip)
  return _internal_mutable_ip();
}
inline const std::string& ShmMulticastLocator::_internal_ip() const {
  return ip_.Get();
}
inline void ShmMulticastLocator::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShmMulticastLocator::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ShmMulticastLocator.ip)
}
inline void ShmMulticastLocator::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ShmMulticastLocator.ip)
}
inline void ShmMulticastLocator::set_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ShmMulticastLocator.ip)
}
inline std::string* ShmMulticastLocator::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShmMulticastLocator::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmMulticastLocator.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShmMulticastLocator::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmMulticastLocator.ip)
}

// optional uint32 port = 2;
inline bool ShmMulticastLocator::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShmMulticastLocator::has_port() const {
  return _internal_has_port();
}
inline void ShmMulticastLocator::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShmMulticastLocator::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShmMulticastLocator::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmMulticastLocator.port)
  return _internal_port();
}
inline void ShmMulticastLocator::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void ShmMulticastLocator::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmMulticastLocator.port)
}

// -------------------------------------------------------------------

// ShmConf

// optional string notifier_type = 1;
inline bool ShmConf::_internal_has_notifier_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShmConf::has_notifier_type() const {
  return _internal_has_notifier_type();
}
inline void ShmConf::clear_notifier_type() {
  notifier_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShmConf::notifier_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmConf.notifier_type)
  return _internal_notifier_type();
}
inline void ShmConf::set_notifier_type(const std::string& value) {
  _internal_set_notifier_type(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmConf.notifier_type)
}
inline std::string* ShmConf::mutable_notifier_type() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmConf.notifier_type)
  return _internal_mutable_notifier_type();
}
inline const std::string& ShmConf::_internal_notifier_type() const {
  return notifier_type_.Get();
}
inline void ShmConf::_internal_set_notifier_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShmConf::set_notifier_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ShmConf.notifier_type)
}
inline void ShmConf::set_notifier_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ShmConf.notifier_type)
}
inline void ShmConf::set_notifier_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  notifier_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ShmConf.notifier_type)
}
inline std::string* ShmConf::_internal_mutable_notifier_type() {
  _has_bits_[0] |= 0x00000001u;
  return notifier_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShmConf::release_notifier_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmConf.notifier_type)
  if (!_internal_has_notifier_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return notifier_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShmConf::set_allocated_notifier_type(std::string* notifier_type) {
  if (notifier_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notifier_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notifier_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmConf.notifier_type)
}

// optional string shm_type = 2;
inline bool ShmConf::_internal_has_shm_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShmConf::has_shm_type() const {
  return _internal_has_shm_type();
}
inline void ShmConf::clear_shm_type() {
  shm_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShmConf::shm_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmConf.shm_type)
  return _internal_shm_type();
}
inline void ShmConf::set_shm_type(const std::string& value) {
  _internal_set_shm_type(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ShmConf.shm_type)
}
inline std::string* ShmConf::mutable_shm_type() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmConf.shm_type)
  return _internal_mutable_shm_type();
}
inline const std::string& ShmConf::_internal_shm_type() const {
  return shm_type_.Get();
}
inline void ShmConf::_internal_set_shm_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShmConf::set_shm_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.ShmConf.shm_type)
}
inline void ShmConf::set_shm_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  shm_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.ShmConf.shm_type)
}
inline void ShmConf::set_shm_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  shm_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.ShmConf.shm_type)
}
inline std::string* ShmConf::_internal_mutable_shm_type() {
  _has_bits_[0] |= 0x00000002u;
  return shm_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShmConf::release_shm_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmConf.shm_type)
  if (!_internal_has_shm_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return shm_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShmConf::set_allocated_shm_type(std::string* shm_type) {
  if (shm_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shm_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shm_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmConf.shm_type)
}

// optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
inline bool ShmConf::_internal_has_shm_locator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || shm_locator_ != nullptr);
  return value;
}
inline bool ShmConf::has_shm_locator() const {
  return _internal_has_shm_locator();
}
inline void ShmConf::clear_shm_locator() {
  if (shm_locator_ != nullptr) shm_locator_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::cyber::proto::ShmMulticastLocator& ShmConf::_internal_shm_locator() const {
  const ::apollo::cyber::proto::ShmMulticastLocator* p = shm_locator_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::ShmMulticastLocator&>(
      ::apollo::cyber::proto::_ShmMulticastLocator_default_instance_);
}
inline const ::apollo::cyber::proto::ShmMulticastLocator& ShmConf::shm_locator() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ShmConf.shm_locator)
  return _internal_shm_locator();
}
inline void ShmConf::unsafe_arena_set_allocated_shm_locator(
    ::apollo::cyber::proto::ShmMulticastLocator* shm_locator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shm_locator_);
  }
  shm_locator_ = shm_locator;
  if (shm_locator) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.ShmConf.shm_locator)
}
inline ::apollo::cyber::proto::ShmMulticastLocator* ShmConf::release_shm_locator() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::ShmMulticastLocator* temp = shm_locator_;
  shm_locator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::ShmMulticastLocator* ShmConf::unsafe_arena_release_shm_locator() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.ShmConf.shm_locator)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::ShmMulticastLocator* temp = shm_locator_;
  shm_locator_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ShmMulticastLocator* ShmConf::_internal_mutable_shm_locator() {
  _has_bits_[0] |= 0x00000004u;
  if (shm_locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ShmMulticastLocator>(GetArena());
    shm_locator_ = p;
  }
  return shm_locator_;
}
inline ::apollo::cyber::proto::ShmMulticastLocator* ShmConf::mutable_shm_locator() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.ShmConf.shm_locator)
  return _internal_mutable_shm_locator();
}
inline void ShmConf::set_allocated_shm_locator(::apollo::cyber::proto::ShmMulticastLocator* shm_locator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shm_locator_;
  }
  if (shm_locator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shm_locator);
    if (message_arena != submessage_arena) {
      shm_locator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shm_locator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shm_locator_ = shm_locator;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.ShmConf.shm_locator)
}

// -------------------------------------------------------------------

// RtpsParticipantAttr

// optional int32 lease_duration = 1 [default = 12];
inline bool RtpsParticipantAttr::_internal_has_lease_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtpsParticipantAttr::has_lease_duration() const {
  return _internal_has_lease_duration();
}
inline void RtpsParticipantAttr::clear_lease_duration() {
  lease_duration_ = 12;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpsParticipantAttr::_internal_lease_duration() const {
  return lease_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpsParticipantAttr::lease_duration() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.lease_duration)
  return _internal_lease_duration();
}
inline void RtpsParticipantAttr::_internal_set_lease_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lease_duration_ = value;
}
inline void RtpsParticipantAttr::set_lease_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lease_duration(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.lease_duration)
}

// optional int32 announcement_period = 2 [default = 3];
inline bool RtpsParticipantAttr::_internal_has_announcement_period() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RtpsParticipantAttr::has_announcement_period() const {
  return _internal_has_announcement_period();
}
inline void RtpsParticipantAttr::clear_announcement_period() {
  announcement_period_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpsParticipantAttr::_internal_announcement_period() const {
  return announcement_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RtpsParticipantAttr::announcement_period() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.announcement_period)
  return _internal_announcement_period();
}
inline void RtpsParticipantAttr::_internal_set_announcement_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  announcement_period_ = value;
}
inline void RtpsParticipantAttr::set_announcement_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_announcement_period(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.announcement_period)
}

// optional uint32 domain_id_gain = 3 [default = 200];
inline bool RtpsParticipantAttr::_internal_has_domain_id_gain() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RtpsParticipantAttr::has_domain_id_gain() const {
  return _internal_has_domain_id_gain();
}
inline void RtpsParticipantAttr::clear_domain_id_gain() {
  domain_id_gain_ = 200u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpsParticipantAttr::_internal_domain_id_gain() const {
  return domain_id_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpsParticipantAttr::domain_id_gain() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.domain_id_gain)
  return _internal_domain_id_gain();
}
inline void RtpsParticipantAttr::_internal_set_domain_id_gain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  domain_id_gain_ = value;
}
inline void RtpsParticipantAttr::set_domain_id_gain(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_domain_id_gain(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.domain_id_gain)
}

// optional uint32 port_base = 4 [default = 10000];
inline bool RtpsParticipantAttr::_internal_has_port_base() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RtpsParticipantAttr::has_port_base() const {
  return _internal_has_port_base();
}
inline void RtpsParticipantAttr::clear_port_base() {
  port_base_ = 10000u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpsParticipantAttr::_internal_port_base() const {
  return port_base_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RtpsParticipantAttr::port_base() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RtpsParticipantAttr.port_base)
  return _internal_port_base();
}
inline void RtpsParticipantAttr::_internal_set_port_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_base_ = value;
}
inline void RtpsParticipantAttr::set_port_base(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_base(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RtpsParticipantAttr.port_base)
}

// -------------------------------------------------------------------

// CommunicationMode

// optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
inline bool CommunicationMode::_internal_has_same_proc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommunicationMode::has_same_proc() const {
  return _internal_has_same_proc();
}
inline void CommunicationMode::clear_same_proc() {
  same_proc_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::_internal_same_proc() const {
  return static_cast< ::apollo::cyber::proto::OptionalMode >(same_proc_);
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::same_proc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.same_proc)
  return _internal_same_proc();
}
inline void CommunicationMode::_internal_set_same_proc(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  same_proc_ = value;
}
inline void CommunicationMode::set_same_proc(::apollo::cyber::proto::OptionalMode value) {
  _internal_set_same_proc(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.same_proc)
}

// optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
inline bool CommunicationMode::_internal_has_diff_proc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommunicationMode::has_diff_proc() const {
  return _internal_has_diff_proc();
}
inline void CommunicationMode::clear_diff_proc() {
  diff_proc_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::_internal_diff_proc() const {
  return static_cast< ::apollo::cyber::proto::OptionalMode >(diff_proc_);
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::diff_proc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.diff_proc)
  return _internal_diff_proc();
}
inline void CommunicationMode::_internal_set_diff_proc(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  diff_proc_ = value;
}
inline void CommunicationMode::set_diff_proc(::apollo::cyber::proto::OptionalMode value) {
  _internal_set_diff_proc(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.diff_proc)
}

// optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
inline bool CommunicationMode::_internal_has_diff_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommunicationMode::has_diff_host() const {
  return _internal_has_diff_host();
}
inline void CommunicationMode::clear_diff_host() {
  diff_host_ = 3;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::_internal_diff_host() const {
  return static_cast< ::apollo::cyber::proto::OptionalMode >(diff_host_);
}
inline ::apollo::cyber::proto::OptionalMode CommunicationMode::diff_host() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.CommunicationMode.diff_host)
  return _internal_diff_host();
}
inline void CommunicationMode::_internal_set_diff_host(::apollo::cyber::proto::OptionalMode value) {
  assert(::apollo::cyber::proto::OptionalMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  diff_host_ = value;
}
inline void CommunicationMode::set_diff_host(::apollo::cyber::proto::OptionalMode value) {
  _internal_set_diff_host(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.CommunicationMode.diff_host)
}

// -------------------------------------------------------------------

// ResourceLimit

// optional uint32 max_history_depth = 1 [default = 1000];
inline bool ResourceLimit::_internal_has_max_history_depth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceLimit::has_max_history_depth() const {
  return _internal_has_max_history_depth();
}
inline void ResourceLimit::clear_max_history_depth() {
  max_history_depth_ = 1000u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimit::_internal_max_history_depth() const {
  return max_history_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimit::max_history_depth() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.ResourceLimit.max_history_depth)
  return _internal_max_history_depth();
}
inline void ResourceLimit::_internal_set_max_history_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_history_depth_ = value;
}
inline void ResourceLimit::set_max_history_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_history_depth(value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.ResourceLimit.max_history_depth)
}

// -------------------------------------------------------------------

// TransportConf

// optional .apollo.cyber.proto.ShmConf shm_conf = 1;
inline bool TransportConf::_internal_has_shm_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shm_conf_ != nullptr);
  return value;
}
inline bool TransportConf::has_shm_conf() const {
  return _internal_has_shm_conf();
}
inline void TransportConf::clear_shm_conf() {
  if (shm_conf_ != nullptr) shm_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::cyber::proto::ShmConf& TransportConf::_internal_shm_conf() const {
  const ::apollo::cyber::proto::ShmConf* p = shm_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::ShmConf&>(
      ::apollo::cyber::proto::_ShmConf_default_instance_);
}
inline const ::apollo::cyber::proto::ShmConf& TransportConf::shm_conf() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.shm_conf)
  return _internal_shm_conf();
}
inline void TransportConf::unsafe_arena_set_allocated_shm_conf(
    ::apollo::cyber::proto::ShmConf* shm_conf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shm_conf_);
  }
  shm_conf_ = shm_conf;
  if (shm_conf) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.TransportConf.shm_conf)
}
inline ::apollo::cyber::proto::ShmConf* TransportConf::release_shm_conf() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::cyber::proto::ShmConf* temp = shm_conf_;
  shm_conf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::ShmConf* TransportConf::unsafe_arena_release_shm_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.shm_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::cyber::proto::ShmConf* temp = shm_conf_;
  shm_conf_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ShmConf* TransportConf::_internal_mutable_shm_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (shm_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ShmConf>(GetArena());
    shm_conf_ = p;
  }
  return shm_conf_;
}
inline ::apollo::cyber::proto::ShmConf* TransportConf::mutable_shm_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.shm_conf)
  return _internal_mutable_shm_conf();
}
inline void TransportConf::set_allocated_shm_conf(::apollo::cyber::proto::ShmConf* shm_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shm_conf_;
  }
  if (shm_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shm_conf);
    if (message_arena != submessage_arena) {
      shm_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shm_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shm_conf_ = shm_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.shm_conf)
}

// optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
inline bool TransportConf::_internal_has_participant_attr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || participant_attr_ != nullptr);
  return value;
}
inline bool TransportConf::has_participant_attr() const {
  return _internal_has_participant_attr();
}
inline void TransportConf::clear_participant_attr() {
  if (participant_attr_ != nullptr) participant_attr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::cyber::proto::RtpsParticipantAttr& TransportConf::_internal_participant_attr() const {
  const ::apollo::cyber::proto::RtpsParticipantAttr* p = participant_attr_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::RtpsParticipantAttr&>(
      ::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_);
}
inline const ::apollo::cyber::proto::RtpsParticipantAttr& TransportConf::participant_attr() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.participant_attr)
  return _internal_participant_attr();
}
inline void TransportConf::unsafe_arena_set_allocated_participant_attr(
    ::apollo::cyber::proto::RtpsParticipantAttr* participant_attr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(participant_attr_);
  }
  participant_attr_ = participant_attr;
  if (participant_attr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.TransportConf.participant_attr)
}
inline ::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::release_participant_attr() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::RtpsParticipantAttr* temp = participant_attr_;
  participant_attr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::unsafe_arena_release_participant_attr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.participant_attr)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::cyber::proto::RtpsParticipantAttr* temp = participant_attr_;
  participant_attr_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::_internal_mutable_participant_attr() {
  _has_bits_[0] |= 0x00000002u;
  if (participant_attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::RtpsParticipantAttr>(GetArena());
    participant_attr_ = p;
  }
  return participant_attr_;
}
inline ::apollo::cyber::proto::RtpsParticipantAttr* TransportConf::mutable_participant_attr() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.participant_attr)
  return _internal_mutable_participant_attr();
}
inline void TransportConf::set_allocated_participant_attr(::apollo::cyber::proto::RtpsParticipantAttr* participant_attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete participant_attr_;
  }
  if (participant_attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(participant_attr);
    if (message_arena != submessage_arena) {
      participant_attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, participant_attr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  participant_attr_ = participant_attr;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.participant_attr)
}

// optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
inline bool TransportConf::_internal_has_communication_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || communication_mode_ != nullptr);
  return value;
}
inline bool TransportConf::has_communication_mode() const {
  return _internal_has_communication_mode();
}
inline void TransportConf::clear_communication_mode() {
  if (communication_mode_ != nullptr) communication_mode_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::cyber::proto::CommunicationMode& TransportConf::_internal_communication_mode() const {
  const ::apollo::cyber::proto::CommunicationMode* p = communication_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::CommunicationMode&>(
      ::apollo::cyber::proto::_CommunicationMode_default_instance_);
}
inline const ::apollo::cyber::proto::CommunicationMode& TransportConf::communication_mode() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.communication_mode)
  return _internal_communication_mode();
}
inline void TransportConf::unsafe_arena_set_allocated_communication_mode(
    ::apollo::cyber::proto::CommunicationMode* communication_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(communication_mode_);
  }
  communication_mode_ = communication_mode;
  if (communication_mode) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.TransportConf.communication_mode)
}
inline ::apollo::cyber::proto::CommunicationMode* TransportConf::release_communication_mode() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::CommunicationMode* temp = communication_mode_;
  communication_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::CommunicationMode* TransportConf::unsafe_arena_release_communication_mode() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.communication_mode)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::CommunicationMode* temp = communication_mode_;
  communication_mode_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::CommunicationMode* TransportConf::_internal_mutable_communication_mode() {
  _has_bits_[0] |= 0x00000004u;
  if (communication_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::CommunicationMode>(GetArena());
    communication_mode_ = p;
  }
  return communication_mode_;
}
inline ::apollo::cyber::proto::CommunicationMode* TransportConf::mutable_communication_mode() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.communication_mode)
  return _internal_mutable_communication_mode();
}
inline void TransportConf::set_allocated_communication_mode(::apollo::cyber::proto::CommunicationMode* communication_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete communication_mode_;
  }
  if (communication_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(communication_mode);
    if (message_arena != submessage_arena) {
      communication_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, communication_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  communication_mode_ = communication_mode;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.communication_mode)
}

// optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
inline bool TransportConf::_internal_has_resource_limit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || resource_limit_ != nullptr);
  return value;
}
inline bool TransportConf::has_resource_limit() const {
  return _internal_has_resource_limit();
}
inline void TransportConf::clear_resource_limit() {
  if (resource_limit_ != nullptr) resource_limit_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::cyber::proto::ResourceLimit& TransportConf::_internal_resource_limit() const {
  const ::apollo::cyber::proto::ResourceLimit* p = resource_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::cyber::proto::ResourceLimit&>(
      ::apollo::cyber::proto::_ResourceLimit_default_instance_);
}
inline const ::apollo::cyber::proto::ResourceLimit& TransportConf::resource_limit() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.TransportConf.resource_limit)
  return _internal_resource_limit();
}
inline void TransportConf::unsafe_arena_set_allocated_resource_limit(
    ::apollo::cyber::proto::ResourceLimit* resource_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_limit_);
  }
  resource_limit_ = resource_limit;
  if (resource_limit) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.cyber.proto.TransportConf.resource_limit)
}
inline ::apollo::cyber::proto::ResourceLimit* TransportConf::release_resource_limit() {
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::cyber::proto::ResourceLimit* temp = resource_limit_;
  resource_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::cyber::proto::ResourceLimit* TransportConf::unsafe_arena_release_resource_limit() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.TransportConf.resource_limit)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::cyber::proto::ResourceLimit* temp = resource_limit_;
  resource_limit_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ResourceLimit* TransportConf::_internal_mutable_resource_limit() {
  _has_bits_[0] |= 0x00000008u;
  if (resource_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ResourceLimit>(GetArena());
    resource_limit_ = p;
  }
  return resource_limit_;
}
inline ::apollo::cyber::proto::ResourceLimit* TransportConf::mutable_resource_limit() {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.TransportConf.resource_limit)
  return _internal_mutable_resource_limit();
}
inline void TransportConf::set_allocated_resource_limit(::apollo::cyber::proto::ResourceLimit* resource_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_limit_;
  }
  if (resource_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_limit);
    if (message_arena != submessage_arena) {
      resource_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  resource_limit_ = resource_limit;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.TransportConf.resource_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::cyber::proto::OptionalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::cyber::proto::OptionalMode>() {
  return ::apollo::cyber::proto::OptionalMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cyber_2fproto_2ftransport_5fconf_2eproto
