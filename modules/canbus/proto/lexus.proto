syntax = "proto2";

package apollo.canbus;

message Hazard_lights_rpt_214 {
  // Report Message
  // [] [0|1]
  optional bool output_value = 1;
  // [] [0|1]
  optional bool commanded_value = 2;
  // [] [0|1]
  optional bool manual_input = 3;
  // [] [0|1]
  optional bool vehicle_fault = 4;
  // [] [0|1]
  optional bool pacmod_fault = 5;
  // [] [0|1]
  optional bool override_active = 6;
  // [] [0|1]
  optional bool output_reported_fault = 7;
  // [] [0|1]
  optional bool input_output_fault = 8;
  // [] [0|1]
  optional bool enabled = 9;
  // [] [0|1]
  optional bool command_output_fault = 10;
}

message Steering_cmd_12c {
  // Report Message
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [rad] [-32.768|32.767]
  optional double position = 5;
  // [rad/s] [0|65.535]
  optional double rotation_rate = 6;
}

message Dash_controls_right_rpt_210 {
  // Control Message
  enum Output_valueType {
    OUTPUT_VALUE_DASH_CONTROL_NONE = 0;
    OUTPUT_VALUE_DASH_CONTROL_OK = 1;
    OUTPUT_VALUE_DASH_CONTROL_LEFT = 2;
    OUTPUT_VALUE_DASH_CONTROL_RIGHT = 3;
    OUTPUT_VALUE_DASH_CONTROL_UP = 4;
    OUTPUT_VALUE_DASH_CONTROL_DOWN = 5;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_DASH_CONTROL_NONE = 0;
    COMMANDED_VALUE_DASH_CONTROL_OK = 1;
    COMMANDED_VALUE_DASH_CONTROL_LEFT = 2;
    COMMANDED_VALUE_DASH_CONTROL_RIGHT = 3;
    COMMANDED_VALUE_DASH_CONTROL_UP = 4;
    COMMANDED_VALUE_DASH_CONTROL_DOWN = 5;
  }
  enum Manual_inputType {
    MANUAL_INPUT_DASH_CONTROL_NONE = 0;
    MANUAL_INPUT_DASH_CONTROL_OK = 1;
    MANUAL_INPUT_DASH_CONTROL_LEFT = 2;
    MANUAL_INPUT_DASH_CONTROL_RIGHT = 3;
    MANUAL_INPUT_DASH_CONTROL_UP = 4;
    MANUAL_INPUT_DASH_CONTROL_DOWN = 5;
  }
  // [] [0|255]
  optional Output_valueType output_value = 1;
  // [] [0|255]
  optional Commanded_valueType commanded_value = 2;
  // [] [0|1]
  optional bool vehicle_fault = 3;
  // [] [0|1]
  optional bool pacmod_fault = 4;
  // [] [0|1]
  optional bool override_active = 5;
  // [] [0|1]
  optional bool output_reported_fault = 6;
  // [] [0|1]
  optional bool input_output_fault = 7;
  // [] [0|1]
  optional bool enabled = 8;
  // [] [0|1]
  optional bool command_output_fault = 9;
  // [] [0|255]
  optional Manual_inputType manual_input = 10;
}

message Dash_controls_left_cmd_10c {
  // Report Message
  enum Dash_controls_buttonType {
    DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE = 0;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_OK = 1;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT = 2;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT = 3;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_UP = 4;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN = 5;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|255]
  optional Dash_controls_buttonType dash_controls_button = 5;
}

message Steering_rpt_22c {
  // Report Message
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [rad] [-32.768|32.767]
  optional double manual_input = 8;
  // [rad] [-32.768|32.767]
  optional double commanded_value = 9;
  // [rad] [-32.768|32.767]
  optional double output_value = 10;
}

message Turn_aux_rpt_330 {
  // Report Message
  // [] [0|1]
  optional bool pass_blinker_bulb_on_is_valid = 1;
  // [] [0|1]
  optional bool pass_blinker_bulb_on = 2;
  // [] [0|1]
  optional bool driver_blinker_bulb_on_is_valid = 3;
  // [] [0|1]
  optional bool driver_blinker_bulb_on = 4;
}

message Headlight_rpt_218 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_HEADLIGHTS_OFF = 0;
    OUTPUT_VALUE_LOW_BEAMS = 1;
    OUTPUT_VALUE_HIGH_BEAMS = 2;
  }
  enum Manual_inputType {
    MANUAL_INPUT_HEADLIGHTS_OFF = 0;
    MANUAL_INPUT_LOW_BEAMS = 1;
    MANUAL_INPUT_HIGH_BEAMS = 2;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_HEADLIGHTS_OFF = 0;
    COMMANDED_VALUE_LOW_BEAMS = 1;
    COMMANDED_VALUE_HIGH_BEAMS = 2;
  }
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|2]
  optional Output_valueType output_value = 8;
  // [] [0|2]
  optional Manual_inputType manual_input = 9;
  // [] [0|2]
  optional Commanded_valueType commanded_value = 10;
}

message Hazard_lights_cmd_114 {
  // Control Message
  // [] [0|1]
  optional bool hazard_lights_cmd = 1;
  // [] [0|1]
  optional bool ignore_overrides = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool enable = 4;
  // [] [0|1]
  optional bool clear_faults = 5;
}

message Dash_controls_left_rpt_20c {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_DASH_CONTROL_NONE = 0;
    OUTPUT_VALUE_DASH_CONTROL_OK = 1;
    OUTPUT_VALUE_DASH_CONTROL_LEFT = 2;
    OUTPUT_VALUE_DASH_CONTROL_RIGHT = 3;
    OUTPUT_VALUE_DASH_CONTROL_UP = 4;
    OUTPUT_VALUE_DASH_CONTROL_DOWN = 5;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_DASH_CONTROL_NONE = 0;
    COMMANDED_VALUE_DASH_CONTROL_OK = 1;
    COMMANDED_VALUE_DASH_CONTROL_LEFT = 2;
    COMMANDED_VALUE_DASH_CONTROL_RIGHT = 3;
    COMMANDED_VALUE_DASH_CONTROL_UP = 4;
    COMMANDED_VALUE_DASH_CONTROL_DOWN = 5;
  }
  enum Manual_inputType {
    MANUAL_INPUT_DASH_CONTROL_NONE = 0;
    MANUAL_INPUT_DASH_CONTROL_OK = 1;
    MANUAL_INPUT_DASH_CONTROL_LEFT = 2;
    MANUAL_INPUT_DASH_CONTROL_RIGHT = 3;
    MANUAL_INPUT_DASH_CONTROL_UP = 4;
    MANUAL_INPUT_DASH_CONTROL_DOWN = 5;
  }
  // [] [0|255]
  optional Output_valueType output_value = 1;
  // [] [0|255]
  optional Commanded_valueType commanded_value = 2;
  // [] [0|255]
  optional Manual_inputType manual_input = 3;
  // [] [0|1]
  optional bool vehicle_fault = 4;
  // [] [0|1]
  optional bool pacmod_fault = 5;
  // [] [0|1]
  optional bool override_active = 6;
  // [] [0|1]
  optional bool output_reported_fault = 7;
  // [] [0|1]
  optional bool input_output_fault = 8;
  // [] [0|1]
  optional bool enabled = 9;
  // [] [0|1]
  optional bool command_output_fault = 10;
}

message Headlight_aux_rpt_318 {
  // Report Message
  enum Headlights_modeType {
    HEADLIGHTS_MODE_HEADLIGHTS_OFF = 0;
    HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY = 1;
    HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE = 2;
    HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE = 3;
  }
  // [] [0|1]
  optional bool headlights_mode_is_valid = 1;
  // [] [0|3]
  optional Headlights_modeType headlights_mode = 2;
  // [] [0|1]
  optional bool fog_lights_on_is_valid = 3;
  // [] [0|1]
  optional bool fog_lights_on = 4;
  // [] [0|1]
  optional bool headlights_on_bright_is_valid = 5;
  // [] [0|1]
  optional bool headlights_on_bright = 6;
  // [] [0|1]
  optional bool headlights_on_is_valid = 7;
  // [] [0|1]
  optional bool headlights_on = 8;
}

message Dash_controls_right_cmd_110 {
  // Report Message
  enum Dash_controls_buttonType {
    DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE = 0;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_OK = 1;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT = 2;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT = 3;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_UP = 4;
    DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN = 5;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|255]
  optional Dash_controls_buttonType dash_controls_button = 5;
}

message Wiper_cmd_134 {
  // Control Message
  enum Wiper_cmdType {
    WIPER_CMD_WIPERS_OFF = 0;
    WIPER_CMD_INTERMITTENT_1 = 1;
    WIPER_CMD_INTERMITTENT_2 = 2;
    WIPER_CMD_INTERMITTENT_3 = 3;
    WIPER_CMD_INTERMITTENT_4 = 4;
    WIPER_CMD_INTERMITTENT_5 = 5;
    WIPER_CMD_LOW = 6;
    WIPER_CMD_HIGH = 7;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|7]
  optional Wiper_cmdType wiper_cmd = 4;
  // [] [0|1]
  optional bool clear_faults = 5;
}

message Wiper_rpt_234 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_WIPERS_OFF = 0;
    OUTPUT_VALUE_INTERMITTENT_1 = 1;
    OUTPUT_VALUE_INTERMITTENT_2 = 2;
    OUTPUT_VALUE_INTERMITTENT_3 = 3;
    OUTPUT_VALUE_INTERMITTENT_4 = 4;
    OUTPUT_VALUE_INTERMITTENT_5 = 5;
    OUTPUT_VALUE_LOW = 6;
    OUTPUT_VALUE_HIGH = 7;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_WIPERS_OFF = 0;
    COMMANDED_VALUE_INTERMITTENT_1 = 1;
    COMMANDED_VALUE_INTERMITTENT_2 = 2;
    COMMANDED_VALUE_INTERMITTENT_3 = 3;
    COMMANDED_VALUE_INTERMITTENT_4 = 4;
    COMMANDED_VALUE_INTERMITTENT_5 = 5;
    COMMANDED_VALUE_LOW = 6;
    COMMANDED_VALUE_HIGH = 7;
  }
  enum Manual_inputType {
    MANUAL_INPUT_WIPERS_OFF = 0;
    MANUAL_INPUT_INTERMITTENT_1 = 1;
    MANUAL_INPUT_INTERMITTENT_2 = 2;
    MANUAL_INPUT_INTERMITTENT_3 = 3;
    MANUAL_INPUT_INTERMITTENT_4 = 4;
    MANUAL_INPUT_INTERMITTENT_5 = 5;
    MANUAL_INPUT_LOW = 6;
    MANUAL_INPUT_HIGH = 7;
  }
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|7]
  optional Output_valueType output_value = 8;
  // [] [0|7]
  optional Commanded_valueType commanded_value = 9;
  // [] [0|7]
  optional Manual_inputType manual_input = 10;
}

message Turn_rpt_230 {
  // Report Message
  enum Manual_inputType {
    MANUAL_INPUT_RIGHT = 0;
    MANUAL_INPUT_NONE = 1;
    MANUAL_INPUT_LEFT = 2;
    MANUAL_INPUT_HAZARD = 3;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_RIGHT = 0;
    COMMANDED_VALUE_NONE = 1;
    COMMANDED_VALUE_LEFT = 2;
    COMMANDED_VALUE_HAZARD = 3;
  }
  enum Output_valueType {
    OUTPUT_VALUE_RIGHT = 0;
    OUTPUT_VALUE_NONE = 1;
    OUTPUT_VALUE_LEFT = 2;
    OUTPUT_VALUE_HAZARD = 3;
  }
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|3]
  optional Manual_inputType manual_input = 8;
  // [] [0|3]
  optional Commanded_valueType commanded_value = 9;
  // [] [0|3]
  optional Output_valueType output_value = 10;
}

message Headlight_cmd_118 {
  // Control Message
  enum Headlight_cmdType {
    HEADLIGHT_CMD_HEADLIGHTS_OFF = 0;
    HEADLIGHT_CMD_LOW_BEAMS = 1;
    HEADLIGHT_CMD_HIGH_BEAMS = 2;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|2]
  optional Headlight_cmdType headlight_cmd = 5;
}

message Door_rpt_417 {
  // Report Message
  // [] [0|1]
  optional bool fuel_door_open_is_valid = 1;
  // [] [0|1]
  optional bool trunk_open_is_valid = 2;
  // [] [0|1]
  optional bool hood_open_is_valid = 3;
  // [] [0|1]
  optional bool rear_pass_door_open_is_valid = 4;
  // [] [0|1]
  optional bool rear_driver_door_open_is_valid = 5;
  // [] [0|1]
  optional bool pass_door_open_is_valid = 6;
  // [] [0|1]
  optional bool driver_door_open_is_valid = 7;
  // [] [0|1]
  optional bool fuel_door_open = 8;
  // [] [0|1]
  optional bool trunk_open = 9;
  // [] [0|1]
  optional bool hood_open = 10;
  // [] [0|1]
  optional bool rear_pass_door_open = 11;
  // [] [0|1]
  optional bool rear_driver_door_open = 12;
  // [] [0|1]
  optional bool pass_door_open = 13;
  // [] [0|1]
  optional bool driver_door_open = 14;
}

message Component_rpt_20 {
  // Report Message
  enum Component_typeType {
    COMPONENT_TYPE_PACMOD = 0;
    COMPONENT_TYPE_PACMINI = 1;
    COMPONENT_TYPE_PACMICRO = 2;
  }
  enum Component_funcType {
    COMPONENT_FUNC_PACMOD = 0;
    COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN = 1;
    COMPONENT_FUNC_ACCELERATOR_AND_BRAKING = 2;
    COMPONENT_FUNC_BRAKING = 3;
    COMPONENT_FUNC_SHIFTING = 4;
    COMPONENT_FUNC_STEERING = 5;
    COMPONENT_FUNC_E_SHIFTER = 6;
    COMPONENT_FUNC_WATCHDOG = 7;
  }
  // [] [0|255]
  optional Component_typeType component_type = 1;
  // [] [0|255]
  optional Component_funcType component_func = 2;
  // [] [0|15]
  optional int32 counter = 3;
  // [] [0|15]
  optional int32 complement = 4;
  // [] [0|1]
  optional bool config_fault = 5;
}

message Wheel_speed_rpt_407 {
  // Report Message
  // [rad/s] [-327.68|327.67]
  optional double wheel_spd_rear_right = 1;
  // [rad/s] [-327.68|327.67]
  optional double wheel_spd_rear_left = 2;
  // [rad/s] [-327.68|327.67]
  optional double wheel_spd_front_right = 3;
  // [rad/s] [-327.68|327.67]
  optional double wheel_spd_front_left = 4;
}

message Steering_motor_rpt_3_406 {
  // Report Message
  // [N-m] [-2147483.648|2147483.647]
  optional double torque_output = 1;
  // [N-m] [-2147483.648|2147483.647]
  optional double torque_input = 2;
}

message Steering_motor_rpt_2_405 {
  // Report Message
  // [deg C] [-32808|32727]
  optional int32 encoder_temperature = 1;
  // [deg C] [-32808|32727]
  optional int32 motor_temperature = 2;
  // [rev/s] [-2147483.648|2147483.647]
  optional double angular_speed = 3;
}

message Steering_motor_rpt_1_404 {
  // Report Message
  // [amps] [0|4294967.295]
  optional double motor_current = 1;
  // [amps] [-2147483.648|2147483.647]
  optional double shaft_position = 2;
}

message Brake_motor_rpt_3_403 {
  // Report Message
  // [N-m] [-2147483.648|2147483.647]
  optional double torque_output = 1;
  // [N-m] [-2147483.648|2147483.647]
  optional double torque_input = 2;
}

message Brake_motor_rpt_2_402 {
  // Report Message
  // [deg C] [-32808|32727]
  optional int32 encoder_temperature = 1;
  // [deg C] [-32808|32727]
  optional int32 motor_temperature = 2;
  // [rev/s] [0|4294967.295]
  optional double angular_speed = 3;
}

message Brake_motor_rpt_1_401 {
  // Report Message
  // [amps] [0|4294967.295]
  optional double motor_current = 1;
  // [radians] [-2147483.648|2147483.647]
  optional double shaft_position = 2;
}

message Wiper_aux_rpt_334 {
  // Report Message
  // [] [0|1]
  optional bool spray_empty_is_valid = 1;
  // [] [0|1]
  optional bool spray_empty = 2;
  // [] [0|1]
  optional bool spray_near_empty_is_valid = 3;
  // [] [0|1]
  optional bool spray_near_empty = 4;
  // [] [0|1]
  optional bool rear_spraying_is_valid = 5;
  // [] [0|1]
  optional bool rear_spraying = 6;
  // [] [0|1]
  optional bool rear_wiping_is_valid = 7;
  // [] [0|1]
  optional bool rear_wiping = 8;
  // [] [0|1]
  optional bool front_spraying_is_valid = 9;
  // [] [0|1]
  optional bool front_spraying = 10;
  // [] [0|1]
  optional bool front_wiping_is_valid = 11;
  // [] [0|1]
  optional bool front_wiping = 12;
}

message Shift_aux_rpt_328 {
  // Report Message
  // [] [0|1]
  optional bool speed_interlock_active_is_valid = 1;
  // [] [0|1]
  optional bool speed_interlock_active = 2;
  // [] [0|1]
  optional bool brake_interlock_active_is_valid = 3;
  // [] [0|1]
  optional bool brake_interlock_active = 4;
  // [] [0|1]
  optional bool stay_in_neutral_mode_is_valid = 5;
  // [] [0|1]
  optional bool stay_in_neutral_mode = 6;
  // [] [0|1]
  optional bool between_gears_is_valid = 7;
  // [] [0|1]
  optional bool between_gears = 8;
}

message Accel_rpt_200 {
  // Report Message
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool output_reported_fault = 3;
  // [] [0|1]
  optional bool input_output_fault = 4;
  // [] [0|1]
  optional bool command_output_fault = 5;
  // [] [0|1]
  optional bool override_active = 6;
  // [] [0|1]
  optional bool enabled = 7;
  // [] [0|1]
  optional double manual_input = 8;
  // [] [0|1]
  optional double commanded_value = 9;
  // [] [0|1]
  optional double output_value = 10;
}

message Brake_rpt_204 {
  // Report Message
  // [] [0|1]
  optional bool command_output_fault = 1;
  // [] [0|1]
  optional bool vehicle_fault = 2;
  // [] [0|1]
  optional bool pacmod_fault = 3;
  // [] [0|1]
  optional bool override_active = 4;
  // [] [0|1]
  optional bool output_reported_fault = 5;
  // [] [0|1]
  optional bool input_output_fault = 6;
  // [] [0|1]
  optional bool enabled = 7;
  // [] [0|1]
  optional double manual_input = 8;
  // [] [0|1]
  optional double commanded_value = 9;
  // [] [0|1]
  optional double output_value = 10;
}

message Horn_cmd_11c {
  // Report Message
  enum Horn_cmdType {
    HORN_CMD_OFF = 0;
    HORN_CMD_ON = 1;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|1]
  optional Horn_cmdType horn_cmd = 5;
}

message Global_rpt_10 {
  // Report Message
  enum Pacmod_system_enabledType {
    PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED = 0;
    PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED = 1;
  }
  enum Pacmod_system_override_activeType {
    PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN = 0;
    PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN = 1;
  }
  enum Brk_can_timeoutType {
    BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT = 0;
    BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT = 1;
  }
  // [] [0|1]
  optional bool config_fault_active = 1;
  // [] [0|1]
  optional bool pacmod_subsystem_timeout = 2;
  // [] [0|1]
  optional Pacmod_system_enabledType pacmod_system_enabled = 3;
  // [] [0|1]
  optional Pacmod_system_override_activeType pacmod_system_override_active = 4;
  // [] [0|1]
  optional bool pacmod_system_fault_active = 5;
  // [] [0|1]
  optional bool veh_can_timeout = 6;
  // [] [0|1]
  optional bool str_can_timeout = 7;
  // [] [0|1]
  optional Brk_can_timeoutType brk_can_timeout = 8;
  // [] [0|1]
  optional bool usr_can_timeout = 9;
  // [] [0|65535]
  optional int32 usr_can_read_errors = 10;
}

message Accel_aux_rpt_300 {
  // Report Message
  // [] [0|1]
  optional bool user_interaction_is_valid = 1;
  // [] [0|1]
  optional bool user_interaction = 2;
  // [] [0|1]
  optional bool raw_pedal_force_is_valid = 3;
  // [] [-32.768|32.767]
  optional double raw_pedal_force = 4;
  // [] [0|1]
  optional bool raw_pedal_pos_is_valid = 5;
  // [] [-32.768|32.767]
  optional double raw_pedal_pos = 6;
}

message Cruise_control_buttons_rpt_208 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_CRUISE_CONTROL_NONE = 0;
    OUTPUT_VALUE_CRUISE_CONTROL_CNCL = 1;
    OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER = 2;
    OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER = 3;
    OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC = 4;
    OUTPUT_VALUE_CRUISE_CONTROL_RES_INC = 5;
    OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF = 6;
  }
  enum Manual_inputType {
    MANUAL_INPUT_CRUISE_CONTROL_NONE = 0;
    MANUAL_INPUT_CRUISE_CONTROL_CNCL = 1;
    MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER = 2;
    MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER = 3;
    MANUAL_INPUT_CRUISE_CONTROL_SET_DEC = 4;
    MANUAL_INPUT_CRUISE_CONTROL_RES_INC = 5;
    MANUAL_INPUT_CRUISE_CONTROL_ON_OFF = 6;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_CRUISE_CONTROL_NONE = 0;
    COMMANDED_VALUE_CRUISE_CONTROL_CNCL = 1;
    COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER = 2;
    COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER = 3;
    COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC = 4;
    COMMANDED_VALUE_CRUISE_CONTROL_RES_INC = 5;
    COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF = 6;
  }
  // [] [0|255]
  optional Output_valueType output_value = 1;
  // [] [0|255]
  optional Manual_inputType manual_input = 2;
  // [] [0|255]
  optional Commanded_valueType commanded_value = 3;
  // [] [0|1]
  optional bool vehicle_fault = 4;
  // [] [0|1]
  optional bool pacmod_fault = 5;
  // [] [0|1]
  optional bool override_active = 6;
  // [] [0|1]
  optional bool output_reported_fault = 7;
  // [] [0|1]
  optional bool input_output_fault = 8;
  // [] [0|1]
  optional bool enabled = 9;
  // [] [0|1]
  optional bool command_output_fault = 10;
}

message Vehicle_speed_rpt_400 {
  // Report Message
  enum Vehicle_speed_validType {
    VEHICLE_SPEED_VALID_INVALID = 0;
    VEHICLE_SPEED_VALID_VALID = 1;
  }
  // [m/s] [-327.68|327.67]
  optional double vehicle_speed = 1;
  // [] [0|1]
  optional Vehicle_speed_validType vehicle_speed_valid = 2;
}

message Brake_aux_rpt_304 {
  // Report Message
  // [] [0|1]
  optional bool brake_on_off_is_valid = 1;
  // [] [0|1]
  optional bool brake_on_off = 2;
  // [] [0|1]
  optional bool user_interaction_is_valid = 3;
  // [] [0|1]
  optional bool user_interaction = 4;
  // [] [0|1]
  optional bool raw_brake_pressure_is_valid = 5;
  // [] [-32.768|32.767]
  optional double raw_brake_pressure = 6;
  // [] [0|1]
  optional bool raw_pedal_force_is_valid = 7;
  // [] [-32.768|32.767]
  optional double raw_pedal_force = 8;
  // [] [0|1]
  optional bool raw_pedal_pos_is_valid = 9;
  // [] [-32.768|32.767]
  optional double raw_pedal_pos = 10;
}

message Media_controls_cmd_120 {
  // Report Message
  enum Media_controls_cmdType {
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE = 0;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND = 1;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE = 2;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP = 5;
    MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN = 6;
  }
  // [] [0|255]
  optional Media_controls_cmdType media_controls_cmd = 1;
  // [] [0|1]
  optional bool ignore_overrides = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|1]
  optional bool enable = 5;
}

message Cruise_control_buttons_cmd_108 {
  // Control Message
  enum Cruise_control_buttonType {
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE = 0;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL = 1;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER = 2;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER = 3;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC = 4;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC = 5;
    CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF = 6;
  }
  // [] [0|255]
  optional Cruise_control_buttonType cruise_control_button = 1;
  // [] [0|1]
  optional bool ignore_overrides = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool enable = 4;
  // [] [0|1]
  optional bool clear_faults = 5;
}

message Parking_brake_cmd_124 {
  // Control Message
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool parking_brake_cmd = 4;
  // [] [0|1]
  optional bool clear_faults = 5;
}

message Horn_rpt_21c {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_OFF = 0;
    OUTPUT_VALUE_ON = 1;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_OFF = 0;
    COMMANDED_VALUE_ON = 1;
  }
  enum Manual_inputType {
    MANUAL_INPUT_OFF = 0;
    MANUAL_INPUT_ON = 1;
  }
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|1]
  optional Output_valueType output_value = 8;
  // [] [0|1]
  optional Commanded_valueType commanded_value = 9;
  // [] [0|1]
  optional Manual_inputType manual_input = 10;
}

message Shift_rpt_228 {
  // Report Message
  enum Manual_inputType {
    MANUAL_INPUT_PARK = 0;
    MANUAL_INPUT_REVERSE = 1;
    MANUAL_INPUT_NEUTRAL = 2;
    MANUAL_INPUT_FORWARD_HIGH = 3;
    MANUAL_INPUT_LOW = 4;
    MANUAL_INPUT_BETWEEN_GEARS = 5;
    MANUAL_INPUT_ERROR = 6;
    MANUAL_INPUT_NONE = 7;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_PARK = 0;
    COMMANDED_VALUE_REVERSE = 1;
    COMMANDED_VALUE_NEUTRAL = 2;
    COMMANDED_VALUE_FORWARD_HIGH = 3;
    COMMANDED_VALUE_LOW = 4;
    COMMANDED_VALUE_NONE = 7;
  }
  enum Output_valueType {
    OUTPUT_VALUE_PARK = 0;
    OUTPUT_VALUE_REVERSE = 1;
    OUTPUT_VALUE_NEUTRAL = 2;
    OUTPUT_VALUE_FORWARD_HIGH = 3;
    OUTPUT_VALUE_LOW = 4;
    OUTPUT_VALUE_BETWEEN_GEARS = 5;
    OUTPUT_VALUE_ERROR = 6;
    OUTPUT_VALUE_NONE = 7;
  }
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|4]
  optional Manual_inputType manual_input = 8;
  // [] [0|4]
  optional Commanded_valueType commanded_value = 9;
  // [] [0|4]
  optional Output_valueType output_value = 10;
}

message Shift_cmd_128 {
  // Control Message
  enum Shift_cmdType {
    SHIFT_CMD_PARK = 0;
    SHIFT_CMD_REVERSE = 1;
    SHIFT_CMD_NEUTRAL = 2;
    SHIFT_CMD_FORWARD_HIGH = 3;
    SHIFT_CMD_LOW = 4;
    SHIFT_CMD_NONE = 7;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // FORWARD is also HIGH on vehicles with LOW/HIGH, PARK and LOW only available
  // on certain Vehicles. [] [0|4]
  optional Shift_cmdType shift_cmd = 5;
}

message Accel_cmd_100 {
  // Control Message
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|1]
  optional double accel_cmd = 5;
}

message Parking_brake_rpt_224 {
  // Report Message
  // [] [0|1]
  optional bool vehicle_fault = 1;
  // [] [0|1]
  optional bool pacmod_fault = 2;
  // [] [0|1]
  optional bool override_active = 3;
  // [] [0|1]
  optional bool output_reported_fault = 4;
  // [] [0|1]
  optional bool input_output_fault = 5;
  // [] [0|1]
  optional bool enabled = 6;
  // [] [0|1]
  optional bool command_output_fault = 7;
  // [] [0|1]
  optional bool output_value = 8;
  // [] [0|1]
  optional bool commanded_value = 9;
  // [] [0|1]
  optional bool manual_input = 10;
}

message Brake_cmd_104 {
  // Control Message
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|1]
  optional double brake_cmd = 5;
}

message Media_controls_rpt_220 {
  // Report Message
  enum Output_valueType {
    OUTPUT_VALUE_MEDIA_CONTROL_NONE = 0;
    OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND = 1;
    OUTPUT_VALUE_MEDIA_CONTROL_MUTE = 2;
    OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3;
    OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4;
    OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP = 5;
    OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN = 6;
  }
  enum Commanded_valueType {
    COMMANDED_VALUE_MEDIA_CONTROL_NONE = 0;
    COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND = 1;
    COMMANDED_VALUE_MEDIA_CONTROL_MUTE = 2;
    COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3;
    COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4;
    COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP = 5;
    COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN = 6;
  }
  enum Manual_inputType {
    MANUAL_INPUT_MEDIA_CONTROL_NONE = 0;
    MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND = 1;
    MANUAL_INPUT_MEDIA_CONTROL_MUTE = 2;
    MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3;
    MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4;
    MANUAL_INPUT_MEDIA_CONTROL_VOL_UP = 5;
    MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN = 6;
  }
  // [] [0|255]
  optional Output_valueType output_value = 1;
  // [] [0|255]
  optional Commanded_valueType commanded_value = 2;
  // [] [0|255]
  optional Manual_inputType manual_input = 3;
  // [] [0|1]
  optional bool vehicle_fault = 4;
  // [] [0|1]
  optional bool pacmod_fault = 5;
  // [] [0|1]
  optional bool override_active = 6;
  // [] [0|1]
  optional bool output_reported_fault = 7;
  // [] [0|1]
  optional bool input_output_fault = 8;
  // [] [0|1]
  optional bool enabled = 9;
  // [] [0|1]
  optional bool command_output_fault = 10;
}

message Steering_aux_rpt_32c {
  // Report Message
  // [] [0|1]
  optional bool user_interaction_is_valid = 1;
  // [] [0|1]
  optional bool user_interaction = 2;
  // [] [0|1]
  optional bool rotation_rate_is_valid = 3;
  // [rad/s] [0|65.535]
  optional double rotation_rate = 4;
  // [] [0|1]
  optional bool raw_torque_is_valid = 5;
  // [] [-32.768|32.767]
  optional double raw_torque = 6;
  // [] [0|1]
  optional bool raw_position_is_valid = 7;
  // [] [-32.768|32.767]
  optional double raw_position = 8;
}

message Lat_lon_heading_rpt_40e {
  // Report Message
  // [deg] [-327.68|327.67]
  optional double heading = 1;
  // [sec] [-128|127]
  optional int32 longitude_seconds = 2;
  // [min] [-128|127]
  optional int32 longitude_minutes = 3;
  // [deg] [-128|127]
  optional int32 longitude_degrees = 4;
  // [sec] [-128|127]
  optional int32 latitude_seconds = 5;
  // [min] [-128|127]
  optional int32 latitude_minutes = 6;
  // [deg] [-128|127]
  optional int32 latitude_degrees = 7;
}

message Yaw_rate_rpt_40d {
  // Report Message
  // [rad/s] [-327.68|327.67]
  optional double yaw_rate = 1;
}

message Date_time_rpt_40f {
  // Report Message
  // [sec] [0|60]
  optional int32 time_second = 1;
  // [min] [0|60]
  optional int32 time_minute = 2;
  // [hr] [0|23]
  optional int32 time_hour = 3;
  // [dy] [1|31]
  optional int32 date_day = 4;
  // [mon] [1|12]
  optional int32 date_month = 5;
  // [yr] [2000|2255]
  optional int32 date_year = 6;
}

message Vin_rpt_414 {
  // Report Message
  // [] [0|0]
  optional int32 veh_serial = 1;
  // [] [0|0]
  optional int32 veh_my_code = 2;
  // [] [0|0]
  optional int32 veh_mfg_code = 3;
}

message Occupancy_rpt_415 {
  // Report Message
  // [] [0|1]
  optional bool rear_seatbelt_buckled_is_valid = 1;
  // [] [0|1]
  optional bool pass_seatbelt_buckled_is_valid = 2;
  // [] [0|1]
  optional bool driver_seatbelt_buckled_is_valid = 3;
  // [] [0|1]
  optional bool rear_seat_occupied_is_valid = 4;
  // [] [0|1]
  optional bool pass_seat_occupied_is_valid = 5;
  // [] [0|1]
  optional bool driver_seat_occupied_is_valid = 6;
  // [] [0|1]
  optional bool rear_seatbelt_buckled = 7;
  // [] [0|1]
  optional bool pass_seatbelt_buckled = 8;
  // [] [0|1]
  optional bool driver_seatbelt_buckled = 9;
  // [] [0|1]
  optional bool rear_seat_occupied = 10;
  // [] [0|1]
  optional bool pass_seat_occupied = 11;
  // [] [0|1]
  optional bool driver_seat_occupied = 12;
}

message Interior_lights_rpt_416 {
  // Report Message
  enum Dim_levelType {
    DIM_LEVEL_DIM_LEVEL_MIN = 0;
    DIM_LEVEL_DIM_LEVEL_1 = 1;
    DIM_LEVEL_DIM_LEVEL_2 = 2;
    DIM_LEVEL_DIM_LEVEL_3 = 3;
    DIM_LEVEL_DIM_LEVEL_4 = 4;
    DIM_LEVEL_DIM_LEVEL_5 = 5;
    DIM_LEVEL_DIM_LEVEL_6 = 6;
    DIM_LEVEL_DIM_LEVEL_7 = 7;
    DIM_LEVEL_DIM_LEVEL_8 = 8;
    DIM_LEVEL_DIM_LEVEL_9 = 9;
    DIM_LEVEL_DIM_LEVEL_10 = 10;
    DIM_LEVEL_DIM_LEVEL_11 = 11;
    DIM_LEVEL_DIM_LEVEL_MAX = 12;
  }
  // [] [0|1]
  optional bool dim_level_is_valid = 1;
  // [] [0|1]
  optional bool mood_lights_on_is_valid = 2;
  // [] [0|1]
  optional bool rear_dome_lights_on_is_valid = 3;
  // [] [0|1]
  optional bool front_dome_lights_on_is_valid = 4;
  // [] [0|12]
  optional Dim_levelType dim_level = 5;
  // [] [0|1]
  optional bool mood_lights_on = 6;
  // [] [0|1]
  optional bool rear_dome_lights_on = 7;
  // [] [0|1]
  optional bool front_dome_lights_on = 8;
}

message Turn_cmd_130 {
  // Control Message
  enum Turn_signal_cmdType {
    TURN_SIGNAL_CMD_RIGHT = 0;
    TURN_SIGNAL_CMD_NONE = 1;
    TURN_SIGNAL_CMD_LEFT = 2;
    TURN_SIGNAL_CMD_HAZARD = 3;
  }
  // [] [0|1]
  optional bool ignore_overrides = 1;
  // [] [0|1]
  optional bool enable = 2;
  // [] [0|1]
  optional bool clear_override = 3;
  // [] [0|1]
  optional bool clear_faults = 4;
  // [] [0|3]
  optional Turn_signal_cmdType turn_signal_cmd = 5;
}

message Detected_object_rpt_411 {
  // Report Message
  // [m] [0|16777.215]
  optional double front_object_distance_high_res = 1;
  // [m] [0|16777.215]
  optional double front_object_distance_low_res = 2;
}

message Veh_specific_rpt_1_412 {
  // Report Message
  // [] [0|0]
  optional int32 shift_pos_2 = 1;
  // [] [0|0]
  optional int32 shift_pos_1 = 2;
}

message Veh_dynamics_rpt_413 {
  // Report Message
  // [] [-32.768|32.767]
  optional double veh_g_forces = 1;
}

message Rear_lights_rpt_418 {
  // Report Message
  // [] [0|1]
  optional bool reverse_lights_on_is_valid = 1;
  // [] [0|1]
  optional bool brake_lights_on_is_valid = 2;
  // [] [0|1]
  optional bool reverse_lights_on = 3;
  // [] [0|1]
  optional bool brake_lights_on = 4;
}

message Lexus {
  optional Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;  // report message
  optional Steering_cmd_12c steering_cmd_12c = 2;            // report message
  optional Dash_controls_right_rpt_210 dash_controls_right_rpt_210 =
      3;  // control message
  optional Dash_controls_left_cmd_10c dash_controls_left_cmd_10c =
      4;                                                     // report message
  optional Steering_rpt_22c steering_rpt_22c = 5;            // report message
  optional Turn_aux_rpt_330 turn_aux_rpt_330 = 6;            // report message
  optional Headlight_rpt_218 headlight_rpt_218 = 7;          // report message
  optional Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;  // control message
  optional Dash_controls_left_rpt_20c dash_controls_left_rpt_20c =
      9;                                                      // report message
  optional Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;  // report message
  optional Dash_controls_right_cmd_110 dash_controls_right_cmd_110 =
      11;                                                 // report message
  optional Wiper_cmd_134 wiper_cmd_134 = 12;              // control message
  optional Wiper_rpt_234 wiper_rpt_234 = 13;              // report message
  optional Turn_rpt_230 turn_rpt_230 = 14;                // report message
  optional Headlight_cmd_118 headlight_cmd_118 = 15;      // control message
  optional Door_rpt_417 door_rpt_417 = 16;                // report message
  optional Component_rpt_20 component_rpt_20 = 17;        // report message
  optional Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;  // report message
  optional Steering_motor_rpt_3_406 steering_motor_rpt_3_406 =
      19;  // report message
  optional Steering_motor_rpt_2_405 steering_motor_rpt_2_405 =
      20;  // report message
  optional Steering_motor_rpt_1_404 steering_motor_rpt_1_404 =
      21;                                                     // report message
  optional Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;  // report message
  optional Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;  // report message
  optional Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;  // report message
  optional Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;          // report message
  optional Shift_aux_rpt_328 shift_aux_rpt_328 = 26;          // report message
  optional Accel_rpt_200 accel_rpt_200 = 27;                  // report message
  optional Brake_rpt_204 brake_rpt_204 = 28;                  // report message
  optional Horn_cmd_11c horn_cmd_11c = 29;                    // report message
  optional Global_rpt_10 global_rpt_10 = 30;                  // report message
  optional Accel_aux_rpt_300 accel_aux_rpt_300 = 31;          // report message
  optional Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 =
      32;                                                     // report message
  optional Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;  // report message
  optional Brake_aux_rpt_304 brake_aux_rpt_304 = 34;          // report message
  optional Media_controls_cmd_120 media_controls_cmd_120 =
      35;  // report message
  optional Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 =
      36;                                                     // control message
  optional Parking_brake_cmd_124 parking_brake_cmd_124 = 37;  // control message
  optional Horn_rpt_21c horn_rpt_21c = 38;                    // report message
  optional Shift_rpt_228 shift_rpt_228 = 39;                  // report message
  optional Shift_cmd_128 shift_cmd_128 = 40;                  // control message
  optional Accel_cmd_100 accel_cmd_100 = 41;                  // control message
  optional Parking_brake_rpt_224 parking_brake_rpt_224 = 42;  // report message
  optional Brake_cmd_104 brake_cmd_104 = 43;                  // control message
  optional Media_controls_rpt_220 media_controls_rpt_220 =
      44;                                                   // report message
  optional Steering_aux_rpt_32c steering_aux_rpt_32c = 45;  // report message
  optional Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e =
      46;                                             // report message
  optional Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;    // report message
  optional Date_time_rpt_40f date_time_rpt_40f = 48;  // report message
  optional Vin_rpt_414 vin_rpt_414 = 49;              // report message
  optional Occupancy_rpt_415 occupancy_rpt_415 = 50;  // report message
  optional Interior_lights_rpt_416 interior_lights_rpt_416 =
      51;                                   // report message
  optional Turn_cmd_130 turn_cmd_130 = 52;  // control message
  optional Detected_object_rpt_411 detected_object_rpt_411 =
      53;  // report message
  optional Veh_specific_rpt_1_412 veh_specific_rpt_1_412 =
      54;                                                   // report message
  optional Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;  // report message
  optional Rear_lights_rpt_418 rear_lights_rpt_418 = 56;    // report message
}
