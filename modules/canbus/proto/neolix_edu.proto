syntax = "proto2";

package apollo.canbus;

message Aeb_systemstate_11 {
  // Report Message
  // 0x00:read only;0x01:brake enable [] [0|1]
  optional int32 aeb_state = 1;
  // 0x00:off;0x01:on [] [0|1]
  optional bool aeb_brakestate = 2;
  // 0x0:Nomal;0x1:Level 1;0x2:Level 2;0x3:Level 3;0x4:Level 4;0x5:Level
  // 5;0x6:Reserved;0x7:Reserved [] [0|5]
  optional int32 faultrank = 3;
  // [] [0|120]
  optional int32 currenttemperature = 4;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_f1_stop = 5;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_f2_stop = 6;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_f3_stop = 7;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_f4_stop = 8;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_b1_stop = 9;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_b2_stop = 10;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_b3_stop = 11;
  // 0x0:Normal;0x1:ActivateBrake [] [0|1]
  optional bool pas_b4_stop = 12;
  // [] [0|15]
  optional int32 aeb_livecounter_rear = 13;
  // [bit] [0|255]
  optional int32 aeb_cheksum = 14;
}

message Vcu_vehicle_fault_response_201 {
  // Report Message
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 vehicle_error_indicationsvcu = 1;
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 brake_system_errorehb = 2;
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 eps_error = 3;
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 motor_error = 4;
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 epb_error = 5;
  // 0x0: no error;0x1: level 1 error;0x2: level 2 error;0x3: level 3 error;0x4:
  // level 4 error;0x5: level 5 error [] [0|0]
  optional int32 high_voltage_battery_errorbcu = 6;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_losscommuni = 7;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_reqsignalno = 8;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_low_power = 9;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_highvolt = 10;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_vehicle_flt = 11;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_press_emerg = 12;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_press_remot = 13;
  // 0x0:Normal;0x1:Failure [] [0|0]
  optional bool automode_exit_reason_pdu_control = 14;
  // [] [0|0]
  optional int32 vcu_faultrept_alivecounter = 15;
  // [] [0|0]
  optional int32 vcu_faultrept_checksum = 16;
}

message Vcu_powerstatus_214 {
  // Report Message
  // 0x0:OFF;0x1:IG_ON;0x2:Power_ON;0x3:Auto_ON;0x4:Reserved;0x5:Reserved;0x6:Reserved;0x7:Reserved
  // [bit] [0|7]
  optional int32 vcu_powermode = 1;
  // 0x0:Not Available;0x1:Invalid;0x2:Valid;0x3:Reserved [bit] [0|3]
  optional int32 vcu_powermodevalid = 2;
  // 0x0:NotActivate;0x1:Activate [bit] [0|1]
  optional bool replacebatterystateindication = 3;
  // 0x0:Normal AEB;0x1:Forbidden [bit] [0|1]
  optional bool forbidden_aeb_signal = 4;
  // [A] [-400|910.68]
  optional double bcu_chargedischargecurrent = 5;
  // [V] [0|655.35]
  optional double bcu_batt_internalvoltage = 6;
  // [bit] [0|15]
  optional int32 vcu_driverinfo_alivecounter = 7;
  // [bit] [0|255]
  optional int32 vcu_driverinfo_checksum = 8;
}

message Ads_light_horn_command_310 {
  // Control Message
  // 0x0:disable ;0x1:enable [bit] [0|1]
  optional bool turn_right_light_command = 1;
  // 0x0:disable ;0x1:enable ;0x2-0x3:Reserved  [bit] [0|1]
  optional bool turn_left_light_command = 2;
  // [bit] [0|1]
  optional bool horn_command = 3;
  // 0x0:Off;0x1:LowBeam;0x2:HighBeam [bit] [0|1]
  optional int32 beam_command = 4;
  // [] [0|0]
  optional int32 auto_drivercmd_alivecounter = 5;
  // [] [0|0]
  optional int32 auto_drivercmd_checksum = 6;
}

message Ads_brake_command_46 {
  // Control Message
  // 0x0:disable ;0x1:enable [] [0|0]
  optional bool drive_enable = 1;
  // [] [0|0]
  optional int32 auto_brake_command = 2;
  // 0x0:Release ;0x1:Apply  [] [0|0]
  optional bool auto_parking_command = 3;
  // 0x0:off;0x1:on [] [0|0]
  optional bool epb_rampauxiliarycommand = 4;
  // [] [0|0]
  optional int32 auto_drivercmd_alivecounter = 5;
  // [] [0|0]
  optional int32 auto_drivercmd_checksum = 6;
}

message Vcu_brake_report_47 {
  // Report Message
  enum Control_mode_respType {
    CONTROL_MODE_RESP_STANDBY = 0;
    CONTROL_MODE_RESP_AUTO_DRIVE = 1;
    CONTROL_MODE_RESP_NET_DRIVE = 2;
    CONTROL_MODE_RESP_REMOTE_CONTROL = 3;
    CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4;
  }
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool brake_enable_resp = 1;
  // 0x0:Standby;0x1:auto drive;0x2:net drive;0x3:remote control;0x4:emergency
  // brake;0x5~0x7:Reserved [bit] [0|7]
  optional Control_mode_respType control_mode_resp = 2;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_real_brake_valid = 3;
  // [] [0|0]
  optional int32 vcu_real_brake = 4;
  // 0x0:EPB_Released;0x1:EPB_Applied;0x2:EPB_Releasing;0x3:EPB_Fault;0x4:EPB_Applying
  // [] [0|0]
  optional int32 vcu_real_parking_status = 5;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_real_parking_valid = 6;
  // 0x0:off;0x1:on [] [0|0]
  optional bool rampauxiliaryindication = 7;
  // [°] [0|45]
  optional double vehicleslope = 8;
  // [] [0|0]
  optional int32 vcu_brakerept_alivecounter = 9;
  // [] [0|0]
  optional int32 vcu_brakerept_checksum = 10;
}

message Vcu_eps_report_57 {
  // Report Message
  enum Control_mode_respType {
    CONTROL_MODE_RESP_STANDBY = 0;
    CONTROL_MODE_RESP_AUTO_DRIVE = 1;
    CONTROL_MODE_RESP_NET_DRIVE = 2;
    CONTROL_MODE_RESP_REMOTE_CONTROL = 3;
    CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4;
  }
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool drive_enable_resp = 1;
  // 0x0:Standby;0x1:auto drive;0x2:net drive;0x3:remote control;0x4:emergency
  // brake;0x5~0x7:Reserved [] [0|7]
  optional Control_mode_respType control_mode_resp = 2;
  // 0x0:not overflow;0x1:overflow [] [0|0]
  optional bool vcu_eps_report = 3;
  // ; [] [0|0]
  optional double vcu_real_angle = 4;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_real_angle_valid = 5;
  // 0x0:disable;0x1:enable; [] [0|0]
  optional bool vcu_target_angle_valid = 6;
  // [deg] [-380|380]
  optional double vcu_target_angle = 7;
  // [] [0|0]
  optional int32 vcu_eps_rept_alivecounter = 8;
  // [] [0|0]
  optional int32 vcu_eps_rept_checksum = 9;
}

message Ads_eps_command_56 {
  // Control Message
  // 0x0:disable ;0x1:enable [] [0|0]
  optional bool drive_enable = 1;
  // [] [0|0]
  optional double auto_target_angle = 2;
  // [] [0|0]
  optional int32 auto_drivercmd_alivecounter = 3;
  // [] [0|0]
  optional int32 auto_drivercmd_checksum = 4;
}

message Ads_drive_command_50 {
  // Control Message
  enum Auto_shift_commandType {
    AUTO_SHIFT_COMMAND_N = 0;
    AUTO_SHIFT_COMMAND_D = 1;
    AUTO_SHIFT_COMMAND_R = 2;
    AUTO_SHIFT_COMMAND_RESERVED = 3;
  }
  // 0x0:disable ;0x1:enable [] [0|0]
  optional bool drive_enable = 1;
  // 0x0:N ;0x1:D ;0x2:R ;0x3:Reserved  [] [0|3]
  optional Auto_shift_commandType auto_shift_command = 2;
  // [] [0|0]
  optional double auto_drive_torque = 3;
  // [] [0|0]
  optional int32 auto_drivercmd_alivecounter = 4;
  // [] [0|0]
  optional int32 auto_drivercmd_checksum = 5;
}

message Vcu_drive_report_52 {
  // Report Message
  enum Control_mode_respType {
    CONTROL_MODE_RESP_STANDBY = 0;
    CONTROL_MODE_RESP_AUTO_DRIVE = 1;
    CONTROL_MODE_RESP_NET_DRIVE = 2;
    CONTROL_MODE_RESP_REMOTE_CONTROL = 3;
    CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4;
  }
  enum Vcu_real_shiftType {
    VCU_REAL_SHIFT_N = 0;
    VCU_REAL_SHIFT_D = 1;
    VCU_REAL_SHIFT_R = 2;
    VCU_REAL_SHIFT_RESERVED = 3;
  }
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool drive_enable_resp = 1;
  // 0x0:Standby;0x1:auto drive;0x2:net drive;0x3:remote control;0x4:emergency
  // brake;0x5~0x7:Reserved [] [0|7]
  optional Control_mode_respType control_mode_resp = 2;
  // 0x0:N档;0x1:D档;0x2:R档;0x3:Reserved [] [0|3]
  optional Vcu_real_shiftType vcu_real_shift = 3;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_real_shift_valid = 4;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_real_torque_valid = 5;
  // [Nm] [0|0]
  optional double vcu_real_torque = 6;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_limitedtorquemode = 7;
  // [] [0|0]
  optional int32 vcu_driverept_alivecounter = 8;
  // [] [0|0]
  optional int32 vcu_driverept_checksum = 9;
}

message Ads_diagnosis_628 {
  // Control Message
  // 0x0:Nomal;0x1:Level 1;0x2:Level 2;0x3:Level 3;0x4:Level 4;0x5:Level
  // 5;0x6:Reserved;0x7:Reserved [bit] [0|5]
  optional int32 faultrank = 1;
  // [] [0|65535]
  optional int32 adas_fault_code = 2;
  // [bit] [0|255]
  optional int32 adas_softwareversion = 3;
  // [bit] [0|255]
  optional int32 adas_hardwareversion = 4;
}

message Vcu_nm_401 {
  // Report Message
  // 0x0:Inactive;0x1:Active [bit] [0|1]
  optional bool vcu_sleepcommand = 1;
}

message Vcu_vehicle_status_report_101 {
  // Report Message
  enum Control_mode_respType {
    CONTROL_MODE_RESP_STANDBY = 0;
    CONTROL_MODE_RESP_AUTO_DRIVE = 1;
    CONTROL_MODE_RESP_NET_DRIVE = 2;
    CONTROL_MODE_RESP_REMOTE_CONTROL = 3;
    CONTROL_MODE_RESP_EMERGENCY_BRAKE = 4;
  }
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool drive_enable_resp = 1;
  // 0x0:Disconnect;0x1:Connect [] [0|0]
  optional bool vcu_highvoltagecircuitstate = 2;
  // 0x0: Disable;0x1:Enable [] [0|0]
  optional bool vcu_dcdc_enabledstates = 3;
  // 0x0:Standby;0x1:auto drive;0x2:net drive;0x3:remote control;0x4:emergency
  // brake;0x5~0x7:Reserved [] [0|7]
  optional Control_mode_respType control_mode_resp = 4;
  // [Km/h] [0|460.69]
  optional double vcu_vehicle_speed = 5;
  // 0x0:Reserved;0x1:Start;0x2:Stop;0x3:Invalid   [] [0|0]
  optional int32 vcu_lowbatterychargingfunctionst = 6;
  // [%] [0|100]
  optional int32 vcu_display_soc = 7;
  // [] [0|0]
  optional double vcu_motor_speed = 8;
  // 0x0:Standby Status;0x1:Forward Mode;0x2:Reverse Mode [] [0|0]
  optional int32 vcu_motor_direction = 9;
  // 0x0:disable;0x1:enable [] [0|0]
  optional bool vcu_motor_speed_valid = 10;
  // [] [0|0]
  optional int32 vcu_statusrept_alivecounter = 11;
  // [] [0|0]
  optional int32 vcu_statusrept_checksum = 12;
}

message Vcu_vehicle_info_response_502 {
  // Report Message
  // [] [0|16777215]
  optional int32 vehicle_softwareversion_indicati = 1;
  // [] [0|15]
  optional int32 project = 2;
  // [] [0|15]
  optional int32 manufacturer = 3;
  // [] [0|255]
  optional int32 year = 4;
  // [] [1|12]
  optional int32 month = 5;
  // [] [1|31]
  optional int32 day = 6;
  // [] [0|32767]
  optional int32 vehicle_serial_number = 7;
}

message Aeb_diagnosis1_626 {
  // Report Message
  // [bit] [0.0|255.0]
  optional double aeb_softwareversion = 1;
  // [bit] [0.0|255.0]
  optional double aeb_hardwareversion = 2;
}

message Aeb_diagresp_718 {
  // Report Message
  // [bit] [0.0|1.0]
  optional bool aeb_diagresp = 1;
}

message Pas_1st_data_311 {
  // Report Message
  // phy=int*2;0xFF:no obstacle [cm] [0|510]
  optional double pasdistance4 = 1;
  // phy=int*2;0xFF:no obstacle [cm] [0|510]
  optional double pasdistance3 = 2;
  // 0x0:Invalid;0x1:Valid [bit] [0|1]
  optional bool pas_f1_status = 3;
  // 0x0:Invalid;0x1:Valid [bit] [0|1]
  optional bool pas_f2_status = 4;
  // 0x0:Invalid;0x1:Valid [bit] [0|1]
  optional bool pas_f3_status = 5;
  // 0x0:Invalid;0x1:Valid [bit] [0|1]
  optional bool pas_f4_status = 6;
  // phy=int*2;0xFF:no obstacle [cm] [0|510]
  optional double pasdistance2 = 7;
  // [cm] [0|510]
  optional double pasdistance1 = 8;
}

message Pas_2nd_data_312 {
  // Report Message
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool pas_b1_status = 1;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool pas_b2_status = 2;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool pas_b3_status = 3;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool pas_b4_status = 4;
  // phy=int*2;0xFF:no obstacle [cm] [0.0|510.0]
  optional double pasdistance1 = 5;
  // phy=int*2;0xFF:no obstacle [cm] [0.0|510.0]
  optional double pasdistance2 = 6;
  // phy=int*2;0xFF:no obstacle [cm] [0.0|510.0]
  optional double pasdistance3 = 7;
  // phy=int*2;0xFF:no obstacle [cm] [0.0|510.0]
  optional double pasdistance4 = 8;
}

message Aeb_wheelimpulse_355 {
  // Report Message
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1023.0]
  optional double flimpulse = 1;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool flimpulsevalid = 2;
  // [km/h] [0.0|1023.0]
  optional double frimpulse = 3;
  // [km/h] [0.0|1.0]
  optional bool frimpulsevalid = 4;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1023.0]
  optional double rlimpulse = 5;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool rlimpulsevalid = 6;
  // [km/h] [0.0|1023.0]
  optional double rrimpulse = 7;
  // [km/h] [0.0|1.0]
  optional bool rrimpulsevalid = 8;
  // [] [0.0|15.0]
  optional double alivecounter = 9;
  // [] [0.0|255.0]
  optional double checksum = 10;
}

message Aeb_rearwheelspeed_354 {
  // Report Message
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool wheelspeed_rl_valid = 1;
  // [km/h] [0.0|327.67]
  optional double wheelspeed_rl = 2;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool wheelspeed_rr_valid = 3;
  // [km/h] [0.0|327.67]
  optional double wheelspeed_rr = 4;
  // 0x0:Invalid;0x1:D;0x2:N;0x3:R [bit] [0.0|3.0]
  optional double wheelspeed_rl_direct = 5;
  // 0x0:Invalid;0x1:D;0x2:N;0x3:R [bit] [0.0|3.0]
  optional double wheelspeed_rr_direct = 6;
  // [] [0.0|15.0]
  optional double alivecounter_rear = 7;
  // [] [0.0|255.0]
  optional double checksum_rear = 8;
}

message Aeb_frontwheelspeed_353 {
  // Report Message
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool vehiclespeedvalid = 1;
  // [Km/h] [0.0|460.69]
  optional double vehiclespeed = 2;
  // 0x0:Invalid;0x1:D;0x2:N;0x3:R [bit] [0.0|3.0]
  optional double vehiclerealdirect = 3;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool wheelspeed_fl_valid = 4;
  // [km/h] [0.0|327.67]
  optional double wheelspeed_fl = 5;
  // 0x0:Invalid;0x1:Valid [bit] [0.0|1.0]
  optional bool wheelspeed_fr_valid = 6;
  // [km/h] [0.0|327.67]
  optional double wheelspeed_fr = 7;
  // 0x0:Invalid;0x1:D;0x2:N;0x3:R [bit] [0.0|3.0]
  optional double wheelspeed_fl_direct = 8;
  // 0x0:Invalid;0x1:D;0x2:N;0x3:R [bit] [0.0|3.0]
  optional double wheelspeed_fr_direct = 9;
  // [] [0.0|15.0]
  optional double alivecounter_front = 10;
  // [] [0.0|255.0]
  optional double checksum_front = 11;
}

message Neolix_edu {
  optional Aeb_systemstate_11 aeb_systemstate_11 = 1;  // report message
  optional Vcu_vehicle_fault_response_201 vcu_vehicle_fault_response_201 =
      2;                                                 // report message
  optional Vcu_powerstatus_214 vcu_powerstatus_214 = 3;  // report message
  optional Ads_light_horn_command_310 ads_light_horn_command_310 =
      4;                                                   // control message
  optional Ads_brake_command_46 ads_brake_command_46 = 5;  // control message
  optional Vcu_brake_report_47 vcu_brake_report_47 = 6;    // report message
  optional Vcu_eps_report_57 vcu_eps_report_57 = 7;        // report message
  optional Ads_eps_command_56 ads_eps_command_56 = 8;      // control message
  optional Ads_drive_command_50 ads_drive_command_50 = 9;  // control message
  optional Vcu_drive_report_52 vcu_drive_report_52 = 10;   // report message
  optional Ads_diagnosis_628 ads_diagnosis_628 = 11;       // control message
  optional Vcu_nm_401 vcu_nm_401 = 12;                     // report message
  optional Vcu_vehicle_status_report_101 vcu_vehicle_status_report_101 =
      13;  // report message
  optional Vcu_vehicle_info_response_502 vcu_vehicle_info_response_502 =
      14;                                                   // report message
  optional Aeb_diagnosis1_626 aeb_diagnosis1_626 = 15;      // report message
  optional Aeb_diagresp_718 aeb_diagresp_718 = 16;          // report message
  optional Pas_1st_data_311 pas_1st_data_311 = 17;          // report message
  optional Pas_2nd_data_312 pas_2nd_data_312 = 18;          // report message
  optional Aeb_wheelimpulse_355 aeb_wheelimpulse_355 = 19;  // report message
  optional Aeb_rearwheelspeed_354 aeb_rearwheelspeed_354 =
      20;  // report message
  optional Aeb_frontwheelspeed_353 aeb_frontwheelspeed_353 =
      21;  // report message
}
