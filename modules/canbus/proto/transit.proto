syntax = "proto2";

package apollo.canbus;

message Llc_vehiclelimits_24 {
  // Report Message
  // Steering angle feedback [deg] [0|4095]
  optional int32 llc_fbk_maxsteeringangle = 1;
  // Front brake pressure feedback [%] [0|113.8132]
  optional double llc_fbk_maxbrakepercent = 2;
}

message Adc_motioncontrol1_10 {
  // Control Message
  enum Adc_cmd_steeringcontrolmodeType {
    ADC_CMD_STEERINGCONTROLMODE_NONE = 0;
    ADC_CMD_STEERINGCONTROLMODE_ANGLE = 1;
    ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE = 2;
    ADC_CMD_STEERINGCONTROLMODE_RESERVED = 3;
  }
  enum Adc_cmd_gearType {
    ADC_CMD_GEAR_P_PARK = 0;
    ADC_CMD_GEAR_D_DRIVE = 1;
    ADC_CMD_GEAR_N_NEUTRAL = 2;
    ADC_CMD_GEAR_R_REVERSE = 3;
  }
  enum Adc_cmd_autonomyrequestType {
    ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED = 0;
    ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED = 1;
    ADC_CMD_AUTONOMYREQUEST_RESERVED0 = 2;
    ADC_CMD_AUTONOMYREQUEST_RESERVED1 = 3;
  }
  enum Adc_cmd_longitudinalcontrolmodeType {
    ADC_CMD_LONGITUDINALCONTROLMODE_NONE = 0;
    ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION = 1;
    ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE = 2;
    ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE = 3;
  }
  // Setpoint for steering wheel angle. Positive for CW [deg] [-1638.4|1638.35]
  optional double adc_cmd_steerwheelangle = 1;
  // Select steering control mode [] [0|3]
  optional Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
  // (Reserved) Control parking brake [T/F] [0|1]
  optional bool adc_cmd_parkingbrake = 3;
  // Transmission control - only used in direct longitudinal control [] [0|7]
  optional Adc_cmd_gearType adc_cmd_gear = 4;
  // Motion Control 1 checksum [] [0|255]
  optional int32 adc_motioncontrol1_checksum = 5;
  // Brake pressure for direct longitudinal control [%] [0|113.8132]
  optional double adc_cmd_brakepercentage = 6;
  // Throttle pedal position percentage for direct longitudinal control [%]
  // [0|100]
  optional double adc_cmd_throttleposition = 7;
  // Motion control 1 Heartbeat counter [] [0|3]
  optional int32 adc_motioncontrol1_counter = 8;
  // Request from ADC to LLC for autonomy [] [0|3]
  optional Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
  // Select longitudinal control mode [] [0|3]
  optional Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode =
      10;
}

message Adc_motioncontrollimits1_12 {
  // Control Message
  // Set limit for throttle position [%] [0|100]
  optional double adc_cmd_throttlecommandlimit = 1;
  // Set steering rate [deg/s] [0|3276.75]
  optional double adc_cmd_steeringrate = 2;
  // Set limit for steering wheel angle. Applies in both positive and negative
  // [deg] [0|1275]
  optional double adc_cmd_steerwheelanglelimit = 3;
}

message Llc_motionfeedback1_20 {
  // Report Message
  enum Llc_fbk_gearType {
    LLC_FBK_GEAR_P_PARK = 0;
    LLC_FBK_GEAR_D_DRIVE = 1;
    LLC_FBK_GEAR_N_NEUTRAL = 2;
    LLC_FBK_GEAR_R_REVERSE = 3;
  }
  enum Llc_fbk_steeringcontrolmodeType {
    LLC_FBK_STEERINGCONTROLMODE_NONE = 0;
    LLC_FBK_STEERINGCONTROLMODE_ANGLE = 1;
    LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE = 2;
    LLC_FBK_STEERINGCONTROLMODE_RESERVED = 3;
  }
  enum Llc_fbk_longitudinalcontrolmodeType {
    LLC_FBK_LONGITUDINALCONTROLMODE_NONE = 0;
    LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION = 1;
    LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE = 2;
    LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE = 3;
  }
  enum Llc_fbk_stateType {
    LLC_FBK_STATE_RESERVED0 = 0;
    LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED = 1;
    LLC_FBK_STATE_AUTONOMY_ALLOWED = 2;
    LLC_FBK_STATE_AUTONOMY_REQUESTED = 3;
    LLC_FBK_STATE_AUTONOMY = 4;
    LLC_FBK_STATE_RESERVED1 = 5;
    LLC_FBK_STATE_RESERVED2 = 6;
    LLC_FBK_STATE_RESERVED3 = 7;
    LLC_FBK_STATE_RESERVED4 = 8;
    LLC_FBK_STATE_RESERVED5 = 9;
    LLC_FBK_STATE_RESERVED6 = 10;
    LLC_FBK_STATE_RESERVED7 = 11;
    LLC_FBK_STATE_RESERVED8 = 12;
    LLC_FBK_STATE_DISENGAGE_REQUESTED = 13;
    LLC_FBK_STATE_DISENGAGED = 14;
    LLC_FBK_STATE_FAULT = 15;
  }
  // Current gear [] [0|3]
  optional Llc_fbk_gearType llc_fbk_gear = 1;
  // Parking brake applied [T/F] [0|1]
  optional bool llc_fbk_parkingbrake = 2;
  // Throttle position feedback [%] [0|102.3]
  optional double llc_fbk_throttleposition = 3;
  // Rear brake pressure feedback [%] [0|113.8132]
  optional double llc_fbk_brakepercentrear = 4;
  // Front brake pressure feedback [%] [0|113.8132]
  optional double llc_fbk_brakepercentfront = 5;
  // Current steering control mode [] [0|3]
  optional Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
  // Motion feedback 1 heartbeat counter [] [0|3]
  optional int32 llc_motionfeedback1_counter = 7;
  // Motion feedback 1 checksum [] [0|255]
  optional int32 llc_motionfeedback1_checksum = 8;
  // Autonomy command aligned with vehicle state according to calibration limits
  // [T/F] [0|1]
  optional bool llc_fbk_commandaligned = 9;
  // Estop is pressed [T/F] [0|1]
  optional bool llc_fbk_estoppressed = 10;
  // Indicates that ADC is requesting autonomy mode [T/F] [0|1]
  optional bool llc_fbk_adcrequestautonomy = 11;
  // Indicates that LLC is ready to allow autonomy mode [T/F] [0|1]
  optional bool llc_fbk_allowautonomy = 12;
  // Report current longitudinal control mode [] [0|3]
  optional Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode =
      13;
  // Current Autonomy State [] [0|15]
  optional Llc_fbk_stateType llc_fbk_state = 14;
}

message Llc_motionfeedback2_21 {
  // Report Message
  // [m/s] [0|655.35]
  optional double llc_fbk_vehiclespeed = 1;
  // Motion feedback 2 heartbeat counter [] [0|3]
  optional int32 llc_motionfeedback2_counter = 2;
  // Motion feedback 2 checksum [] [0|255]
  optional int32 llc_motionfeedback2_checksum = 3;
  // Steer wheel angle feedback from SbW motor (? rate) [deg/s] [-1638.4|1638.3]
  optional double llc_fbk_steeringrate = 4;
  // Steering angle feedback [deg] [-1638.4|1638.35]
  optional double llc_fbk_steeringangle = 5;
}

message Llc_motioncommandfeedback1_22 {
  // Report Message
  // Steering angle setpoint (after limits) [deg] [-1638.4|1638.35]
  optional double llc_fbk_steeringanglesetpoint = 1;
  // Current throttle setpoint (after limits) [%] [0|102.3]
  optional double llc_fbk_throttlesetpoint = 2;
  // Front brake pressure setpoint (after limits) [%] [0|113.8132]
  optional double llc_fbk_brakepercentsetpoint = 3;
  // Motion command feedback 2 heartbeat counter [] [0|3]
  optional int32 llc_motioncommandfeedback1_count = 4;
  // Motion command feedback 1 checksum [] [0|255]
  optional int32 llc_motioncommandfeedback1_check = 5;
}

message Llc_vehiclestatus_25 {
  // Report Message
  // Vehicle 12V voltage feedback [Volt] [0|25.5]
  optional double llc_fbk_12voltage = 1;
}

message Llc_auxiliaryfeedback_120 {
  // Report Message
  enum Llc_fbk_turnsignalType {
    LLC_FBK_TURNSIGNAL_NONE = 0;
    LLC_FBK_TURNSIGNAL_LEFT = 1;
    LLC_FBK_TURNSIGNAL_RIGHT = 2;
    LLC_FBK_TURNSIGNAL_RESERVE = 3;
  }
  // Inverter enabled [T/F] [0|1]
  optional bool llc_fbk_inverter = 1;
  // PDU Channel 8 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch8 = 2;
  // PDU Channel 7 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch7 = 3;
  // PDU Channel 6 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch6 = 4;
  // PDU Channel 5 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch5 = 5;
  // PDU Channel 4 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch4 = 6;
  // PDU Channel 3 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch3 = 7;
  // PDU Channel 2 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch2 = 8;
  // PDU Channel 1 enabled [T/F] [0|1]
  optional bool llc_fbk_pdu_ch1 = 9;
  // Hazard lights enabled [T/F] [0|1]
  optional bool llc_fbk_hazardlights = 10;
  // Autonomy indicator green LED on [T/F] [0|1]
  optional bool llc_fbk_ledgreenon = 11;
  // Horn enabled [T/F] [0|1]
  optional bool llc_fbk_horn = 12;
  // Buzzer enabled [T/F] [0|1]
  optional bool llc_fbk_buzzeron = 13;
  // Current turn signal status [] [0|3]
  optional Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
  // Low beam enabled [T/F] [0|1]
  optional bool llc_fbk_lowbeam = 15;
  // High beam enabled [T/F] [0|1]
  optional bool llc_fbk_highbeam = 16;
  // Autonomy indicator red LED on [T/F] [0|1]
  optional bool llc_fbk_ledredon = 17;
  // Autonomy button is pressed [T/F] [0|1]
  optional bool llc_fbk_autonomybuttonpressed = 18;
}

message Llc_diag_fault_620 {
  // Report Message
  // Counts the number of times that the driver has disengaged autonomy by
  // applying the brakes since system reset.. [] [0|255]
  optional int32 llc_disengagecounter_brake = 1;
  // Counts the number of times that the driver has disengaged autonomy by
  // moving the steering wheel since system reset. [] [0|255]
  optional int32 llc_disengagecounter_steer = 2;
  // Counts the number of times that the driver has disengaged autonomy by
  // applying throttle since system reset. [] [0|255]
  optional int32 llc_disengagecounter_throttle = 3;
  // Counts the number of faults that have occurred since system reset. []
  // [0|255]
  optional int32 llc_fbk_faultcounter = 4;
  // Counts the number of times that the driver has disengaged autonomy by
  // applying the brakes since system reset.. [] [0|255]
  optional int32 llc_disengagecounter_button = 5;
  // Firmware version [g] [2017|2144]
  optional int32 llc_fbk_version_year = 6;
  // Firmware version [Month] [0|15]
  optional int32 llc_fbk_version_month = 7;
  // Firmware version [Day] [0|31]
  optional int32 llc_fbk_version_day = 8;
  // Firmware version [Hour] [0|31]
  optional int32 llc_fbk_version_hour = 9;
}

message Llc_diag_steeringcontrol_722 {
  // Control Message
  // Brake control feedforward contribution [rev] [-6.5536|6.5534]
  optional double llc_dbg_steeringsensorposition = 1;
  // Brake control feedforward contribution [counts] [-32768|32767]
  optional int32 llc_dbg_steeringrackinputtorque = 2;
  // Brake control feedforward contribution [rev] [-83.88608|83.88607]
  optional double llc_dbg_steeringmotorposition = 3;
}

message Adc_auxiliarycontrol_110 {
  // Control Message
  enum Adc_cmd_turnsignalType {
    ADC_CMD_TURNSIGNAL_NONE = 0;
    ADC_CMD_TURNSIGNAL_LEFT = 1;
    ADC_CMD_TURNSIGNAL_RIGHT = 2;
    ADC_CMD_TURNSIGNAL_RESERVE = 3;
  }
  // Aux control heartbeat counter [] [0|3]
  optional int32 adc_auxcontrol_counter = 1;
  // Aux control checksum [] [0|255]
  optional int32 adc_auxcontrol_checksum = 2;
  // Control inverter override (default ON if not overridden) [T/F] [0|1]
  optional bool adc_cmd_inverter_controlenable = 3;
  // Control inverter [T/F] [0|1]
  optional bool adc_cmd_inverter = 4;
  // (Reserved) Control wiper [] [0|3]
  optional int32 adc_cmd_wiper = 5;
  // PDU Control Override (all channels default ON if not overridden) [T/F]
  // [0|1]
  optional bool adc_cmd_pdu_controlenable = 6;
  // Control PDU Ch 8 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch8 = 7;
  // Control PDU Ch 7 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch7 = 8;
  // Control PDU Ch 6 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch6 = 9;
  // Control PDU Ch 5 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch5 = 10;
  // Control PDU Ch 4 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch4 = 11;
  // Control PDU Ch 3 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch3 = 12;
  // Control PDU Ch 2 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch2 = 13;
  // Control PDU Ch 1 (when override enabled) [T/F] [0|1]
  optional bool adc_cmd_pdu_ch1 = 14;
  // Control hazard lights [T/F] [0|1]
  optional bool adc_cmd_hazardlights = 15;
  // Control high beam [T/F] [0|1]
  optional bool adc_cmd_highbeam = 16;
  // Control low beam [T/F] [0|1]
  optional bool adc_cmd_lowbeam = 17;
  // Control horn [T/F] [0|1]
  optional bool adc_cmd_horn = 18;
  // Requested turn signals [] [0|3]
  optional Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
}

message Llc_diag_brakecontrol_721 {
  // Control Message
  // Brake control loop P contribution [mrev] [-51.2|51.1]
  optional double llc_dbg_brakepidcontribution_p = 1;
  // Brake control loop I contribution [mrev] [-51.2|51.1]
  optional double llc_dbg_brakepidcontribution_i = 2;
  // Brake control loop D contribution [mrev] [-51.2|51.1]
  optional double llc_dbg_brakepidcontribution_d = 3;
  // Brake control loop output [mrev] [-51.2|51.1]
  optional double llc_dbg_brakepid_output = 4;
  // Brake control loop error [psi] [-2048|2047]
  optional int32 llc_dbg_brakepid_error = 5;
  // Brake control feedforward contribution [mrev] [-1024|1023.5]
  optional double llc_dbg_brakefeedforward = 6;
}

message Transit {
  optional Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;    // report message
  optional Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;  // control message
  optional Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 =
      3;  // control message
  optional Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;  // report message
  optional Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;  // report message
  optional Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 =
      6;                                                   // report message
  optional Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;  // report message
  optional Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 =
      8;                                               // report message
  optional Llc_diag_fault_620 llc_diag_fault_620 = 9;  // report message
  optional Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 =
      10;  // control message
  optional Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 =
      11;  // control message
  optional Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 =
      12;  // control message
}
