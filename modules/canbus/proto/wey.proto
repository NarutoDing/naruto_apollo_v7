syntax = "proto2";

package apollo.canbus;

message Ads_shifter_115 {
  // Control Message
  enum Ads_shiftmodeType {
    ADS_SHIFTMODE_INVALID = 0;
    ADS_SHIFTMODE_VALID = 1;
  }
  enum Ads_targetgearType {
    ADS_TARGETGEAR_N = 0;
    ADS_TARGETGEAR_R = 1;
    ADS_TARGETGEAR_P = 2;
    ADS_TARGETGEAR_D = 3;
  }
  // ADS Shift Mode [] [0|1]
  optional Ads_shiftmodeType ads_shiftmode = 1;
  // ADS Target Gear [] [0|0]
  optional Ads_targetgearType ads_targetgear = 2;
}

message Ads_eps_113 {
  // Control Message
  enum Ads_epsmodeType {
    ADS_EPSMODE_DISABLE = 0;
    ADS_EPSMODE_ACTIVE = 2;
  }
  // EPS Mode [] [0|3]
  optional Ads_epsmodeType ads_epsmode = 1;
  // Steering Wheel Target Angle [deg] [-800|838.3]
  optional double ads_reqepstargetangle = 2;
}

message Status_310 {
  // Report Message
  enum LongitudeaccvalidType {
    LONGITUDEACCVALID_INVALID = 0;
    LONGITUDEACCVALID_VALID = 1;
  }
  enum LateralaccevalidType {
    LATERALACCEVALID_INVALID = 0;
    LATERALACCEVALID_VALID = 1;
  }
  enum VehdynyawratevalidType {
    VEHDYNYAWRATEVALID_INVALID = 0;
    VEHDYNYAWRATEVALID_VALID = 1;
  }
  enum FlwheelspdvalidType {
    FLWHEELSPDVALID_INVALID = 0;
    FLWHEELSPDVALID_VALID = 1;
  }
  enum FrwheelspdvalidType {
    FRWHEELSPDVALID_INVALID = 0;
    FRWHEELSPDVALID_VALID = 1;
  }
  enum RlwheelspdvalidType {
    RLWHEELSPDVALID_INVALID = 0;
    RLWHEELSPDVALID_VALID = 1;
  }
  enum RrwheelspdvalidType {
    RRWHEELSPDVALID_INVALID = 0;
    RRWHEELSPDVALID_VALID = 1;
  }
  enum VehiclespdvalidType {
    VEHICLESPDVALID_INVALID = 0;
    VEHICLESPDVALID_VALID = 1;
  }
  enum LongitudedrivingmodeType {
    LONGITUDEDRIVINGMODE_MANUALMODE = 0;
    LONGITUDEDRIVINGMODE_AUTOMATICSTANDBY = 1;
    LONGITUDEDRIVINGMODE_AUTOMATICACCELERATION = 2;
    LONGITUDEDRIVINGMODE_AUTOMATICDECELERATION = 3;
  }
  enum EngspdvalidType {
    ENGSPDVALID_INVALID = 0;
    ENGSPDVALID_VALID = 1;
    ENGSPDVALID_INIT_VALUE = 2;
    ENGSPDVALID_RESERVED = 3;
  }
  enum AccepedaloverrideType {
    ACCEPEDALOVERRIDE_NOT_OVERRIDE = 0;
    ACCEPEDALOVERRIDE_OVERRIDE = 1;
  }
  enum BrakepedalstatusType {
    BRAKEPEDALSTATUS_NOT_PRESSED = 0;
    BRAKEPEDALSTATUS_PRESSED = 1;
    BRAKEPEDALSTATUS_RESERVED1 = 2;
    BRAKEPEDALSTATUS_ERROR = 3;
  }
  enum EspbrakelightstsType {
    ESPBRAKELIGHTSTS_OFF = 0;
    ESPBRAKELIGHTSTS_ON = 1;
  }
  enum EpbswtpositionvalidType {
    EPBSWTPOSITIONVALID_VALID = 0;
    EPBSWTPOSITIONVALID_NOT_VALID = 1;
  }
  enum EpbstsType {
    EPBSTS_RELEASED = 0;
    EPBSTS_CLOSED = 1;
    EPBSTS_IN_PROGRESS = 2;
    EPBSTS_UNKNOWN = 3;
  }
  enum CurrentgearvalidType {
    CURRENTGEARVALID_INVALID = 0;
    CURRENTGEARVALID_VALID = 1;
  }
  enum EpstrqsnsrstsType {
    EPSTRQSNSRSTS_NORMAL = 0;
    EPSTRQSNSRSTS_ABNORMAL = 1;
  }
  enum Eps_interferdetdvalidType {
    EPS_INTERFERDETDVALID_INVALID = 0;
    EPS_INTERFERDETDVALID_VALID = 1;
  }
  enum EpshandsdetnstsType {
    EPSHANDSDETNSTS_HANDSOFF_NOT_DETECTED = 0;
    EPSHANDSDETNSTS_HANDOFFF_DETECTED = 1;
  }
  enum Eps_handsdetnstsvalidType {
    EPS_HANDSDETNSTSVALID_INVALID = 0;
    EPS_HANDSDETNSTSVALID_VALID = 1;
  }
  enum SteerwheelanglesignType {
    STEERWHEELANGLESIGN_LEFT_POSITIVE = 0;
    STEERWHEELANGLESIGN_RIGHT_NEGATIVE = 1;
  }
  enum SteerwheelspdsignType {
    STEERWHEELSPDSIGN_LEFT_POSITIVE = 0;
    STEERWHEELSPDSIGN_RIGHT_NEGATIVE = 1;
  }
  enum DriverdoorstsType {
    DRIVERDOORSTS_CLOSED = 0;
    DRIVERDOORSTS_OPEN = 1;
  }
  enum RldoorstsType {
    RLDOORSTS_CLOSED = 0;
    RLDOORSTS_OPEN = 1;
  }
  enum PassengerdoorstsType {
    PASSENGERDOORSTS_CLOSED = 0;
    PASSENGERDOORSTS_OPEN = 1;
  }
  enum RrdoorstsType {
    RRDOORSTS_CLOSED = 0;
    RRDOORSTS_OPEN = 1;
  }
  enum FrontfoglmpstsType {
    FRONTFOGLMPSTS_OFF = 0;
    FRONTFOGLMPSTS_ON = 1;
    FRONTFOGLMPSTS_RESERVED = 2;
    FRONTFOGLMPSTS_NOT_AVAILABLE = 3;
  }
  enum RearfoglmpstsType {
    REARFOGLMPSTS_OFF = 0;
    REARFOGLMPSTS_ON = 1;
  }
  enum LowbeamstsType {
    LOWBEAMSTS_OFF = 0;
    LOWBEAMSTS_ON = 1;
  }
  enum HighbeamstsType {
    HIGHBEAMSTS_OFF = 0;
    HIGHBEAMSTS_ON = 1;
  }
  enum LeftturnlampstsType {
    LEFTTURNLAMPSTS_OFF = 0;
    LEFTTURNLAMPSTS_ON = 1;
  }
  enum RightturnlampstsType {
    RIGHTTURNLAMPSTS_OFF = 0;
    RIGHTTURNLAMPSTS_ON = 1;
  }
  enum Bcm_availstsType {
    BCM_AVAILSTS_MANUAL_MODE = 0;
    BCM_AVAILSTS_AUTONOMOUS_MODE = 1;
    BCM_AVAILSTS_RESERVED1 = 2;
    BCM_AVAILSTS_RESERVED2 = 3;
  }
  enum BrakelmpstsType {
    BRAKELMPSTS_OFF = 0;
    BRAKELMPSTS_ON = 1;
  }
  // Longitude acceleration valid [] [0|1]
  optional LongitudeaccvalidType longitudeaccvalid = 1;
  // Indicates Lateral Signal State [] [0|1]
  optional LateralaccevalidType lateralaccevalid = 2;
  // Vehicle yaw rate valid [] [0|1]
  optional VehdynyawratevalidType vehdynyawratevalid = 3;
  // Front right wheel speed valid [] [0|1]
  optional FlwheelspdvalidType flwheelspdvalid = 4;
  // Front right wheel speed valid [] [0|1]
  optional FrwheelspdvalidType frwheelspdvalid = 5;
  // Rear left wheel speed valid [] [0|1]
  optional RlwheelspdvalidType rlwheelspdvalid = 6;
  // Rear right wheel speed valid [] [0|1]
  optional RrwheelspdvalidType rrwheelspdvalid = 7;
  // Quality/fault information to current Vehicle speed information [] [0|1]
  optional VehiclespdvalidType vehiclespdvalid = 8;
  // This signal indicates if ECM control for  ADS torque request is active or
  // not. [] [0|3]
  optional LongitudedrivingmodeType longitudedrivingmode = 9;
  // Engine speed valid [] [0|2]
  optional EngspdvalidType engspdvalid = 10;
  // Detect Acceleration Pedal Override [] [0|1]
  optional AccepedaloverrideType accepedaloverride = 11;
  // indicates the brake pedal is pressed or not or incorrect for plausibility
  // check. [] [0|3]
  optional BrakepedalstatusType brakepedalstatus = 12;
  // Brake light lamp(on/off),come from ESP [] [0|1]
  optional EspbrakelightstsType espbrakelightsts = 13;
  // EPB switch position signal valid [] [0|1]
  optional EpbswtpositionvalidType epbswtpositionvalid = 14;
  // EPB status [] [0|3]
  optional EpbstsType epbsts = 15;
  // Current gear valid [] [0|1]
  optional CurrentgearvalidType currentgearvalid = 16;
  // EPS torque sensor status [] [0|1]
  optional EpstrqsnsrstsType epstrqsnsrsts = 17;
  // Driver Steering Interference Detected Validity [] [0|1]
  optional Eps_interferdetdvalidType eps_interferdetdvalid = 18;
  // Hands Off Steering Wheel Detection status [] [0|1]
  optional EpshandsdetnstsType epshandsdetnsts = 19;
  // Hands Off Steering Wheel Detection status Validity [] [0|1]
  optional Eps_handsdetnstsvalidType eps_handsdetnstsvalid = 20;
  // sign of steering wheel angle [] [0|1]
  optional SteerwheelanglesignType steerwheelanglesign = 21;
  // sign of steering wheel speed  [] [0|1]
  optional SteerwheelspdsignType steerwheelspdsign = 22;
  // Driver door status. [] [0|1]
  optional DriverdoorstsType driverdoorsts = 23;
  // Left rear door status [] [0|1]
  optional RldoorstsType rldoorsts = 24;
  // Passenger door status. [] [0|1]
  optional PassengerdoorstsType passengerdoorsts = 25;
  // Right   rear door status [] [0|1]
  optional RrdoorstsType rrdoorsts = 26;
  // Front fog lamp status [] [0|3]
  optional FrontfoglmpstsType frontfoglmpsts = 27;
  // Rear fog lamp status [] [0|1]
  optional RearfoglmpstsType rearfoglmpsts = 28;
  // Low beam status [] [0|1]
  optional LowbeamstsType lowbeamsts = 29;
  // High beam status [] [0|1]
  optional HighbeamstsType highbeamsts = 30;
  // Left turn lamp status [] [0|1]
  optional LeftturnlampstsType leftturnlampsts = 31;
  // Right turn lamp status [] [0|1]
  optional RightturnlampstsType rightturnlampsts = 32;
  // The work status of BCM [] [0|3]
  optional Bcm_availstsType bcm_availsts = 33;
  // Break Lamp status [] [0|1]
  optional BrakelmpstsType brakelmpsts = 34;
}

message Vin_resp3_393 {
  // Report Message
  // [] [0|255]
  optional int32 vin16 = 1;
}

message Vin_resp2_392 {
  // Report Message
  // [] [0|255]
  optional int32 vin15 = 1;
  // [] [0|255]
  optional int32 vin14 = 2;
  // [] [0|255]
  optional int32 vin13 = 3;
  // [] [0|255]
  optional int32 vin12 = 4;
  // [] [0|255]
  optional int32 vin11 = 5;
  // [] [0|255]
  optional int32 vin10 = 6;
  // [] [0|255]
  optional int32 vin09 = 7;
  // [] [0|255]
  optional int32 vin08 = 8;
}

message Vin_resp1_391 {
  // Report Message
  // [] [0|255]
  optional int32 vin07 = 1;
  // [] [0|255]
  optional int32 vin06 = 2;
  // [] [0|255]
  optional int32 vin05 = 3;
  // [] [0|255]
  optional int32 vin04 = 4;
  // [] [0|255]
  optional int32 vin03 = 5;
  // [] [0|255]
  optional int32 vin02 = 6;
  // [] [0|255]
  optional int32 vin00 = 7;
  // [] [0|255]
  optional int32 vin01 = 8;
}

message Ads_req_vin_390 {
  // Control Message
  enum Req_vin_signalType {
    REQ_VIN_SIGNAL_NO_REQUEST = 0;
    REQ_VIN_SIGNAL_REQUEST = 1;
  }
  // [] [0|255]
  optional Req_vin_signalType req_vin_signal = 1;
}

message Ads1_111 {
  // Control Message
  enum Ads_dectostopType {
    ADS_DECTOSTOP_NO_DEMAND = 0;
    ADS_DECTOSTOP_DEMAND = 1;
  }
  enum Ads_modeType {
    ADS_MODE_OFF_MODE = 0;
    ADS_MODE_ACTIVE_MODE = 3;
  }
  enum Ads_driveoff_reqType {
    ADS_DRIVEOFF_REQ_NO_DEMAND = 0;
    ADS_DRIVEOFF_REQ_DEMAND = 1;
  }
  enum Ads_aeb_tgtdecel_reqType {
    ADS_AEB_TGTDECEL_REQ_NO_DEMAND = 0;
    ADS_AEB_TGTDECEL_REQ_DEMAND = 1;
  }
  // ADS request ESP/VLC to decelerate until standstill. [] [0|1]
  optional Ads_dectostopType ads_dectostop = 1;
  // The status of the ADS control unit.The ADS mode should be contained in
  // every message sent by ADS [] [0|31]
  optional Ads_modeType ads_mode = 2;
  // ADS target acceleration for transmission [m/s2] [-7|5.75]
  optional double ads_taracce = 3;
  // ACC request ESP drive off [] [0|1]
  optional Ads_driveoff_reqType ads_driveoff_req = 4;
  // target deceleration value from AEB [m/s2] [-16|16]
  optional double ads_aeb_taracce = 5;
  // Request of the AEB deceleration control. [] [0|1]
  optional Ads_aeb_tgtdecel_reqType ads_aeb_tgtdecel_req = 6;
}

message Fbs2_240 {
  // Report Message
  enum FlwheeldirectionType {
    FLWHEELDIRECTION_INVALID = 0;
    FLWHEELDIRECTION_FORWARD = 1;
    FLWHEELDIRECTION_BACKWARD = 2;
    FLWHEELDIRECTION_STOP = 3;
  }
  enum RlwheeldrivedirectionType {
    RLWHEELDRIVEDIRECTION_INVALID = 0;
    RLWHEELDRIVEDIRECTION_FORWARD = 1;
    RLWHEELDRIVEDIRECTION_BACKWARD = 2;
    RLWHEELDRIVEDIRECTION_STOP = 3;
  }
  enum RrwheeldirectionType {
    RRWHEELDIRECTION_INVALID = 0;
    RRWHEELDIRECTION_FORWARD = 1;
    RRWHEELDIRECTION_BACKWARD = 2;
    RRWHEELDIRECTION_STOP = 3;
  }
  // Front left wheel Moving direction [] [0|3]
  optional FlwheeldirectionType flwheeldirection = 1;
  // Front right wheel speed [Km/h] [0|299.98125]
  optional double frwheelspd = 2;
  // Rear left wheel  Moving direction [] [0|3]
  optional RlwheeldrivedirectionType rlwheeldrivedirection = 3;
  // Rear left wheel speed [Km/h] [0|299.98125]
  optional double rlwheelspd = 4;
  // Rear right wheel Moving direction [] [0|3]
  optional RrwheeldirectionType rrwheeldirection = 5;
  // Rear right wheel speed [Km/h] [0|299.98125]
  optional double rrwheelspd = 6;
  // Current Vehicle speed information [Km/h] [0|299.98125]
  optional double vehiclespd = 7;
}

message Fbs1_243 {
  // Report Message
  enum FrwheeldirectionType {
    FRWHEELDIRECTION_INVALID = 0;
    FRWHEELDIRECTION_FORWARD = 1;
    FRWHEELDIRECTION_BACKWARD = 2;
    FRWHEELDIRECTION_STOP = 3;
  }
  // Longitude acceleration [m/s^2] [-21.592|21.592]
  optional double longitudeacce = 1;
  // Indicates Lateral Acceleration [m/s^2] [-21.592|21.592]
  optional double lateralacce = 2;
  // Vehicle yaw rate [rad/s] [-2.093|2.093]
  optional double vehdynyawrate = 3;
  // Front left wheel speed [Km/h] [0|299.98125]
  optional double flwheelspd = 4;
  // Front right wheel  Moving direction [] [0|3]
  optional FrwheeldirectionType frwheeldirection = 5;
}

message Fbs4_235 {
  // Report Message
  // angle of steering wheel  [deg] [0|780]
  optional double steerwheelangle = 1;
  // steering wheel rotation speed [deg/s] [0|1016]
  optional double steerwheelspd = 2;
}

message Fail_241 {
  // Report Message
  enum EngfailType {
    ENGFAIL_NO_FAIL = 0;
    ENGFAIL_FAIL = 1;
  }
  enum EspfailType {
    ESPFAIL_NO_FAILURE = 0;
    ESPFAIL_FAILURE = 1;
  }
  enum EpbfailType {
    EPBFAIL_UNDEFINED = 0;
    EPBFAIL_NO_ERROR = 1;
    EPBFAIL_ERROR = 2;
    EPBFAIL_DIAGNOSIS = 3;
  }
  enum ShiftfailType {
    SHIFTFAIL_NO_FAIL = 0;
    SHIFTFAIL_TRANSMISSION_MALFUNCTION = 1;
    SHIFTFAIL_TRANSMISSION_P_ENGAGEMENT_FAULT = 2;
    SHIFTFAIL_TRANSMISSION_P_DISENGAGEMENT_FAULT = 3;
    SHIFTFAIL_RESERVED = 4;
    SHIFTFAIL_TRANSMISSION_LIMIT_FUNCTION = 15;
  }
  enum EpsfailType {
    EPSFAIL_NO_FAULT = 0;
    EPSFAIL_FAULT = 1;
  }
  // Engine Fail status [] [0|1]
  optional EngfailType engfail = 1;
  // ESP fault [] [0|1]
  optional EspfailType espfail = 2;
  // error indication of EPB system [] [0|3]
  optional EpbfailType epbfail = 3;
  // Driver display failure messages [] [0|15]
  optional ShiftfailType shiftfail = 4;
  // Electrical steering fail status [] [0|1]
  optional EpsfailType epsfail = 5;
}

message Fbs3_237 {
  // Report Message
  enum EpbswtichpositionType {
    EPBSWTICHPOSITION_NEUTRAL = 0;
    EPBSWTICHPOSITION_RELEASE = 1;
    EPBSWTICHPOSITION_APPLY = 2;
    EPBSWTICHPOSITION_RESERVED1 = 3;
  }
  enum CurrentgearType {
    CURRENTGEAR_P = 0;
    CURRENTGEAR_R = 1;
    CURRENTGEAR_N = 2;
    CURRENTGEAR_D = 3;
  }
  enum Eps_streeingmodeType {
    EPS_STREEINGMODE_MANUAL = 0;
    EPS_STREEINGMODE_AUTOMATIC_AVAIL = 1;
    EPS_STREEINGMODE_MANUAL_FROM_DRVNTERFERENCE = 2;
    EPS_STREEINGMODE_MANUAL_FROM_EPS_FAILED_DETECTED = 3;
    EPS_STREEINGMODE_TEMPORARY_INHIBITED = 4;
    EPS_STREEINGMODE_RESERVED1 = 5;
    EPS_STREEINGMODE_RESERVED2 = 6;
    EPS_STREEINGMODE_RESERVED3 = 7;
  }
  enum EpscurrmodType {
    EPSCURRMOD_NORMAL_MODE = 0;
    EPSCURRMOD_SPORT_MODE = 1;
    EPSCURRMOD_COMFORT_MODE = 2;
    EPSCURRMOD_MODESELECTIONNOTPOSSIBLE = 3;
    EPSCURRMOD_NO_DISPLAY = 4;
    EPSCURRMOD_CONDITIONNOTMEET = 5;
    EPSCURRMOD_RESERVED1 = 6;
  }
  // Engine speed [rpm] [0|8198.875]
  optional double engspd = 1;
  // Acceleration Pedal Position [%] [0|100.3935]
  optional double accpedalpos = 2;
  // EPB Switch position information [] [0|3]
  optional EpbswtichpositionType epbswtichposition = 3;
  // To indicate which gear the DCT is in now  [] [0|3]
  optional CurrentgearType currentgear = 4;
  // Driver Steering Interference Detected [] [0|7]
  optional Eps_streeingmodeType eps_streeingmode = 5;
  // Value of driver input torque [Nm] [-22.78|22.96]
  optional double epsdrvinputtrqvalue = 6;
  // Value of consumed current by EPS [A] [127|127]
  optional double epsconsumedcurrvalue = 7;
  // Applied steering mode currently [] [0|7]
  optional EpscurrmodType epscurrmod = 8;
}

message Ads3_38e {
  // Control Message
  enum Ads_bcm_workstsType {
    ADS_BCM_WORKSTS_DISABLE = 0;
    ADS_BCM_WORKSTS_ENABLE = 1;
    ADS_BCM_WORKSTS_ACTIVE = 2;
    ADS_BCM_WORKSTS_FAILED = 3;
  }
  enum Ads_bcmworkstsvalidType {
    ADS_BCMWORKSTSVALID_INVALID = 0;
    ADS_BCMWORKSTSVALID_VALID = 1;
  }
  enum Ads_reqcontrolbcmType {
    ADS_REQCONTROLBCM_NO_REQUEST = 0;
    ADS_REQCONTROLBCM_REQUEST = 1;
  }
  enum HighbeamtonType {
    HIGHBEAMTON_TURN_OFF = 0;
    HIGHBEAMTON_TURN_ON = 1;
  }
  enum DippedbeamonType {
    DIPPEDBEAMON_TURN_OFF = 0;
    DIPPEDBEAMON_TURN_ON = 1;
  }
  enum TurnllightonType {
    TURNLLIGHTON_TURN_OFF = 0;
    TURNLLIGHTON_TURN_LEFT_ON = 1;
    TURNLLIGHTON_TURN_RIGHT_ON = 2;
    TURNLLIGHTON_RESERVED = 3;
  }
  enum EmergencylightonType {
    EMERGENCYLIGHTON_TURN_OFF = 0;
    EMERGENCYLIGHTON_TURN_ON = 1;
  }
  enum FfoglamponType {
    FFOGLAMPON_TURN_OFF = 0;
    FFOGLAMPON_TURN_ON = 1;
  }
  enum RfoglamponType {
    RFOGLAMPON_TURN_OFF = 0;
    RFOGLAMPON_TURN_ON = 1;
  }
  enum BrakelightType {
    BRAKELIGHT_TURN_OFF = 0;
    BRAKELIGHT_TURN_ON = 1;
  }
  enum HornonType {
    HORNON_TURN_OFF = 0;
    HORNON_TURN_ON = 1;
  }
  enum FwindshieldwiperType {
    FWINDSHIELDWIPER_TURN_OFF = 0;
    FWINDSHIELDWIPER_TURN_ON = 1;
  }
  enum RwindshieldwiperType {
    RWINDSHIELDWIPER_TURN_OFF = 0;
    RWINDSHIELDWIPER_TURN_ON = 1;
  }
  // The work status of ADS control unit.This signal should be contained in
  // every message sent by ADS. [] [0|3]
  optional Ads_bcm_workstsType ads_bcm_worksts = 1;
  // This Signal reflect the ADS_WorkSts Signal is Valid OR not [] [0|1]
  optional Ads_bcmworkstsvalidType ads_bcmworkstsvalid = 2;
  // Vehicle Task request.If ADS request control BCM [] [0|1]
  optional Ads_reqcontrolbcmType ads_reqcontrolbcm = 3;
  // Open theHigh Beam light [] [0|1]
  optional HighbeamtonType highbeamton = 4;
  // Open the dipped Beam light [] [0|1]
  optional DippedbeamonType dippedbeamon = 5;
  // Open the Turn light [] [0|3]
  optional TurnllightonType turnllighton = 6;
  // Open the emergency light [] [0|1]
  optional EmergencylightonType emergencylighton = 7;
  // Open the front fog light [] [0|1]
  optional FfoglamponType ffoglampon = 8;
  // Open the rear fog ligh [] [0|1]
  optional RfoglamponType rfoglampon = 9;
  // Open the brake light [] [0|1]
  optional BrakelightType brakelight = 10;
  // Open the horn voice [] [0|1]
  optional HornonType hornon = 11;
  // Open front window shield wiper [] [0|1]
  optional FwindshieldwiperType fwindshieldwiper = 12;
  // Open rear window shield wiper [] [0|1]
  optional RwindshieldwiperType rwindshieldwiper = 13;
}

message Wey {
  optional Ads_shifter_115 ads_shifter_115 = 1;  // control message
  optional Ads_eps_113 ads_eps_113 = 2;          // control message
  optional Status_310 status_310 = 3;            // report message
  optional Vin_resp3_393 vin_resp3_393 = 4;      // report message
  optional Vin_resp2_392 vin_resp2_392 = 5;      // report message
  optional Vin_resp1_391 vin_resp1_391 = 6;      // report message
  optional Ads_req_vin_390 ads_req_vin_390 = 7;  // control message
  optional Ads1_111 ads1_111 = 8;                // control message
  optional Fbs2_240 fbs2_240 = 9;                // report message
  optional Fbs1_243 fbs1_243 = 10;               // report message
  optional Fbs4_235 fbs4_235 = 11;               // report message
  optional Fail_241 fail_241 = 12;               // report message
  optional Fbs3_237 fbs3_237 = 13;               // report message
  optional Ads3_38e ads3_38e = 14;               // control message
}
