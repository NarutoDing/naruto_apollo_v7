syntax = "proto2";

package apollo.canbus;

message Gear_control_a1 {
  // Control Message
  enum Gear_state_targetType {
    GEAR_STATE_TARGET_P = 1;
    GEAR_STATE_TARGET_N = 2;
    GEAR_STATE_TARGET_D = 3;
    GEAR_STATE_TARGET_R = 4;
    GEAR_STATE_TARGET_INVALID = 5;
  }
  enum Gear_enable_controlType {
    GEAR_ENABLE_CONTROL_GEAR_MANUALCONTROL = 0;
    GEAR_ENABLE_CONTROL_GEAR_AUTOCONTROL = 1;
  }
  // [] [0|5]
  optional Gear_state_targetType gear_state_target = 1;
  // [] [0|1]
  optional Gear_enable_controlType gear_enable_control = 2;
}

message Torque_control_a3 {
  // Control Message
  enum Driven_enable_controlType {
    DRIVEN_ENABLE_CONTROL_DRIVE_MANUAL = 0;
    DRIVEN_ENABLE_CONTROL_DRIVE_AUTO = 1;
  }
  // [%] [0|100]
  optional double driven_torque = 1;
  // [] [0|1]
  optional Driven_enable_controlType driven_enable_control = 2;
}

message Steering_control_a2 {
  // Control Message
  enum Steering_enable_controlType {
    STEERING_ENABLE_CONTROL_STEERING_MANUALCONTROL = 0;
    STEERING_ENABLE_CONTROL_STEERING_AUTOCONTROL = 1;
  }
  // [deg] [-30|30]
  optional double steering_target = 1;
  // [] [0|1]
  optional Steering_enable_controlType steering_enable_control = 2;
}

message Parking_control_a5 {
  // Control Message
  enum Parking_targetType {
    PARKING_TARGET_RELEASE = 0;
    PARKING_TARGET_PARKING_TRIGGER = 1;
  }
  enum Parking_enable_controlType {
    PARKING_ENABLE_CONTROL_PARKING_MANUALCONTROL = 0;
    PARKING_ENABLE_CONTROL_PARKING_AUTOCONTROL = 1;
  }
  // [] [0|1]
  optional Parking_targetType parking_target = 1;
  // [] [0|1]
  optional Parking_enable_controlType parking_enable_control = 2;
}

message Brake_control_a4 {
  // Control Message
  enum Brake_enable_controlType {
    BRAKE_ENABLE_CONTROL_BRAKE_MANUAL = 0;
    BRAKE_ENABLE_CONTROL_BRAKE_AUTO = 1;
  }
  // [%] [0|100]
  optional double brake_torque = 1;
  // [] [0|1]
  optional Brake_enable_controlType brake_enable_control = 2;
}

message Enable_state_feedback_c3 {
  // Report Message
  enum Parking_enable_stateType {
    PARKING_ENABLE_STATE_PARKING_MANUALCONTROL = 0;
    PARKING_ENABLE_STATE_PARKING_AUTOCONTROL = 1;
    PARKING_ENABLE_STATE_PARKING_TAKEOVER = 2;
  }
  enum Steering_enable_stateType {
    STEERING_ENABLE_STATE_STEERING_MANUALCONTROL = 0;
    STEERING_ENABLE_STATE_STEERING_AUTOCONTROL = 1;
    STEERING_ENABLE_STATE_STEERING_MANUAL_TAKEOVER = 2;
  }
  enum Gear_enable_actualType {
    GEAR_ENABLE_ACTUAL_GEAR_MANUALCONTROL = 0;
    GEAR_ENABLE_ACTUAL_GEAR_AUTOCONTROL = 1;
    GEAR_ENABLE_ACTUAL_GEAR_MANUAL_TAKEOVER = 2;
  }
  enum Driven_enable_stateType {
    DRIVEN_ENABLE_STATE_DRIVE_MANUAL = 0;
    DRIVEN_ENABLE_STATE_DRIVE_AUTO = 1;
    DRIVEN_ENABLE_STATE_DRIVE_TAKEOVER = 2;
  }
  enum Brake_enable_stateType {
    BRAKE_ENABLE_STATE_BRAKE_MANUAL = 0;
    BRAKE_ENABLE_STATE_BRAKE_AUTO = 1;
    BRAKE_ENABLE_STATE_BRAKE_TAKEOVER = 2;
  }
  // [] [0|1]
  optional Parking_enable_stateType parking_enable_state = 1;
  // [] [0|2]
  optional Steering_enable_stateType steering_enable_state = 2;
  // [] [0|2]
  optional Gear_enable_actualType gear_enable_actual = 3;
  // [] [0|2]
  optional Driven_enable_stateType driven_enable_state = 4;
  // [] [0|2]
  optional Brake_enable_stateType brake_enable_state = 5;
}

message Vehicle_state_feedback_c1 {
  // Report Message
  enum Parking_actualType {
    PARKING_ACTUAL_RELEASE = 0;
    PARKING_ACTUAL_PARKING_TRIGGER = 1;
  }
  enum Gear_state_actualType {
    GEAR_STATE_ACTUAL_P = 1;
    GEAR_STATE_ACTUAL_N = 2;
    GEAR_STATE_ACTUAL_D = 3;
    GEAR_STATE_ACTUAL_R = 4;
    GEAR_STATE_ACTUAL_INVALID = 5;
  }
  // [] [0|1]
  optional Parking_actualType parking_actual = 1;
  // [%] [0|100]
  optional double brake_torque_feedback = 2;
  // [] [0|5]
  optional Gear_state_actualType gear_state_actual = 3;
  // [deg] [-40|40]
  optional double steering_actual = 4;
  // [kph] [0|35]
  optional double speed = 5;
}

message Error_state_e1 {
  // Report Message
  enum Brake_error_codeType {
    BRAKE_ERROR_CODE_NO_ERROR = 0;
    BRAKE_ERROR_CODE_ERROR = 1;
  }
  enum Driven_error_codeType {
    DRIVEN_ERROR_CODE_NO_ERROR = 0;
    DRIVEN_ERROR_CODE_ERROR = 1;
  }
  enum Steering_error_codeType {
    STEERING_ERROR_CODE_NO_ERROR = 0;
    STEERING_ERROR_CODE_ERROR = 1;
  }
  enum Parking_error_codeType {
    PARKING_ERROR_CODE_NO_ERROR = 0;
    PARKING_ERROR_CODE_ERROR = 1;
  }
  enum Gear_error_msgType {
    GEAR_ERROR_MSG_NO_ERROR = 0;
    GEAR_ERROR_MSG_ERROR = 1;
  }
  // [bit] [0|1]
  optional Brake_error_codeType brake_error_code = 1;
  // [bit] [0|1]
  optional Driven_error_codeType driven_error_code = 2;
  // [bit] [0|1]
  optional Steering_error_codeType steering_error_code = 3;
  // [bit] [0|1]
  optional Parking_error_codeType parking_error_code = 4;
  // [] [0|1]
  optional Gear_error_msgType gear_error_msg = 5;
}

message Vehicle_state_feedback_2_c4 {
  // Report Message
  // [rpm] [0|4500]
  optional int32 motor_speed = 1;
  // [%] [0|100]
  optional double driven_torque_feedback = 2;
}

message Zhongyun {
  optional Gear_control_a1 gear_control_a1 = 1;          // control message
  optional Torque_control_a3 torque_control_a3 = 2;      // control message
  optional Steering_control_a2 steering_control_a2 = 3;  // control message
  optional Parking_control_a5 parking_control_a5 = 4;    // control message
  optional Brake_control_a4 brake_control_a4 = 5;        // control message
  optional Enable_state_feedback_c3 enable_state_feedback_c3 =
      6;  // report message
  optional Vehicle_state_feedback_c1 vehicle_state_feedback_c1 =
      7;                                       // report message
  optional Error_state_e1 error_state_e1 = 8;  // report message
  optional Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 =
      9;  // report message
}
